"id";"code_reference_id";"code_element_id";"index";"rationale";"linker_name";"release_link_set_id";"first_link_id";"id";"url";"file_path";"xpath";"index_from";"index_to";"project_id";"project_release_id";"content";"source";"original_kind_hint_id";"kind_hint_id";"snippet_id";"declaration";"index";"sentence";"paragraph";"parent_reference_id";"child_index";"title_content_type_id";"title_object_id";"local_content_type_id";"local_object_id";"mid_content_type_id";"mid_object_id";"global_content_type_id";"global_object_id";"resource_content_type_id";"resource_object_id";"id";"codebase_id";"simple_name";"fqn";"kind_id";"deprecated";"abstract";"eclipse_handle";"attcontainer_id";"index";"parser";"id";"kind";"is_type";"is_file";"is_attribute";"is_value"
372;11;12140;0;;"javageneric";339;339;11;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[1]";0;0;8;2;"Fraction";"d";30;30;;"f";55;"Fraction and";"Fraction and 
          BigFraction provide fraction number type that forms the basis for
          the fraction functionality found in Commons-Math. The former one can be
          used for fractions whose numerators and denominators are small enough
          to fit in an int (taking care of intermediate values) while the second
          class should be used when there is a risk the numerator and denominator
          grow very large.";;0;;;27;9;27;1;26;2;25;7;12140;2;"Fraction";"org.apache.commons.math3.fraction.Fraction";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
1;14;12104;0;;"javaclass";1;1;14;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[2]";0;0;8;2;"BigFraction";"d";2;2;;"f";56;"BigFraction provide fraction number type that forms the basis for";"Fraction and 
          BigFraction provide fraction number type that forms the basis for
          the fraction functionality found in Commons-Math. The former one can be
          used for fractions whose numerators and denominators are small enough
          to fit in an int (taking care of intermediate values) while the second
          class should be used when there is a risk the numerator and denominator
          grow very large.";;0;;;27;9;27;1;26;2;25;7;12104;2;"BigFraction";"org.apache.commons.math3.fraction.BigFraction";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
373;17;12140;0;;"javageneric";340;340;17;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[2]/p[4]/tt[1]";0;0;8;2;"Fraction";"d";30;30;;"f";57;"The Fraction class provides many unary and binary";"The Fraction class provides many unary and binary
          fraction operations.  These operations provide the means to add,
          subtract, multiple and, divide fractions along with other functions similar to the real number functions found in
          java.math.BigDecimal:";;0;;;27;9;27;1;26;2;25;7;12140;2;"Fraction";"org.apache.commons.math3.fraction.Fraction";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
2;25;18862;0;"highest_frequency";"javapostclass";2;2;25;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[1]/p[3]/a";0;0;8;2;"GoalType";"d";2;2;;"f";55;"GoalType which has only two values: MAXIMIZE and MINIMIZE.";"The type of goal, i.e. minimization or maximization, is defined by the enumerated
        
        GoalType which has only two values: MAXIMIZE and MINIMIZE.";;0;;;27;5;27;3;26;1;25;7;18862;2;"GoalType";"org.apache.commons.math3.optimization.GoalType";4;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
374;26;12140;0;;"javageneric";341;341;26;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[3]/p[1]/tt[1]";0;0;8;2;"Fraction";"d";30;30;;"f";60;"Fraction instances can be converted to and from strings";"Fraction instances can be converted to and from strings
          using the
          FractionFormat class. FractionFormat is a
          java.text.Format extension and, as such, is used like other
          formatting objects (e.g. java.text.SimpleDateFormat):";;0;;;27;13;27;1;26;2;25;7;12140;2;"Fraction";"org.apache.commons.math3.fraction.Fraction";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
293;29;18865;0;;"javafield";281;281;29;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[1]/p[3]/tt[1]";0;0;8;2;"MAXIMIZE";"d";8;8;;"f";56;"GoalType which has only two values: MAXIMIZE and MINIMIZE.";"The type of goal, i.e. minimization or maximization, is defined by the enumerated
        
        GoalType which has only two values: MAXIMIZE and MINIMIZE.";;0;;;27;5;27;3;26;1;25;7;18865;2;"MAXIMIZE";"org.apache.commons.math3.optimization.GoalType.MAXIMIZE";9;"f";"f";"Err:512";;0;"java";8;"field";"f";"f";"f";"f"
4;30;12239;0;;"javaclass";3;3;30;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[3]/p[1]/a";0;0;8;2;"FractionFormat";"d";2;2;;"f";61;"FractionFormat class.";"Fraction instances can be converted to and from strings
          using the
          FractionFormat class. FractionFormat is a
          java.text.Format extension and, as such, is used like other
          formatting objects (e.g. java.text.SimpleDateFormat):";;0;;;27;13;27;1;26;2;25;7;12239;2;"FractionFormat";"org.apache.commons.math3.fraction.FractionFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
5;31;19859;0;;"javaclass";4;4;31;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[1]/p[3]/tt";0;0;8;2;"RandomGenerator";"d";2;2;;"f";55;"a RandomGenerator instance as a parameter.";"Sections 2.2-2.6 below show how to use the commons math API to generate
     different kinds of random data.  The examples all use the default
     JDK-supplied PRNG.  PRNG pluggability is covered in 2.7.  The only 
     modification required to the examples to use alternative PRNGs is to
     replace the argumentless constructor calls with invocations including
     a RandomGenerator instance as a parameter.";;0;;;27;11;27;2;26;4;25;7;19859;2;"RandomGenerator";"org.apache.commons.math3.random.RandomGenerator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
294;33;18867;0;;"javafield";282;282;33;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[1]/p[3]/tt[2]";0;0;8;2;"MINIMIZE";"d";8;8;;"f";57;"GoalType which has only two values: MAXIMIZE and MINIMIZE.";"The type of goal, i.e. minimization or maximization, is defined by the enumerated
        
        GoalType which has only two values: MAXIMIZE and MINIMIZE.";;0;;;27;5;27;3;26;1;25;7;18867;2;"MINIMIZE";"org.apache.commons.math3.optimization.GoalType.MINIMIZE";9;"f";"f";"Err:512";;0;"java";8;"field";"f";"f";"f";"f"
6;34;20071;0;;"javaclass";5;5;34;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/p/a";0;0;8;2;"RandomData";"d";2;2;;"f";57;"RandomData interface defines methods for generating random sequences";"The 
    RandomData interface defines methods for generating random sequences
    of numbers. The API contracts of these methods use the following concepts:";;0;;;27;15;27;2;26;4;25;7;20071;2;"RandomData";"org.apache.commons.math3.random.RandomData";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
7;35;12239;0;;"javaclass";6;6;35;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[3]/p[1]/tt[2]";0;0;8;2;"FractionFormat";"d";2;2;;"f";62;"FractionFormat is a";"Fraction instances can be converted to and from strings
          using the
          FractionFormat class. FractionFormat is a
          java.text.Format extension and, as such, is used like other
          formatting objects (e.g. java.text.SimpleDateFormat):";;0;;;27;13;27;1;26;2;25;7;12239;2;"FractionFormat";"org.apache.commons.math3.fraction.FractionFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
8;38;18539;0;"heuristic_depth";"javapostclass";7;7;38;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[1]/ul[2]/li[1]/a[1]";0;0;8;2;"UnivariateOptimizer";"d";2;2;;"f";58;"UnivariateOptimizer for";"UnivariateOptimizer for 
              univariate real functions";;0;;;27;5;27;3;26;1;25;7;18539;2;"UnivariateOptimizer";"org.apache.commons.math3.optim.univariate.UnivariateOptimizer";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
375;40;20334;0;;"javageneric";342;342;40;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[2]/p/a";0;0;8;2;"Erf";"d";30;30;;"f";57;"Erf contains several useful functions involving the Error Function, Erf.";"Erf contains several useful functions involving the Error Function, Erf.";;0;;;27;10;27;4;26;3;25;7;20334;2;"Erf";"org.apache.commons.math3.special.Erf";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
376;44;20275;0;;"javageneric";343;343;44;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]/p/a/tt";0;0;8;2;"Gamma";"d";30;30;;"f";61;"Gamma";"Gamma";;0;;;27;14;27;4;26;3;25;7;20275;2;"Gamma";"org.apache.commons.math3.special.Gamma";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
10;46;18864;0;"highest_frequency";"javapostclass";8;8;46;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[1]/ul[2]/li[2]/a[1]";0;0;8;2;"MultivariateOptimizer";"d";2;2;;"f";60;"MultivariateOptimizer for";"MultivariateOptimizer for 
              multivariate real functions";;0;;;27;5;27;3;26;1;25;7;18864;2;"MultivariateOptimizer";"org.apache.commons.math3.optimization.MultivariateOptimizer";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
12;47;20275;0;;"javaclass";9;9;47;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]/div[1]/p/tt";0;0;8;2;"Gamma.gamma(x)";"d";2;2;;"f";63;"Gamma.gamma(x) computes the Gamma function, Γ(x) (see MathWorld, DLMF).";"Gamma.gamma(x) computes the Gamma function, Γ(x) (see MathWorld, DLMF). The accuracy of the Commons-Math implementation is assessed by comparaison with high precision values computed with the Maxima Computer Algebra System.";;0;;;27;16;27;4;26;3;25;7;20275;2;"Gamma";"org.apache.commons.math3.special.Gamma";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
307;51;20285;0;;"javamethod";287;287;51;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]/div[1]/p/tt";0;0;8;2;"Gamma.gamma(x)";"d";5;5;;"f";63;"Gamma.gamma(x) computes the Gamma function, Γ(x) (see MathWorld, DLMF).";"Gamma.gamma(x) computes the Gamma function, Γ(x) (see MathWorld, DLMF). The accuracy of the Commons-Math implementation is assessed by comparaison with high precision values computed with the Maxima Computer Algebra System.";47;0;;;27;16;27;4;26;3;25;7;20285;2;"gamma";"org.apache.commons.math3.special.Gamma.gamma";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
13;52;12239;0;;"javaclass";10;10;52;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[3]/p[2]/tt[2]";0;0;8;2;"FractionFormat";"d";2;2;;"f";66;"a FractionFormat.";"To customize the formatting output, one or two
          java.text.NumberFormat instances can be used to construct
          a FractionFormat.  These number formats control the
          formatting of the numerator and denominator of the fraction:";;0;;;27;13;27;1;26;2;25;7;12239;2;"FractionFormat";"org.apache.commons.math3.fraction.FractionFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
14;53;18806;0;;"javaclass";11;11;53;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[1]/ul[2]/li[3]/a[1]";0;0;8;2;"DifferentiableMultivariateOptimizer";"d";2;2;;"f";62;"DifferentiableMultivariateOptimizer for";"DifferentiableMultivariateOptimizer for 
              differentiable multivariate real functions";;0;;;27;5;27;3;26;1;25;7;18806;2;"DifferentiableMultivariateOptimizer";"org.apache.commons.math3.optimization.DifferentiableMultivariateOptimizer";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
15;54;20098;0;;"javaclass";12;12;54;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/dl/dd[1]/a[4]";0;0;8;2;"RandomDataImpl";"d";2;2;;"f";63;"RandomDataImpl describes the algorithms used to generate";"There is no such thing as a single ""random number.""  What can be
    generated  are sequences of numbers that appear to be random.  When
    using the built-in JDK function Math.random(), sequences of 
    values generated follow the 
    
    Uniform Distribution, which means that the values are evenly spread
    over the interval  between 0 and 1, with no sub-interval having a greater
    probability of containing generated values than any other interval of the
    same length.  The mathematical concept of a
    
    probability distribution basically amounts to asserting that different
    ranges in the set  of possible values of a random variable have
    different probabilities of containing the value.  Commons Math supports
    generating random sequences from each of the distributions in the
    
    distributions package.
    The javadoc for the nextXxx methods in 
    
    RandomDataImpl describes the algorithms used to generate
    random deviates.";;0;;;27;15;27;2;26;4;25;7;20098;2;"RandomDataImpl";"org.apache.commons.math3.random.RandomDataImpl";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
16;55;12239;0;;"javaclass";13;13;55;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[3]/p[3]/tt[1]";0;0;8;2;"FractionFormat";"d";2;2;;"f";67;"FractionFormat.";"Formatting's inverse operation, parsing, can also be performed by
          FractionFormat.  To parse a fraction from a string,
          simply call the parse method:";;0;;;27;13;27;1;26;2;25;7;12239;2;"FractionFormat";"org.apache.commons.math3.fraction.FractionFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
17;57;20098;0;;"javaclass";14;14;57;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/dl/dd[2]/tt[1]";0;0;8;2;"RandomDataImpl";"d";2;2;;"f";65;"nextSecureXxx methods in the RandomDataImpl implementation of";"It is possible for a sequence of numbers to appear random, but
    nonetheless to be predictable based on the algorithm used to generate the
    sequence. If in addition to randomness, strong unpredictability is
    required, it is best to use a  
    
    secure random number generator to generate values (or strings). The
    nextSecureXxx methods in the RandomDataImpl implementation of
    the RandomData interface use the JDK SecureRandom
    PRNG to generate cryptographically secure sequences.  The 
    setSecureAlgorithm method allows you to change the underlying
    PRNG. These methods are much slower than the corresponding
    ""non-secure"" versions, so they should only be used when cryptographic
    security is required.  The ISAACRandom class implements a fast
    cryptographically secure pseudorandom numbers generator.";;0;;;27;15;27;2;26;4;25;7;20098;2;"RandomDataImpl";"org.apache.commons.math3.random.RandomDataImpl";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
18;60;18870;0;;"javaclass";15;15;60;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[1]/ul[2]/li[4]/a[1]";0;0;8;2;"DifferentiableMultivariateVectorOptimizer";"d";2;2;;"f";64;"DifferentiableMultivariateVectorOptimizer for";"DifferentiableMultivariateVectorOptimizer for 
              differentiable multivariate vectorial functions";;0;;;27;5;27;3;26;1;25;7;18870;2;"DifferentiableMultivariateVectorOptimizer";"org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
19;61;20071;0;;"javaclass";16;16;61;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/dl/dd[2]/tt[2]";0;0;8;2;"RandomData";"d";2;2;;"f";66;"the RandomData interface use the JDK SecureRandom";"It is possible for a sequence of numbers to appear random, but
    nonetheless to be predictable based on the algorithm used to generate the
    sequence. If in addition to randomness, strong unpredictability is
    required, it is best to use a  
    
    secure random number generator to generate values (or strings). The
    nextSecureXxx methods in the RandomDataImpl implementation of
    the RandomData interface use the JDK SecureRandom
    PRNG to generate cryptographically secure sequences.  The 
    setSecureAlgorithm method allows you to change the underlying
    PRNG. These methods are much slower than the corresponding
    ""non-secure"" versions, so they should only be used when cryptographic
    security is required.  The ISAACRandom class implements a fast
    cryptographically secure pseudorandom numbers generator.";;0;;;27;15;27;2;26;4;25;7;20071;2;"RandomData";"org.apache.commons.math3.random.RandomData";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
410;67;20375;0;;"javageneric";376;376;67;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/dl/dd[2]/tt[4]";0;0;8;2;"setSecureAlgorithm";"d";2;30;;"f";68;"setSecureAlgorithm method allows you to change the underlying";"It is possible for a sequence of numbers to appear random, but
    nonetheless to be predictable based on the algorithm used to generate the
    sequence. If in addition to randomness, strong unpredictability is
    required, it is best to use a  
    
    secure random number generator to generate values (or strings). The
    nextSecureXxx methods in the RandomDataImpl implementation of
    the RandomData interface use the JDK SecureRandom
    PRNG to generate cryptographically secure sequences.  The 
    setSecureAlgorithm method allows you to change the underlying
    PRNG. These methods are much slower than the corresponding
    ""non-secure"" versions, so they should only be used when cryptographic
    security is required.  The ISAACRandom class implements a fast
    cryptographically secure pseudorandom numbers generator.";;0;;;27;15;27;2;26;4;25;7;20375;2;"setSecureAlgorithm";"org.apache.commons.math3.random.RandomDataImpl.setSecureAlgorithm";5;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
20;70;19781;0;;"javaclass";17;17;70;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/dl/dd[2]/tt[5]";0;0;8;2;"ISAACRandom";"d";2;2;;"f";69;"The ISAACRandom class implements a fast";"It is possible for a sequence of numbers to appear random, but
    nonetheless to be predictable based on the algorithm used to generate the
    sequence. If in addition to randomness, strong unpredictability is
    required, it is best to use a  
    
    secure random number generator to generate values (or strings). The
    nextSecureXxx methods in the RandomDataImpl implementation of
    the RandomData interface use the JDK SecureRandom
    PRNG to generate cryptographically secure sequences.  The 
    setSecureAlgorithm method allows you to change the underlying
    PRNG. These methods are much slower than the corresponding
    ""non-secure"" versions, so they should only be used when cryptographic
    security is required.  The ISAACRandom class implements a fast
    cryptographically secure pseudorandom numbers generator.";;0;;;27;15;27;2;26;4;25;7;19781;2;"ISAACRandom";"org.apache.commons.math3.random.ISAACRandom";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
21;72;20098;0;;"javaclass";18;18;72;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/dl/dd[3]/tt[1]";0;0;8;2;"RandomDataImpl";"d";2;2;;"f";70;"By default, the implementation provided in RandomDataImpl";"By default, the implementation provided in RandomDataImpl
    uses the JDK-provided PRNG.  Like most other PRNGs, the JDK generator
    generates sequences of random numbers based on an initial ""seed value"".
    For the non-secure methods, starting with the same seed always produces the
    same sequence of values.  Secure sequences started with the same seeds will
    diverge. When a new RandomDataImpl is created, the underlying
    random number generators are not initialized.  The first
    call to a data generation method, or to a  reSeed() method
    initializes the appropriate generator.  If you do not explicitly seed the
    generator, it is by default seeded with the current time in milliseconds.
    Therefore, to generate sequences of random data values, you should always
    instantiate one  RandomDataImpl and use it
    repeatedly instead of creating new instances for subsequent values in the
    sequence.  For example, the following will generate a random sequence of 50
    long integers between 1 and 1,000,000, using the current time in
    milliseconds as the seed for the JDK PRNG:
    
RandomData randomData = new RandomDataImpl(); 
for (int i = 0; i < 1000; i++) {
    value = randomData.nextLong(1, 1000000);
}
    
    The following will not in general produce a good random sequence, since the
    PRNG is reseeded each time through the loop with the current time in
    milliseconds:
    
for (int i = 0; i < 1000; i++) {
    RandomDataImpl randomData = new RandomDataImpl(); 
    value = randomData.nextLong(1, 1000000);
}
    
    The following will produce the same random sequence each time it is
    executed:
    
RandomData randomData = new RandomDataImpl(); 
randomData.reSeed(1000);
for (int i = 0; i = 1000; i++) {
    value = randomData.nextLong(1, 1000000);
}
    
    The following will produce a different random sequence each time it is
     executed. 
    
RandomData randomData = new RandomDataImpl(); 
randomData.reSeedSecure(1000);
for (int i = 0; i < 1000; i++) {
    value = randomData.nextSecureLong(1, 1000000);
}";;0;;;27;15;27;2;26;4;25;7;20098;2;"RandomDataImpl";"org.apache.commons.math3.random.RandomDataImpl";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
22;73;18679;0;"highest_frequency";"javapostclass";19;19;73;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[1]/p[5]/a[3]";0;0;8;2;"LeastSquaresConverter";"d";2;2;;"f";68;"LeastSquaresConverter helper class.";"Despite there are only four types of supported optimizers, it is possible to optimize
        a transform a 
        non-differentiable multivariate vectorial function by converting it to a 
        non-differentiable multivariate real function thanks to the 
        LeastSquaresConverter helper class. The transformed function can be optimized using
        any implementation of the 
        MultivariateOptimizer interface.";;0;;;27;5;27;3;26;1;25;7;18679;2;"LeastSquaresConverter";"org.apache.commons.math3.optimization.LeastSquaresConverter";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
24;75;20098;0;;"javaclass";20;20;75;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/dl/dd[3]/tt[2]";0;0;8;2;"RandomDataImpl";"d";2;2;;"f";71;"When a new RandomDataImpl is created, the underlying";"By default, the implementation provided in RandomDataImpl
    uses the JDK-provided PRNG.  Like most other PRNGs, the JDK generator
    generates sequences of random numbers based on an initial ""seed value"".
    For the non-secure methods, starting with the same seed always produces the
    same sequence of values.  Secure sequences started with the same seeds will
    diverge. When a new RandomDataImpl is created, the underlying
    random number generators are not initialized.  The first
    call to a data generation method, or to a  reSeed() method
    initializes the appropriate generator.  If you do not explicitly seed the
    generator, it is by default seeded with the current time in milliseconds.
    Therefore, to generate sequences of random data values, you should always
    instantiate one  RandomDataImpl and use it
    repeatedly instead of creating new instances for subsequent values in the
    sequence.  For example, the following will generate a random sequence of 50
    long integers between 1 and 1,000,000, using the current time in
    milliseconds as the seed for the JDK PRNG:
    
RandomData randomData = new RandomDataImpl(); 
for (int i = 0; i < 1000; i++) {
    value = randomData.nextLong(1, 1000000);
}
    
    The following will not in general produce a good random sequence, since the
    PRNG is reseeded each time through the loop with the current time in
    milliseconds:
    
for (int i = 0; i < 1000; i++) {
    RandomDataImpl randomData = new RandomDataImpl(); 
    value = randomData.nextLong(1, 1000000);
}
    
    The following will produce the same random sequence each time it is
    executed:
    
RandomData randomData = new RandomDataImpl(); 
randomData.reSeed(1000);
for (int i = 0; i = 1000; i++) {
    value = randomData.nextLong(1, 1000000);
}
    
    The following will produce a different random sequence each time it is
     executed. 
    
RandomData randomData = new RandomDataImpl(); 
randomData.reSeedSecure(1000);
for (int i = 0; i < 1000; i++) {
    value = randomData.nextSecureLong(1, 1000000);
}";;0;;;27;15;27;2;26;4;25;7;20098;2;"RandomDataImpl";"org.apache.commons.math3.random.RandomDataImpl";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
25;76;18864;0;"highest_frequency";"javapostclass";21;21;76;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[1]/p[5]/a[4]";0;0;8;2;"MultivariateOptimizer";"d";2;2;;"f";69;"MultivariateOptimizer interface.";"Despite there are only four types of supported optimizers, it is possible to optimize
        a transform a 
        non-differentiable multivariate vectorial function by converting it to a 
        non-differentiable multivariate real function thanks to the 
        LeastSquaresConverter helper class. The transformed function can be optimized using
        any implementation of the 
        MultivariateOptimizer interface.";;0;;;27;5;27;3;26;1;25;7;18864;2;"MultivariateOptimizer";"org.apache.commons.math3.optimization.MultivariateOptimizer";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
27;79;18539;0;"heuristic_depth";"javapostclass";22;22;79;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[2]/p[1]/a";0;0;8;2;"UnivariateOptimizer";"d";2;2;;"f";71;"UnivariateOptimizer is used to find the minimal values of a univariate real-valued";"A 
          UnivariateOptimizer is used to find the minimal values of a univariate real-valued
          function f.";;0;;;27;8;27;3;26;1;25;7;18539;2;"UnivariateOptimizer";"org.apache.commons.math3.optim.univariate.UnivariateOptimizer";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
29;80;20098;0;;"javaclass";23;23;80;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/dl/dd[3]/tt[4]";0;0;8;2;"RandomDataImpl";"d";2;2;;"f";73;"instantiate one  RandomDataImpl and use it";"By default, the implementation provided in RandomDataImpl
    uses the JDK-provided PRNG.  Like most other PRNGs, the JDK generator
    generates sequences of random numbers based on an initial ""seed value"".
    For the non-secure methods, starting with the same seed always produces the
    same sequence of values.  Secure sequences started with the same seeds will
    diverge. When a new RandomDataImpl is created, the underlying
    random number generators are not initialized.  The first
    call to a data generation method, or to a  reSeed() method
    initializes the appropriate generator.  If you do not explicitly seed the
    generator, it is by default seeded with the current time in milliseconds.
    Therefore, to generate sequences of random data values, you should always
    instantiate one  RandomDataImpl and use it
    repeatedly instead of creating new instances for subsequent values in the
    sequence.  For example, the following will generate a random sequence of 50
    long integers between 1 and 1,000,000, using the current time in
    milliseconds as the seed for the JDK PRNG:
    
RandomData randomData = new RandomDataImpl(); 
for (int i = 0; i < 1000; i++) {
    value = randomData.nextLong(1, 1000000);
}
    
    The following will not in general produce a good random sequence, since the
    PRNG is reseeded each time through the loop with the current time in
    milliseconds:
    
for (int i = 0; i < 1000; i++) {
    RandomDataImpl randomData = new RandomDataImpl(); 
    value = randomData.nextLong(1, 1000000);
}
    
    The following will produce the same random sequence each time it is
    executed:
    
RandomData randomData = new RandomDataImpl(); 
randomData.reSeed(1000);
for (int i = 0; i = 1000; i++) {
    value = randomData.nextLong(1, 1000000);
}
    
    The following will produce a different random sequence each time it is
     executed. 
    
RandomData randomData = new RandomDataImpl(); 
randomData.reSeedSecure(1000);
for (int i = 0; i < 1000; i++) {
    value = randomData.nextSecureLong(1, 1000000);
}";;0;;;27;15;27;2;26;4;25;7;20098;2;"RandomDataImpl";"org.apache.commons.math3.random.RandomDataImpl";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
30;82;20275;0;;"javaclass";24;24;82;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]/div[2]/p/tt";0;0;8;2;"Gamma.logGamma(x)";"d";2;2;;"f";75;"Gamma.logGamma(x) computes the natural logarithm of the Gamma function, log Γ(x), for x > 0 (see MathWorld, DLMF).";"Gamma.logGamma(x) computes the natural logarithm of the Gamma function, log Γ(x), for x > 0 (see MathWorld, DLMF). The accuracy of the Commons-Math implementation is assessed by comparaison with high precision values computed with the Maxima Computer Algebra System.";;0;;;27;19;27;4;26;3;25;7;20275;2;"Gamma";"org.apache.commons.math3.special.Gamma";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
324;83;20312;0;;"javamethod";300;300;83;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]/div[2]/p/tt";0;0;8;2;"Gamma.logGamma(x)";"d";5;5;;"f";75;"Gamma.logGamma(x) computes the natural logarithm of the Gamma function, log Γ(x), for x > 0 (see MathWorld, DLMF).";"Gamma.logGamma(x) computes the natural logarithm of the Gamma function, log Γ(x), for x > 0 (see MathWorld, DLMF). The accuracy of the Commons-Math implementation is assessed by comparaison with high precision values computed with the Maxima Computer Algebra System.";82;0;;;27;19;27;4;26;3;25;7;20312;2;"logGamma";"org.apache.commons.math3.special.Gamma.logGamma";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
31;84;19867;0;;"javaclass";25;25;84;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[3]/p[1]/a[1]";0;0;8;2;"UncorrelatedRandomVectorGenerator";"d";2;2;;"f";75;"UncorrelatedRandomVectorGenerator class simplifies this";"Some algorithms require random vectors instead of random scalars. When the
    components of these vectors are uncorrelated, they may be generated simply
    one at a time and packed together in the vector. The 
    UncorrelatedRandomVectorGenerator class simplifies this
    process by setting the mean and deviation of each component once and
    generating complete vectors. When the components are correlated however,
    generating them is much more difficult. The 
    CorrelatedRandomVectorGenerator class provides this service. In this
    case, the user must set up a complete covariance matrix instead of a simple
    standard deviations vector. This matrix gathers both the variance and the
    correlation information of the probability law.";;0;;;27;18;27;2;26;4;25;7;19867;2;"UncorrelatedRandomVectorGenerator";"org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
411;85;18562;0;;"javageneric";377;377;85;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[2]/p[2]/tt[2]";0;0;8;2;"optimize";"d";30;30;;"f";74;"finding algorithms is replaced by optimize methods.";"These algorithms usage is very similar to root-finding algorithms usage explained
          in the analysis package. The main difference is that the solve methods in root
          finding algorithms is replaced by optimize methods.";;0;;;27;8;27;3;26;1;25;7;18562;2;"optimize";"org.apache.commons.math3.optim.univariate.UnivariateOptimizer.optimize";5;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
32;86;19813;0;;"javaclass";26;26;86;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[3]/p[1]/a[2]";0;0;8;2;"CorrelatedRandomVectorGenerator";"d";2;2;;"f";76;"CorrelatedRandomVectorGenerator class provides this service.";"Some algorithms require random vectors instead of random scalars. When the
    components of these vectors are uncorrelated, they may be generated simply
    one at a time and packed together in the vector. The 
    UncorrelatedRandomVectorGenerator class simplifies this
    process by setting the mean and deviation of each component once and
    generating complete vectors. When the components are correlated however,
    generating them is much more difficult. The 
    CorrelatedRandomVectorGenerator class provides this service. In this
    case, the user must set up a complete covariance matrix instead of a simple
    standard deviations vector. This matrix gathers both the variance and the
    correlation information of the probability law.";;0;;;27;18;27;2;26;4;25;7;19813;2;"CorrelatedRandomVectorGenerator";"org.apache.commons.math3.random.CorrelatedRandomVectorGenerator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
33;93;19870;0;;"javaclass";27;27;93;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[3]/p[4]/a[1]";0;0;8;2;"UniformRandomGenerator";"d";2;2;;"f";80;"UniformRandomGenerator";"In addition to multivariate normal distributions, correlated vectors from multivariate uniform
    distributions can be generated by creating a
    UniformRandomGenerator
    in place of the 
    GaussianRandomGenerator above.  More generally, any
    NormalizedRandomGenerator
    may be used.";;0;;;27;18;27;2;26;4;25;7;19870;2;"UniformRandomGenerator";"org.apache.commons.math3.random.UniformRandomGenerator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
34;97;19732;0;;"javaclass";28;28;97;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[3]/p[4]/tt";0;0;8;2;"GaussianRandomGenerator";"d";2;2;;"f";81;"GaussianRandomGenerator above.";"In addition to multivariate normal distributions, correlated vectors from multivariate uniform
    distributions can be generated by creating a
    UniformRandomGenerator
    in place of the 
    GaussianRandomGenerator above.  More generally, any
    NormalizedRandomGenerator
    may be used.";;0;;;27;18;27;2;26;4;25;7;19732;2;"GaussianRandomGenerator";"org.apache.commons.math3.random.GaussianRandomGenerator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
35;100;20275;0;;"javaclass";29;29;100;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]/div[3]/p/tt";0;0;8;2;"Gamma.regularizedGammaP(a, x)";"d";2;2;;"f";84;"Gamma.regularizedGammaP(a, x) computes the value of the regularized Gamma function, P(a, x) (see MathWorld).";"Gamma.regularizedGammaP(a, x) computes the value of the regularized Gamma function, P(a, x) (see MathWorld).";;0;;;27;21;27;4;26;3;25;7;20275;2;"Gamma";"org.apache.commons.math3.special.Gamma";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
36;101;19983;0;;"javaclass";30;30;101;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[3]/p[4]/a[2]";0;0;8;2;"NormalizedRandomGenerator";"d";2;2;;"f";82;"NormalizedRandomGenerator";"In addition to multivariate normal distributions, correlated vectors from multivariate uniform
    distributions can be generated by creating a
    UniformRandomGenerator
    in place of the 
    GaussianRandomGenerator above.  More generally, any
    NormalizedRandomGenerator
    may be used.";;0;;;27;18;27;2;26;4;25;7;19983;2;"NormalizedRandomGenerator";"org.apache.commons.math3.random.NormalizedRandomGenerator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
332;102;20332;0;;"javamethod";307;307;102;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]/div[3]/p/tt";0;0;8;2;"Gamma.regularizedGammaP(a, x)";"d";5;5;;"f";84;"Gamma.regularizedGammaP(a, x) computes the value of the regularized Gamma function, P(a, x) (see MathWorld).";"Gamma.regularizedGammaP(a, x) computes the value of the regularized Gamma function, P(a, x) (see MathWorld).";100;0;;;27;21;27;4;26;3;25;7;20332;2;"regularizedGammaP";"org.apache.commons.math3.special.Gamma.regularizedGammaP";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
412;104;20190;0;;"javageneric";378;378;104;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[4]/p/tt[1]";0;0;8;2;"nextHexString";"d";2;30;;"f";84;"The methods nextHexString and nextSecureHexString";"The methods nextHexString and nextSecureHexString
    can be used to generate random strings of hexadecimal characters.  Both
    of these methods produce sequences of strings with good dispersion
    properties.  The difference between the two methods is that the second is
    cryptographically secure.  Specifically, the implementation of 
    nextHexString(n) in RandomDataImpl uses the
    following simple algorithm to generate a string of n hex digits:";;0;;;27;20;27;2;26;4;25;7;20190;2;"nextHexString";"org.apache.commons.math3.random.RandomDataImpl.nextHexString";5;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
377;106;20277;0;;"javageneric";344;344;106;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[4]/p/a";0;0;8;2;"Beta";"d";30;30;;"f";87;"Beta contains several useful functions involving the Beta Function.";"Beta contains several useful functions involving the Beta Function.";;0;;;27;24;27;4;26;3;25;7;20277;2;"Beta";"org.apache.commons.math3.special.Beta";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
413;107;20270;0;;"javageneric";379;379;107;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[4]/p/tt[2]";0;0;8;2;"nextSecureHexString";"d";2;30;;"f";85;"The methods nextHexString and nextSecureHexString";"The methods nextHexString and nextSecureHexString
    can be used to generate random strings of hexadecimal characters.  Both
    of these methods produce sequences of strings with good dispersion
    properties.  The difference between the two methods is that the second is
    cryptographically secure.  Specifically, the implementation of 
    nextHexString(n) in RandomDataImpl uses the
    following simple algorithm to generate a string of n hex digits:";;0;;;27;20;27;2;26;4;25;7;20270;2;"nextSecureHexString";"org.apache.commons.math3.random.RandomDataImpl.nextSecureHexString";5;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
37;108;18985;0;"heuristic_depth";"javapostclass";31;31;108;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[4]/p[5]/a[1]";0;0;8;2;"MultivariateFunctionMappingAdapter";"d";2;2;;"f";86;"MultivariateFunctionMappingAdapter and";"The first two simplex-based methods do not handle simple bounds constraints by themselves.
          However there are two adapters(
          MultivariateFunctionMappingAdapter and 
          MultivariateFunctionPenaltyAdapter) that can be used to wrap the user function in
          such a way the wrapped function is unbounded and can be used with these optimizers, despite
          the fact the underlying function is still bounded and will be called only with feasible
          points that fulfill the constraints. Note however that using these adapters are only a
          poor man solutions to simple bounds optimization constraints. Better solutions are to use an
          optimizer that directly supports simple bounds. Some caveats of the mapping adapter
          solution are that";;0;;;27;17;27;3;26;1;25;7;18985;2;"MultivariateFunctionMappingAdapter";"org.apache.commons.math3.optimization.direct.MultivariateFunctionMappingAdapter";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
39;109;20277;0;;"javaclass";32;32;109;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[4]/div[1]/p/tt";0;0;8;2;"Beta.logBeta(a, b)";"d";2;2;;"f";89;"Beta.logBeta(a, b) computes the value of the natural logarithm of the Beta function, log B(a, b).";"Beta.logBeta(a, b) computes the value of the natural logarithm of the Beta function, log B(a, b). (see MathWorld, DLMF). The accuracy of the Commons-Math implementation is assessed by comparaison with high precision values computed with the Maxima Computer Algebra System.";;0;;;27;27;27;4;26;3;25;7;20277;2;"Beta";"org.apache.commons.math3.special.Beta";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
343;110;20295;0;;"javamethod";317;317;110;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[4]/div[1]/p/tt";0;0;8;2;"Beta.logBeta(a, b)";"d";5;5;;"f";89;"Beta.logBeta(a, b) computes the value of the natural logarithm of the Beta function, log B(a, b).";"Beta.logBeta(a, b) computes the value of the natural logarithm of the Beta function, log B(a, b). (see MathWorld, DLMF). The accuracy of the Commons-Math implementation is assessed by comparaison with high precision values computed with the Maxima Computer Algebra System.";109;0;;;27;27;27;4;26;3;25;7;20295;2;"logBeta";"org.apache.commons.math3.special.Beta.logBeta";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
337;111;20190;0;;"javamethod";311;311;111;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[4]/p/tt[3]";0;0;8;2;"nextHexString(n)";"d";5;5;;"f";86;"nextHexString(n) in RandomDataImpl uses the";"The methods nextHexString and nextSecureHexString
    can be used to generate random strings of hexadecimal characters.  Both
    of these methods produce sequences of strings with good dispersion
    properties.  The difference between the two methods is that the second is
    cryptographically secure.  Specifically, the implementation of 
    nextHexString(n) in RandomDataImpl uses the
    following simple algorithm to generate a string of n hex digits:";;0;;;27;20;27;2;26;4;25;7;20190;2;"nextHexString";"org.apache.commons.math3.random.RandomDataImpl.nextHexString";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
40;112;19182;0;"heuristic_depth";"javapostclass";33;33;112;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[4]/p[5]/a[2]";0;0;8;2;"MultivariateFunctionPenaltyAdapter";"d";2;2;;"f";87;"MultivariateFunctionPenaltyAdapter) that can be used to wrap the user function in";"The first two simplex-based methods do not handle simple bounds constraints by themselves.
          However there are two adapters(
          MultivariateFunctionMappingAdapter and 
          MultivariateFunctionPenaltyAdapter) that can be used to wrap the user function in
          such a way the wrapped function is unbounded and can be used with these optimizers, despite
          the fact the underlying function is still bounded and will be called only with feasible
          points that fulfill the constraints. Note however that using these adapters are only a
          poor man solutions to simple bounds optimization constraints. Better solutions are to use an
          optimizer that directly supports simple bounds. Some caveats of the mapping adapter
          solution are that";;0;;;27;17;27;3;26;1;25;7;19182;2;"MultivariateFunctionPenaltyAdapter";"org.apache.commons.math3.optimization.direct.MultivariateFunctionPenaltyAdapter";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
42;113;20098;0;;"javaclass";34;34;113;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[4]/p/tt[4]";0;0;8;2;"RandomDataImpl";"d";2;2;;"f";87;"nextHexString(n) in RandomDataImpl uses the";"The methods nextHexString and nextSecureHexString
    can be used to generate random strings of hexadecimal characters.  Both
    of these methods produce sequences of strings with good dispersion
    properties.  The difference between the two methods is that the second is
    cryptographically secure.  Specifically, the implementation of 
    nextHexString(n) in RandomDataImpl uses the
    following simple algorithm to generate a string of n hex digits:";;0;;;27;20;27;2;26;4;25;7;20098;2;"RandomDataImpl";"org.apache.commons.math3.random.RandomDataImpl";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
43;116;20098;0;;"javaclass";35;35;116;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[4]/tt[1]";0;0;8;2;"RandomDataImpl";"d";2;2;;"f";89;"The RandomDataImpl implementation of the ""secure"" version,";"2.4 Random Strings
    
    The methods nextHexString and nextSecureHexString
    can be used to generate random strings of hexadecimal characters.  Both
    of these methods produce sequences of strings with good dispersion
    properties.  The difference between the two methods is that the second is
    cryptographically secure.  Specifically, the implementation of 
    nextHexString(n) in RandomDataImpl uses the
    following simple algorithm to generate a string of n hex digits:
    n/2+1 binary bytes are generated using the underlying Random
    Each binary byte is translated into 2 hex digits
    The RandomDataImpl implementation of the ""secure"" version, 
    nextSecureHexString generates hex characters in 40-byte
    ""chunks"" using a 3-step process:
    20 random bytes are generated using the underlying 
    SecureRandom.
    SHA-1 hash is applied to yield a 20-byte binary digest.
    Each byte of the binary digest is converted to 2 hex digits
    Similarly to the secure random number generation methods, 
    nextSecureHexString is much slower than
    the non-secure version.  It should be used only for applications such as 
    generating unique session or transaction ids where predictability of
    subsequent ids based on observation of previous values is a security
    concern.  If all that is needed is an even distribution of hex characters
    in the generated strings, the non-secure method should be used.";;0;;;27;20;27;2;26;4;25;7;20098;2;"RandomDataImpl";"org.apache.commons.math3.random.RandomDataImpl";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
414;119;20270;0;;"javageneric";380;380;119;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[4]/tt[2]";0;0;8;2;"nextSecureHexString";"d";2;30;;"f";90;"nextSecureHexString generates hex characters in 40-byte";"2.4 Random Strings
    
    The methods nextHexString and nextSecureHexString
    can be used to generate random strings of hexadecimal characters.  Both
    of these methods produce sequences of strings with good dispersion
    properties.  The difference between the two methods is that the second is
    cryptographically secure.  Specifically, the implementation of 
    nextHexString(n) in RandomDataImpl uses the
    following simple algorithm to generate a string of n hex digits:
    n/2+1 binary bytes are generated using the underlying Random
    Each binary byte is translated into 2 hex digits
    The RandomDataImpl implementation of the ""secure"" version, 
    nextSecureHexString generates hex characters in 40-byte
    ""chunks"" using a 3-step process:
    20 random bytes are generated using the underlying 
    SecureRandom.
    SHA-1 hash is applied to yield a 20-byte binary digest.
    Each byte of the binary digest is converted to 2 hex digits
    Similarly to the secure random number generation methods, 
    nextSecureHexString is much slower than
    the non-secure version.  It should be used only for applications such as 
    generating unique session or transaction ids where predictability of
    subsequent ids based on observation of previous values is a security
    concern.  If all that is needed is an even distribution of hex characters
    in the generated strings, the non-secure method should be used.";;0;;;27;20;27;2;26;4;25;7;20270;2;"nextSecureHexString";"org.apache.commons.math3.random.RandomDataImpl.nextSecureHexString";5;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
44;120;8825;0;;"javaclass";36;36;120;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/p[5]/a";0;0;8;2;"DifferentiableMultivariateVectorFunction";"d";2;2;;"f";91;"DifferentiableMultivariateVectorFunction interface.";"In order to solve a vectorial optimization problem, the user must provide it as
          an object implementing the 
          DifferentiableMultivariateVectorFunction interface. The object will be provided to
          the estimate method of the optimizer, along with the target and weight arrays,
          thus allowing the optimizer to compute the residuals at will. The last parameter to the
          estimate method is the point from which the optimizer will start its
          search for the optimal point.";;0;;;27;22;27;3;26;1;25;7;8825;2;"DifferentiableMultivariateVectorFunction";"org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
415;125;20270;0;;"javageneric";381;381;125;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[4]/tt[3]";0;0;8;2;"nextSecureHexString";"d";2;30;;"f";92;"nextSecureHexString is much slower than";"2.4 Random Strings
    
    The methods nextHexString and nextSecureHexString
    can be used to generate random strings of hexadecimal characters.  Both
    of these methods produce sequences of strings with good dispersion
    properties.  The difference between the two methods is that the second is
    cryptographically secure.  Specifically, the implementation of 
    nextHexString(n) in RandomDataImpl uses the
    following simple algorithm to generate a string of n hex digits:
    n/2+1 binary bytes are generated using the underlying Random
    Each binary byte is translated into 2 hex digits
    The RandomDataImpl implementation of the ""secure"" version, 
    nextSecureHexString generates hex characters in 40-byte
    ""chunks"" using a 3-step process:
    20 random bytes are generated using the underlying 
    SecureRandom.
    SHA-1 hash is applied to yield a 20-byte binary digest.
    Each byte of the binary digest is converted to 2 hex digits
    Similarly to the secure random number generation methods, 
    nextSecureHexString is much slower than
    the non-secure version.  It should be used only for applications such as 
    generating unique session or transaction ids where predictability of
    subsequent ids based on observation of previous values is a security
    concern.  If all that is needed is an even distribution of hex characters
    in the generated strings, the non-secure method should be used.";;0;;;27;20;27;2;26;4;25;7;20270;2;"nextSecureHexString";"org.apache.commons.math3.random.RandomDataImpl.nextSecureHexString";5;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
416;129;20129;0;;"javageneric";382;382;129;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[5]/p[1]/tt[1]";0;0;8;2;"nextSample";"d";2;30;;"f";94;"nextSample method in the RandomData interface.";"To select a random sample of objects in a collection, you can use the
    nextSample method in the RandomData interface.
    Specifically,  if c is a collection containing at least 
    k objects, and randomData is a 
    RandomData instance randomData.nextSample(c, k)
    will return an object[] array of length k
    consisting of elements randomly selected from the collection.  If 
    c contains duplicate references, there may be duplicate
    references in the returned array; otherwise returned elements will be
    unique -- i.e., the sampling is without replacement among the object
    references in the collection.";;0;;;27;23;27;2;26;4;25;7;20129;2;"nextSample";"org.apache.commons.math3.random.RandomData.nextSample";5;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
45;132;20071;0;;"javaclass";37;37;132;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[5]/p[1]/tt[2]";0;0;8;2;"RandomData";"d";2;2;;"f";95;"nextSample method in the RandomData interface.";"To select a random sample of objects in a collection, you can use the
    nextSample method in the RandomData interface.
    Specifically,  if c is a collection containing at least 
    k objects, and randomData is a 
    RandomData instance randomData.nextSample(c, k)
    will return an object[] array of length k
    consisting of elements randomly selected from the collection.  If 
    c contains duplicate references, there may be duplicate
    references in the returned array; otherwise returned elements will be
    unique -- i.e., the sampling is without replacement among the object
    references in the collection.";;0;;;27;23;27;2;26;4;25;7;20071;2;"RandomData";"org.apache.commons.math3.random.RandomData";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
46;134;8825;0;;"javaclass";38;38;134;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/dl/dd/p[1]/a";0;0;8;2;"DifferentiableMultivariateVectorFunction";"d";2;2;;"f";95;"First we need to implement the interface DifferentiableMultivariateVectorFunction.";"First we need to implement the interface DifferentiableMultivariateVectorFunction.
This requires the implementation of the method signatures:";;0;;;27;22;27;3;26;1;25;7;8825;2;"DifferentiableMultivariateVectorFunction";"org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
484;136;11662;0;;"javageneric";415;415;136;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[5]/p[1]/tt[5]";0;0;8;2;"randomData";"d";2;30;;"f";98;"k objects, and randomData is a";"To select a random sample of objects in a collection, you can use the
    nextSample method in the RandomData interface.
    Specifically,  if c is a collection containing at least 
    k objects, and randomData is a 
    RandomData instance randomData.nextSample(c, k)
    will return an object[] array of length k
    consisting of elements randomly selected from the collection.  If 
    c contains duplicate references, there may be duplicate
    references in the returned array; otherwise returned elements will be
    unique -- i.e., the sampling is without replacement among the object
    references in the collection.";;0;;;27;23;27;2;26;4;25;7;11662;2;"randomData";"org.apache.commons.math3.distribution.AbstractRealDistribution.randomData";8;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
47;137;12140;0;;"javaclass";39;39;137;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[2]";0;0;8;2;"Fraction";"d";2;2;;"f";-100000;"9.2 Fraction Numbers";"9.2 Fraction Numbers";;0;27;9;27;9;27;1;26;2;25;7;12140;2;"Fraction";"org.apache.commons.math3.fraction.Fraction";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
48;139;8844;0;;"javaclass";40;40;139;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/dl/dd/p[2]/tt";0;0;8;2;"MultivariateMatrixFunction";"d";2;2;;"f";96;"We'll tackle the implementation of the MultivariateMatrixFunction jacobian() method first.";"We'll tackle the implementation of the MultivariateMatrixFunction jacobian() method first.  You may wish to familiarize yourself with what a  Jacobian Matrix is.
In this case the Jacobian is the partial derivative of the function with respect
to the parameters a, b and c.  These derivatives are computed as follows:";;0;;;27;22;27;3;26;1;25;7;8844;2;"MultivariateMatrixFunction";"org.apache.commons.math3.analysis.MultivariateMatrixFunction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
49;141;20071;0;;"javaclass";41;41;141;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[5]/p[1]/tt[6]";0;0;8;2;"RandomData";"d";2;2;;"f";99;"RandomData instance randomData.";"To select a random sample of objects in a collection, you can use the
    nextSample method in the RandomData interface.
    Specifically,  if c is a collection containing at least 
    k objects, and randomData is a 
    RandomData instance randomData.nextSample(c, k)
    will return an object[] array of length k
    consisting of elements randomly selected from the collection.  If 
    c contains duplicate references, there may be duplicate
    references in the returned array; otherwise returned elements will be
    unique -- i.e., the sampling is without replacement among the object
    references in the collection.";;0;;;27;23;27;2;26;4;25;7;20071;2;"RandomData";"org.apache.commons.math3.random.RandomData";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
349;142;8829;0;;"javamethod";322;322;142;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/dl/dd/p[2]/tt";0;0;8;2;"jacobian()";"d";5;5;;"f";96;"We'll tackle the implementation of the MultivariateMatrixFunction jacobian() method first.";"We'll tackle the implementation of the MultivariateMatrixFunction jacobian() method first.  You may wish to familiarize yourself with what a  Jacobian Matrix is.
In this case the Jacobian is the partial derivative of the function with respect
to the parameters a, b and c.  These derivatives are computed as follows:";;0;;;27;22;27;3;26;1;25;7;8829;2;"jacobian";"org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.jacobian";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
50;146;12140;0;;"javaclass";42;42;146;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[3]";0;0;8;2;"Fraction";"d";2;2;;"f";-100000;"9.3 Fraction Formatting and Parsing";"9.3 Fraction Formatting and Parsing";;0;27;13;27;13;27;1;26;2;25;7;12140;2;"Fraction";"org.apache.commons.math3.fraction.Fraction";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
351;147;20129;0;;"javamethod";324;324;147;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[5]/p[1]/tt[7]";0;0;8;2;"randomData.nextSample(c, k)";"d";5;5;;"f";100;"RandomData instance randomData.nextSample(c, k)";"To select a random sample of objects in a collection, you can use the
    nextSample method in the RandomData interface.
    Specifically,  if c is a collection containing at least 
    k objects, and randomData is a 
    RandomData instance randomData.nextSample(c, k)
    will return an object[] array of length k
    consisting of elements randomly selected from the collection.  If 
    c contains duplicate references, there may be duplicate
    references in the returned array; otherwise returned elements will be
    unique -- i.e., the sampling is without replacement among the object
    references in the collection.";145;0;;;27;23;27;2;26;4;25;7;20129;2;"nextSample";"org.apache.commons.math3.random.RandomData.nextSample";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
51;150;8844;0;;"javaclass";43;43;150;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/dl/dd/p[4]/tt[1]";0;0;8;2;"MultivariateMatrixFunction";"d";2;2;;"f";99;"The implementation of the MultivariateMatrixFunction jacobian() for this problem looks like this (The x";"The implementation of the MultivariateMatrixFunction jacobian() for this problem looks like this (The x
parameter is an ArrayList containing the independent values of the data set):";;0;;;27;22;27;3;26;1;25;7;8844;2;"MultivariateMatrixFunction";"org.apache.commons.math3.analysis.MultivariateMatrixFunction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
350;152;8829;0;;"javamethod";323;323;152;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/dl/dd/p[4]/tt[1]";0;0;8;2;"jacobian()";"d";5;5;;"f";99;"The implementation of the MultivariateMatrixFunction jacobian() for this problem looks like this (The x";"The implementation of the MultivariateMatrixFunction jacobian() for this problem looks like this (The x
parameter is an ArrayList containing the independent values of the data set):";;0;;;27;22;27;3;26;1;25;7;8829;2;"jacobian";"org.apache.commons.math3.analysis.DifferentiableMultivariateVectorFunction.jacobian";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
352;155;8847;0;;"javamethod";325;325;155;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/dl/dd/p[6]/tt[1]";0;0;8;2;"value(double[] point)";"d";5;5;;"f";102;"The implementation of the double[] value(double[] point) method, which returns";"The implementation of the double[] value(double[] point) method, which returns
 a double array containing the
values the objective function returns per given independent value
and the current set of variables or parameters,
can be seen below:";;0;;;27;22;27;3;26;1;25;7;8847;2;"value";"org.apache.commons.math3.analysis.MultivariateMatrixFunction.value";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
485;157;11662;0;;"javageneric";416;416;157;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[5]/p[2]/tt[1]";0;0;8;2;"randomData";"d";2;30;;"f";104;"If randomData is a RandomData instance, and";"If randomData is a RandomData instance, and 
    n and k are integers with 
     k <= n,  then 
    randomData.nextPermutation(n, k) returns an int[]
    array of length k whose whose entries are selected randomly, 
    without repetition, from the integers 0 through
    n-1 (inclusive), i.e., 
    randomData.nextPermutation(n, k) returns a random
    permutation of  n taken k at a time.";;0;;;27;23;27;2;26;4;25;7;11662;2;"randomData";"org.apache.commons.math3.distribution.AbstractRealDistribution.randomData";8;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
52;159;20071;0;;"javaclass";44;44;159;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[5]/p[2]/tt[2]";0;0;8;2;"RandomData";"d";2;2;;"f";105;"If randomData is a RandomData instance, and";"If randomData is a RandomData instance, and 
    n and k are integers with 
     k <= n,  then 
    randomData.nextPermutation(n, k) returns an int[]
    array of length k whose whose entries are selected randomly, 
    without repetition, from the integers 0 through
    n-1 (inclusive), i.e., 
    randomData.nextPermutation(n, k) returns a random
    permutation of  n taken k at a time.";;0;;;27;23;27;2;26;4;25;7;20071;2;"RandomData";"org.apache.commons.math3.random.RandomData";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
53;160;19398;0;"heuristic_depth";"javapostclass";45;45;160;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/p[6]/a[1]";0;0;8;2;"NonLinearConjugateGradientOptimizer";"d";2;2;;"f";104;"NonLinearConjugateGradientOptimizer class provides a non-linear conjugate gradient algorithm";"In addition to least squares solving, the 
          NonLinearConjugateGradientOptimizer class provides a non-linear conjugate gradient algorithm
          to optimize 
          DifferentiableMultivariateFunction. Both the Fletcher-Reeves and the Polak-Ribière
          search direction update methods are supported. It is also possible to set up a preconditioner
          or to change the line-search algorithm of the inner loop if desired (the default one is a Brent
          solver).";;0;;;27;22;27;3;26;1;25;7;19398;2;"NonLinearConjugateGradientOptimizer";"org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizer";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
55;162;8850;0;;"javaclass";46;46;162;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/p[6]/a[2]";0;0;8;2;"DifferentiableMultivariateFunction";"d";2;2;;"f";105;"DifferentiableMultivariateFunction.";"In addition to least squares solving, the 
          NonLinearConjugateGradientOptimizer class provides a non-linear conjugate gradient algorithm
          to optimize 
          DifferentiableMultivariateFunction. Both the Fletcher-Reeves and the Polak-Ribière
          search direction update methods are supported. It is also possible to set up a preconditioner
          or to change the line-search algorithm of the inner loop if desired (the default one is a Brent
          solver).";;0;;;27;22;27;3;26;1;25;7;8850;2;"DifferentiableMultivariateFunction";"org.apache.commons.math3.analysis.DifferentiableMultivariateFunction";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
353;164;20106;0;;"javamethod";326;326;164;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[5]/p[2]/tt[6]";0;0;8;2;"randomData.nextPermutation(n, k)";"d";5;5;;"f";109;"randomData.nextPermutation(n, k) returns an int[]";"If randomData is a RandomData instance, and 
    n and k are integers with 
     k <= n,  then 
    randomData.nextPermutation(n, k) returns an int[]
    array of length k whose whose entries are selected randomly, 
    without repetition, from the integers 0 through
    n-1 (inclusive), i.e., 
    randomData.nextPermutation(n, k) returns a random
    permutation of  n taken k at a time.";163;0;;;27;23;27;2;26;4;25;7;20106;2;"nextPermutation";"org.apache.commons.math3.random.RandomData.nextPermutation";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
56;165;18986;0;"heuristic_depth";"javapostclass";47;47;165;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[5]/p[7]/a";0;0;8;2;"PowellOptimizer";"d";2;2;;"f";106;"PowellOptimizer provides an optimization method for non-differentiable functions.";"The 
          PowellOptimizer provides an optimization method for non-differentiable functions.";;0;;;27;22;27;3;26;1;25;7;18986;2;"PowellOptimizer";"org.apache.commons.math3.optimization.direct.PowellOptimizer";2;"t";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
58;168;12070;0;"heuristic_depth";"javapostclass";48;48;168;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[6]/p[3]/a[1]";0;0;8;2;"CurveFitter";"d";2;2;;"f";109;"CurveFitter class provides curve fitting for general curves.";"The 
          CurveFitter class provides curve fitting for general curves. Users must
          provide their own implementation of the curve template as a class implementing
          the 
          ParametricUnivariateFunction interface and they must provide the initial guess of the
          parameters.";;0;;;27;25;27;3;26;1;25;7;12070;2;"CurveFitter";"org.apache.commons.math3.fitting.CurveFitter";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
60;170;8871;0;;"javaclass";49;49;170;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[6]/p[3]/a[2]";0;0;8;2;"ParametricUnivariateFunction";"d";2;2;;"f";110;"ParametricUnivariateFunction interface and they must provide the initial guess of the";"The 
          CurveFitter class provides curve fitting for general curves. Users must
          provide their own implementation of the curve template as a class implementing
          the 
          ParametricUnivariateFunction interface and they must provide the initial guess of the
          parameters.";;0;;;27;25;27;3;26;1;25;7;8871;2;"ParametricUnivariateFunction";"org.apache.commons.math3.analysis.ParametricUnivariateFunction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
61;172;12012;0;"heuristic_depth";"javapostclass";50;50;172;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[6]/p[5]/a";0;0;8;2;"HarmonicFitter";"d";2;2;;"f";111;"HarmonicFitter classes requires neither an implementation of the parametric real function";"The more specialized 
          HarmonicFitter classes requires neither an implementation of the parametric real function
          nor an initial guess as it is are able to compute them internally.";;0;;;27;25;27;3;26;1;25;7;12012;2;"HarmonicFitter";"org.apache.commons.math3.fitting.HarmonicFitter";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
356;175;20106;0;;"javamethod";329;329;175;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[5]/p[2]/tt[11]";0;0;8;2;"randomData.nextPermutation(n, k)";"d";5;5;;"f";114;"randomData.nextPermutation(n, k) returns a random";"If randomData is a RandomData instance, and 
    n and k are integers with 
     k <= n,  then 
    randomData.nextPermutation(n, k) returns an int[]
    array of length k whose whose entries are selected randomly, 
    without repetition, from the integers 0 through
    n-1 (inclusive), i.e., 
    randomData.nextPermutation(n, k) returns a random
    permutation of  n taken k at a time.";173;0;;;27;23;27;2;26;4;25;7;20106;2;"nextPermutation";"org.apache.commons.math3.random.RandomData.nextPermutation";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
63;178;19913;0;;"javaclass";51;51;178;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[6]/p/tt";0;0;8;2;"ValueServer";"d";2;2;;"f";118;"Using the ValueServer class, you can generate data based on";"Using the ValueServer class, you can generate data based on
    the values in an input file in one of two ways:";;0;;;27;26;27;2;26;4;25;7;19913;2;"ValueServer";"org.apache.commons.math3.random.ValueServer";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
64;181;12612;0;;"javaclass";52;52;181;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[1]";0;0;8;2;"GeneticAlgorithm";"d";2;2;;"f";55;"GeneticAlgorithm provides an execution framework for Genetic Algorithms (GA).";"GeneticAlgorithm provides an execution framework for Genetic Algorithms (GA).  
      
      Populations, consisting of 
      Chromosomes are evolved by the GeneticAlgorithm until a 
      
      StoppingCondition is reached. Evolution is determined by 
      SelectionPolicy, 
      MutationPolicy and 
      Fitness.";;0;;;27;32;27;30;26;5;25;7;12612;2;"GeneticAlgorithm";"org.apache.commons.math3.genetics.GeneticAlgorithm";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
357;186;19980;0;;"javamethod";330;330;186;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[6]/dl/dd[2]/tt[1]";0;0;8;2;"getNext()";"d";5;5;;"f";122;"has been estimated, getNext() returns random values whose";"When used in Digest Mode, the ValueServer reads the entire input file
      and estimates a probability density function based on data from the file.
      The estimation method is essentially the 
      
      Variable Kernel Method with Gaussian smoothing.  Once the density
      has been estimated, getNext() returns random values whose
      probability distribution matches the empirical distribution -- i.e., if
      you generate a large number of such values, their distribution should
      ""look like"" the distribution of the values in the input file.  The values
      are not stored in memory in this case either, so there is no limit to the
      size of the input file.  Here is an example:
      
      ValueServer vs = new ValueServer();
      vs.setValuesFileURL(url); 
      vs.setMode(ValueServer.DIGEST_MODE);
      vs.computeDistribution(500); //Read file and estimate distribution using 500 bins
      double value = vs.getNext();
      // ...Generate and use more values...
      
      See the javadoc for ValueServer and 
      EmpiricalDistribution for more details.  Note that 
      computeDistribution() opens and closes the input file
       by itself.";;0;;;27;26;27;2;26;4;25;7;19980;2;"getNext";"org.apache.commons.math3.random.ValueServer.getNext";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
65;187;12612;0;;"javaclass";53;53;187;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/p[1]/tt";0;0;8;2;"GeneticAlgorithm";"d";2;2;;"f";58;"Chromosomes are evolved by the GeneticAlgorithm until a";"GeneticAlgorithm provides an execution framework for Genetic Algorithms (GA).  
      
      Populations, consisting of 
      Chromosomes are evolved by the GeneticAlgorithm until a 
      
      StoppingCondition is reached. Evolution is determined by 
      SelectionPolicy, 
      MutationPolicy and 
      Fitness.";;0;;;27;32;27;30;26;5;25;7;12612;2;"GeneticAlgorithm";"org.apache.commons.math3.genetics.GeneticAlgorithm";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
66;188;19913;0;;"javaclass";54;54;188;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[6]/dl/dd[2]/tt[2]";0;0;8;2;"ValueServer";"d";2;2;;"f";123;"ValueServer vs = new ValueServer();";"When used in Digest Mode, the ValueServer reads the entire input file
      and estimates a probability density function based on data from the file.
      The estimation method is essentially the 
      
      Variable Kernel Method with Gaussian smoothing.  Once the density
      has been estimated, getNext() returns random values whose
      probability distribution matches the empirical distribution -- i.e., if
      you generate a large number of such values, their distribution should
      ""look like"" the distribution of the values in the input file.  The values
      are not stored in memory in this case either, so there is no limit to the
      size of the input file.  Here is an example:
      
      ValueServer vs = new ValueServer();
      vs.setValuesFileURL(url); 
      vs.setMode(ValueServer.DIGEST_MODE);
      vs.computeDistribution(500); //Read file and estimate distribution using 500 bins
      double value = vs.getNext();
      // ...Generate and use more values...
      
      See the javadoc for ValueServer and 
      EmpiricalDistribution for more details.  Note that 
      computeDistribution() opens and closes the input file
       by itself.";;0;;;27;26;27;2;26;4;25;7;19913;2;"ValueServer";"org.apache.commons.math3.random.ValueServer";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
67;189;12613;0;;"javaclass";55;55;189;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[4]";0;0;8;2;"StoppingCondition";"d";2;2;;"f";59;"StoppingCondition is reached.";"GeneticAlgorithm provides an execution framework for Genetic Algorithms (GA).  
      
      Populations, consisting of 
      Chromosomes are evolved by the GeneticAlgorithm until a 
      
      StoppingCondition is reached. Evolution is determined by 
      SelectionPolicy, 
      MutationPolicy and 
      Fitness.";;0;;;27;32;27;30;26;5;25;7;12613;2;"StoppingCondition";"org.apache.commons.math3.genetics.StoppingCondition";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
68;190;20076;0;;"javaclass";56;56;190;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[6]/dl/dd[2]/tt[3]";0;0;8;2;"EmpiricalDistribution";"d";2;2;;"f";124;"EmpiricalDistribution for more details.";"When used in Digest Mode, the ValueServer reads the entire input file
      and estimates a probability density function based on data from the file.
      The estimation method is essentially the 
      
      Variable Kernel Method with Gaussian smoothing.  Once the density
      has been estimated, getNext() returns random values whose
      probability distribution matches the empirical distribution -- i.e., if
      you generate a large number of such values, their distribution should
      ""look like"" the distribution of the values in the input file.  The values
      are not stored in memory in this case either, so there is no limit to the
      size of the input file.  Here is an example:
      
      ValueServer vs = new ValueServer();
      vs.setValuesFileURL(url); 
      vs.setMode(ValueServer.DIGEST_MODE);
      vs.computeDistribution(500); //Read file and estimate distribution using 500 bins
      double value = vs.getNext();
      // ...Generate and use more values...
      
      See the javadoc for ValueServer and 
      EmpiricalDistribution for more details.  Note that 
      computeDistribution() opens and closes the input file
       by itself.";;0;;;27;26;27;2;26;4;25;7;20076;2;"EmpiricalDistribution";"org.apache.commons.math3.random.EmpiricalDistribution";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
69;191;12594;0;;"javaclass";57;57;191;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[5]";0;0;8;2;"SelectionPolicy";"d";2;2;;"f";60;"SelectionPolicy,";"GeneticAlgorithm provides an execution framework for Genetic Algorithms (GA).  
      
      Populations, consisting of 
      Chromosomes are evolved by the GeneticAlgorithm until a 
      
      StoppingCondition is reached. Evolution is determined by 
      SelectionPolicy, 
      MutationPolicy and 
      Fitness.";;0;;;27;32;27;30;26;5;25;7;12594;2;"SelectionPolicy";"org.apache.commons.math3.genetics.SelectionPolicy";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
70;193;12777;0;;"javaclass";58;58;193;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[6]";0;0;8;2;"MutationPolicy";"d";2;2;;"f";61;"MutationPolicy and";"GeneticAlgorithm provides an execution framework for Genetic Algorithms (GA).  
      
      Populations, consisting of 
      Chromosomes are evolved by the GeneticAlgorithm until a 
      
      StoppingCondition is reached. Evolution is determined by 
      SelectionPolicy, 
      MutationPolicy and 
      Fitness.";;0;;;27;32;27;30;26;5;25;7;12777;2;"MutationPolicy";"org.apache.commons.math3.genetics.MutationPolicy";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
378;195;12810;0;;"javageneric";345;345;195;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[7]";0;0;8;2;"Fitness";"d";30;30;;"f";62;"Fitness.";"GeneticAlgorithm provides an execution framework for Genetic Algorithms (GA).  
      
      Populations, consisting of 
      Chromosomes are evolved by the GeneticAlgorithm until a 
      
      StoppingCondition is reached. Evolution is determined by 
      SelectionPolicy, 
      MutationPolicy and 
      Fitness.";;0;;;27;32;27;30;26;5;25;7;12810;2;"Fitness";"org.apache.commons.math3.genetics.Fitness";2;"f";"t";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
71;196;19859;0;;"javaclass";59;59;196;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/p[1]/a[1]";0;0;8;2;"RandomGenerator";"d";2;2;;"f";128;"RandomGenerator interface abstracts the public interface of";"To enable alternative PRNGs to be ""plugged in"" to the commons-math data
      generation utilities and to provide a generic means to replace 
      java.util.Random in applications, a random generator 
      adaptor framework has been added to commons-math.  The
      
      RandomGenerator interface abstracts the public interface of
      java.util.Random and any implementation of this
      interface can be used as the source of random data for the commons-math 
      data generation classes.  An abstract base class, 
      
      AbstractRandomGenerator is provided to make implementation easier.
      This class provides default implementations of ""derived"" data generation
      methods based on the primitive,  nextDouble().
      To support generic replacement of java.util.Random, the 
      
      RandomAdaptor class is provided, which extends
      java.util.Random and wraps and delegates calls to
      a RandomGenerator instance.";;0;;;27;28;27;2;26;4;25;7;19859;2;"RandomGenerator";"org.apache.commons.math3.random.RandomGenerator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
421;197;12632;0;;"javageneric";384;384;197;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/p[2]/tt[1]";0;0;8;2;"evolve";"d";30;30;;"f";63;"The GA itself is implemented by the evolve method of the";"The GA itself is implemented by the evolve method of the
      GeneticAlgorithm class,
      which looks like this:";;0;;;27;32;27;30;26;5;25;7;12632;2;"evolve";"org.apache.commons.math3.genetics.GeneticAlgorithm.evolve";5;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
72;199;19730;0;;"javaclass";60;60;199;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/p[1]/a[2]";0;0;8;2;"AbstractRandomGenerator";"d";2;2;;"f";130;"AbstractRandomGenerator is provided to make implementation easier.";"To enable alternative PRNGs to be ""plugged in"" to the commons-math data
      generation utilities and to provide a generic means to replace 
      java.util.Random in applications, a random generator 
      adaptor framework has been added to commons-math.  The
      
      RandomGenerator interface abstracts the public interface of
      java.util.Random and any implementation of this
      interface can be used as the source of random data for the commons-math 
      data generation classes.  An abstract base class, 
      
      AbstractRandomGenerator is provided to make implementation easier.
      This class provides default implementations of ""derived"" data generation
      methods based on the primitive,  nextDouble().
      To support generic replacement of java.util.Random, the 
      
      RandomAdaptor class is provided, which extends
      java.util.Random and wraps and delegates calls to
      a RandomGenerator instance.";;0;;;27;28;27;2;26;4;25;7;19730;2;"AbstractRandomGenerator";"org.apache.commons.math3.random.AbstractRandomGenerator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
73;200;12612;0;;"javaclass";61;61;200;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/p[2]/tt[2]";0;0;8;2;"GeneticAlgorithm";"d";2;2;;"f";64;"GeneticAlgorithm class,";"The GA itself is implemented by the evolve method of the
      GeneticAlgorithm class,
      which looks like this:";;0;;;27;32;27;30;26;5;25;7;12612;2;"GeneticAlgorithm";"org.apache.commons.math3.genetics.GeneticAlgorithm";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
422;201;12667;0;;"javageneric";385;385;201;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/tt";0;0;8;2;"nextGeneration";"d";2;30;;"f";65;"The nextGeneration method implements the following algorithm:";"14.2 GA Framework
      
      
      GeneticAlgorithm provides an execution framework for Genetic Algorithms (GA).  
      
      Populations, consisting of 
      Chromosomes are evolved by the GeneticAlgorithm until a 
      
      StoppingCondition is reached. Evolution is determined by 
      SelectionPolicy, 
      MutationPolicy and 
      Fitness.
      
      
      The GA itself is implemented by the evolve method of the
      GeneticAlgorithm class,
      which looks like this:
      public Population evolve(Population initial, StoppingCondition condition) {
    Population current = initial;
    while (!condition.isSatisfied(current)) {
        current = nextGeneration(current);
    }
    return current;
}
          
          The nextGeneration method implements the following algorithm:
          Get nextGeneration population to fill from current
             generation, using its nextGeneration method
          Loop until new generation is filled:
          Apply configured SelectionPolicy to select a pair of parents
                 from current
             With probability = 
                 
                 getCrossoverRate(), apply configured CrossoverPolicy to parents
             With probability = 
                 
                 getMutationRate(),
                 apply configured MutationPolicy to each of the offspring
             Add offspring individually to nextGeneration,
                 space permitting
          Return nextGeneration";;0;;;27;32;27;30;26;5;25;7;12667;2;"nextGeneration";"org.apache.commons.math3.genetics.GeneticAlgorithm.nextGeneration";5;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
74;205;12594;0;;"javaclass";62;62;205;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/ul/li[1]/tt[1]";0;0;8;2;"SelectionPolicy";"d";2;2;;"f";67;"Apply configured SelectionPolicy to select a pair of parents";"Apply configured SelectionPolicy to select a pair of parents
                 from current";;0;;;27;32;27;30;26;5;25;7;12594;2;"SelectionPolicy";"org.apache.commons.math3.genetics.SelectionPolicy";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
75;206;19768;0;;"javaclass";63;63;206;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/p[1]/a[3]";0;0;8;2;"RandomAdaptor";"d";2;2;;"f";133;"RandomAdaptor class is provided, which extends";"To enable alternative PRNGs to be ""plugged in"" to the commons-math data
      generation utilities and to provide a generic means to replace 
      java.util.Random in applications, a random generator 
      adaptor framework has been added to commons-math.  The
      
      RandomGenerator interface abstracts the public interface of
      java.util.Random and any implementation of this
      interface can be used as the source of random data for the commons-math 
      data generation classes.  An abstract base class, 
      
      AbstractRandomGenerator is provided to make implementation easier.
      This class provides default implementations of ""derived"" data generation
      methods based on the primitive,  nextDouble().
      To support generic replacement of java.util.Random, the 
      
      RandomAdaptor class is provided, which extends
      java.util.Random and wraps and delegates calls to
      a RandomGenerator instance.";;0;;;27;28;27;2;26;4;25;7;19768;2;"RandomAdaptor";"org.apache.commons.math3.random.RandomAdaptor";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
76;209;19859;0;;"javaclass";64;64;209;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/p[1]/tt[6]";0;0;8;2;"RandomGenerator";"d";2;2;;"f";135;"a RandomGenerator instance.";"To enable alternative PRNGs to be ""plugged in"" to the commons-math data
      generation utilities and to provide a generic means to replace 
      java.util.Random in applications, a random generator 
      adaptor framework has been added to commons-math.  The
      
      RandomGenerator interface abstracts the public interface of
      java.util.Random and any implementation of this
      interface can be used as the source of random data for the commons-math 
      data generation classes.  An abstract base class, 
      
      AbstractRandomGenerator is provided to make implementation easier.
      This class provides default implementations of ""derived"" data generation
      methods based on the primitive,  nextDouble().
      To support generic replacement of java.util.Random, the 
      
      RandomAdaptor class is provided, which extends
      java.util.Random and wraps and delegates calls to
      a RandomGenerator instance.";;0;;;27;28;27;2;26;4;25;7;19859;2;"RandomGenerator";"org.apache.commons.math3.random.RandomGenerator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
317;210;12646;0;;"javamethod";294;294;210;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/ul/li[2]/a";0;0;8;2;"getCrossoverRate()";"d";5;5;;"f";69;"getCrossoverRate(), apply configured CrossoverPolicy to parents";"With probability = 
                 
                 getCrossoverRate(), apply configured CrossoverPolicy to parents";;0;;;27;32;27;30;26;5;25;7;12646;2;"getCrossoverRate";"org.apache.commons.math3.genetics.GeneticAlgorithm.getCrossoverRate";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
77;211;19859;0;;"javaclass";65;65;211;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/p[2]/a";0;0;8;2;"RandomGenerator";"d";2;2;;"f";136;"RandomGenerator interface:";"Commons-math provides by itself several implementations of the 
      RandomGenerator interface:";;0;;;27;28;27;2;26;4;25;7;19859;2;"RandomGenerator";"org.apache.commons.math3.random.RandomGenerator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
78;212;12657;0;;"javaclass";66;66;212;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/ul/li[2]/tt";0;0;8;2;"CrossoverPolicy";"d";2;2;;"f";70;"getCrossoverRate(), apply configured CrossoverPolicy to parents";"With probability = 
                 
                 getCrossoverRate(), apply configured CrossoverPolicy to parents";;0;;;27;32;27;30;26;5;25;7;12657;2;"CrossoverPolicy";"org.apache.commons.math3.genetics.CrossoverPolicy";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
79;213;20194;0;;"javaclass";67;67;213;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/ul/li[1]/a";0;0;8;2;"JDKRandomGenerator";"d";2;2;;"f";137;"JDKRandomGenerator";"JDKRandomGenerator
            that extends the JDK provided generator";;0;;;27;28;27;2;26;4;25;7;20194;2;"JDKRandomGenerator";"org.apache.commons.math3.random.JDKRandomGenerator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
319;214;12656;0;;"javamethod";296;296;214;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/ul/li[3]/a";0;0;8;2;"getMutationRate()";"d";5;5;;"f";71;"getMutationRate(),";"With probability = 
                 
                 getMutationRate(),
                 apply configured MutationPolicy to each of the offspring";;0;;;27;32;27;30;26;5;25;7;12656;2;"getMutationRate";"org.apache.commons.math3.genetics.GeneticAlgorithm.getMutationRate";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
80;215;19730;0;;"javaclass";68;68;215;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/ul/li[2]/a";0;0;8;2;"AbstractRandomGenerator";"d";2;2;;"f";138;"AbstractRandomGenerator as a helper for users generators";"AbstractRandomGenerator as a helper for users generators";;0;;;27;28;27;2;26;4;25;7;19730;2;"AbstractRandomGenerator";"org.apache.commons.math3.random.AbstractRandomGenerator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
81;216;12777;0;;"javaclass";69;69;216;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[2]/ul/li[3]/tt";0;0;8;2;"MutationPolicy";"d";2;2;;"f";72;"apply configured MutationPolicy to each of the offspring";"With probability = 
                 
                 getMutationRate(),
                 apply configured MutationPolicy to each of the offspring";;0;;;27;32;27;30;26;5;25;7;12777;2;"MutationPolicy";"org.apache.commons.math3.genetics.MutationPolicy";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
82;218;12612;0;;"javaclass";70;70;218;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[3]/tt[1]";0;0;8;2;"GeneticAlgorithm";"d";2;2;;"f";74;"GeneticAlgorithm ga = new GeneticAlgorithm(";"14.3 Implementation
      
      Here is an example GA execution:
      
// initialize a new genetic algorithm
GeneticAlgorithm ga = new GeneticAlgorithm(
    new OnePointCrossover<Integer>(),
    1,
    new RandomKeyMutation(),
    0.10,
    new TournamentSelection(TOURNAMENT_ARITY)
);
        
// initial population
Population initial = getInitialPopulation();
        
// stopping condition
StoppingCondition stopCond = new FixedGenerationCount(NUM_GENERATIONS);
        
// run the algorithm
Population finalPopulation = ga.evolve(initial, stopCond);
        
// best chromosome from the final population
Chromosome bestFinal = finalPopulation.getFittestChromosome();
        
        The arguments to the GeneticAlgorithm constructor above are: Parametervalue in examplemeaningcrossoverPolicy
        OnePointCrossover
        A random crossover point is selected and the first part from each parent is copied to the corresponding
        child, and the second parts are copied crosswise.crossoverRate
        1
        Always apply crossovermutationPolicy
        RandomKeyMutation
        Changes a randomly chosen element of the array representation to a random value uniformly distributed in [0,1].mutationRate
        .1
        Apply mutation with probability 0.1 - that is, 10% of the time.selectionPolicy
        TournamentSelection
        Each of the two selected chromosomes is selected based on an n-ary tournament -- this is done by drawing
        n random chromosomes without replacement from the population, and then selecting the fittest chromosome among them.
        The algorithm starts with an initial population of Chromosomes. and executes until 
        the specified StoppingCondition
        is reached.  In the example above, a
        FixedGenerationCount
        stopping condition is used, which means the algorithm proceeds through a fixed number of generations.";;0;;;27;33;27;30;26;5;25;7;12612;2;"GeneticAlgorithm";"org.apache.commons.math3.genetics.GeneticAlgorithm";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
83;219;20072;0;;"javaclass";71;71;219;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/ul/li[3]/ul/li[1]/a";0;0;8;2;"MersenneTwister";"d";2;2;;"f";140;"MersenneTwister";"MersenneTwister";;0;;;27;28;27;2;26;4;25;7;20072;2;"MersenneTwister";"org.apache.commons.math3.random.MersenneTwister";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
84;221;12830;0;;"javaclass";72;72;221;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[3]/table/tr[2]/td[2]/a";0;0;8;2;"OnePointCrossover";"d";2;2;;"f";75;"OnePointCrossover";"OnePointCrossover";;0;;;27;33;27;30;26;5;25;7;12830;2;"OnePointCrossover";"org.apache.commons.math3.genetics.OnePointCrossover";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
379;223;20149;0;;"javageneric";346;346;223;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/ul/li[3]/ul/li[2]/a";0;0;8;2;"Well512a";"d";30;30;;"f";141;"Well512a";"Well512a";;0;;;27;28;27;2;26;4;25;7;20149;2;"Well512a";"org.apache.commons.math3.random.Well512a";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
85;224;12715;0;;"javaclass";73;73;224;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[3]/table/tr[4]/td[2]/a";0;0;8;2;"RandomKeyMutation";"d";2;2;;"f";76;"RandomKeyMutation";"RandomKeyMutation";;0;;;27;33;27;30;26;5;25;7;12715;2;"RandomKeyMutation";"org.apache.commons.math3.genetics.RandomKeyMutation";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
380;225;20197;0;;"javageneric";347;347;225;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/ul/li[3]/ul/li[3]/a";0;0;8;2;"Well1024a";"d";30;30;;"f";142;"Well1024a";"Well1024a";;0;;;27;28;27;2;26;4;25;7;20197;2;"Well1024a";"org.apache.commons.math3.random.Well1024a";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
86;226;12735;0;;"javaclass";74;74;226;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[3]/table/tr[6]/td[2]/a";0;0;8;2;"TournamentSelection";"d";2;2;;"f";77;"TournamentSelection";"TournamentSelection";;0;;;27;33;27;30;26;5;25;7;12735;2;"TournamentSelection";"org.apache.commons.math3.genetics.TournamentSelection";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
381;228;20225;0;;"javageneric";348;348;228;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/ul/li[3]/ul/li[4]/a";0;0;8;2;"Well19937a";"d";30;30;;"f";143;"Well19937a";"Well19937a";;0;;;27;28;27;2;26;4;25;7;20225;2;"Well19937a";"org.apache.commons.math3.random.Well19937a";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
382;230;19897;0;;"javageneric";349;349;230;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/ul/li[3]/ul/li[5]/a";0;0;8;2;"Well19937c";"d";30;30;;"f";144;"Well19937c";"Well19937c";;0;;;27;28;27;2;26;4;25;7;19897;2;"Well19937c";"org.apache.commons.math3.random.Well19937c";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
87;232;20334;0;;"javaclass";75;75;232;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[2]";0;0;8;2;"Erf";"d";2;2;;"f";-100000;"5.2 Erf functions";"5.2 Erf functions";;0;27;10;27;10;27;4;26;3;25;7;20334;2;"Erf";"org.apache.commons.math3.special.Erf";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
383;233;20054;0;;"javageneric";350;350;233;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/ul/li[3]/ul/li[6]/a";0;0;8;2;"Well44497a";"d";30;30;;"f";145;"Well44497a";"Well44497a";;0;;;27;28;27;2;26;4;25;7;20054;2;"Well44497a";"org.apache.commons.math3.random.Well44497a";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
88;234;20275;0;;"javaclass";76;76;234;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]";0;0;8;2;"Gamma";"d";2;2;;"f";-100000;"5.3 Gamma functions";"5.3 Gamma functions";;0;27;14;27;14;27;4;26;3;25;7;20275;2;"Gamma";"org.apache.commons.math3.special.Gamma";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
89;235;12613;0;;"javaclass";77;77;235;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[3]/a[1]";0;0;8;2;"StoppingCondition";"d";2;2;;"f";80;"the specified StoppingCondition";"14.3 Implementation
      
      Here is an example GA execution:
      
// initialize a new genetic algorithm
GeneticAlgorithm ga = new GeneticAlgorithm(
    new OnePointCrossover<Integer>(),
    1,
    new RandomKeyMutation(),
    0.10,
    new TournamentSelection(TOURNAMENT_ARITY)
);
        
// initial population
Population initial = getInitialPopulation();
        
// stopping condition
StoppingCondition stopCond = new FixedGenerationCount(NUM_GENERATIONS);
        
// run the algorithm
Population finalPopulation = ga.evolve(initial, stopCond);
        
// best chromosome from the final population
Chromosome bestFinal = finalPopulation.getFittestChromosome();
        
        The arguments to the GeneticAlgorithm constructor above are: Parametervalue in examplemeaningcrossoverPolicy
        OnePointCrossover
        A random crossover point is selected and the first part from each parent is copied to the corresponding
        child, and the second parts are copied crosswise.crossoverRate
        1
        Always apply crossovermutationPolicy
        RandomKeyMutation
        Changes a randomly chosen element of the array representation to a random value uniformly distributed in [0,1].mutationRate
        .1
        Apply mutation with probability 0.1 - that is, 10% of the time.selectionPolicy
        TournamentSelection
        Each of the two selected chromosomes is selected based on an n-ary tournament -- this is done by drawing
        n random chromosomes without replacement from the population, and then selecting the fittest chromosome among them.
        The algorithm starts with an initial population of Chromosomes. and executes until 
        the specified StoppingCondition
        is reached.  In the example above, a
        FixedGenerationCount
        stopping condition is used, which means the algorithm proceeds through a fixed number of generations.";;0;;;27;33;27;30;26;5;25;7;12613;2;"StoppingCondition";"org.apache.commons.math3.genetics.StoppingCondition";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
384;236;19731;0;;"javageneric";351;351;236;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/ul/li[3]/ul/li[7]/a";0;0;8;2;"Well44497b";"d";30;30;;"f";146;"Well44497b";"Well44497b";;0;;;27;28;27;2;26;4;25;7;19731;2;"Well44497b";"org.apache.commons.math3.random.Well44497b";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
90;237;20275;0;;"javaclass";78;78;237;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]/div[2]";0;0;8;2;"Gamma";"d";2;2;;"f";-100000;"Log Gamma";"Log Gamma";;0;27;19;27;19;27;4;26;3;25;7;20275;2;"Gamma";"org.apache.commons.math3.special.Gamma";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
91;238;12636;0;;"javaclass";79;79;238;;"math/doc/manual3.1/math/userguide/genetics.html";"/html/body/div[4]/div/div/div[3]/a[2]";0;0;8;2;"FixedGenerationCount";"d";2;2;;"f";81;"FixedGenerationCount";"14.3 Implementation
      
      Here is an example GA execution:
      
// initialize a new genetic algorithm
GeneticAlgorithm ga = new GeneticAlgorithm(
    new OnePointCrossover<Integer>(),
    1,
    new RandomKeyMutation(),
    0.10,
    new TournamentSelection(TOURNAMENT_ARITY)
);
        
// initial population
Population initial = getInitialPopulation();
        
// stopping condition
StoppingCondition stopCond = new FixedGenerationCount(NUM_GENERATIONS);
        
// run the algorithm
Population finalPopulation = ga.evolve(initial, stopCond);
        
// best chromosome from the final population
Chromosome bestFinal = finalPopulation.getFittestChromosome();
        
        The arguments to the GeneticAlgorithm constructor above are: Parametervalue in examplemeaningcrossoverPolicy
        OnePointCrossover
        A random crossover point is selected and the first part from each parent is copied to the corresponding
        child, and the second parts are copied crosswise.crossoverRate
        1
        Always apply crossovermutationPolicy
        RandomKeyMutation
        Changes a randomly chosen element of the array representation to a random value uniformly distributed in [0,1].mutationRate
        .1
        Apply mutation with probability 0.1 - that is, 10% of the time.selectionPolicy
        TournamentSelection
        Each of the two selected chromosomes is selected based on an n-ary tournament -- this is done by drawing
        n random chromosomes without replacement from the population, and then selecting the fittest chromosome among them.
        The algorithm starts with an initial population of Chromosomes. and executes until 
        the specified StoppingCondition
        is reached.  In the example above, a
        FixedGenerationCount
        stopping condition is used, which means the algorithm proceeds through a fixed number of generations.";;0;;;27;33;27;30;26;5;25;7;12636;2;"FixedGenerationCount";"org.apache.commons.math3.genetics.FixedGenerationCount";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
92;239;20072;0;;"javaclass";80;80;239;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/table/tr[3]/td[1]/a";0;0;8;2;"MersenneTwister";"d";2;2;;"f";150;"MersenneTwister";"MersenneTwister";;0;;;27;28;27;2;26;4;25;7;20072;2;"MersenneTwister";"org.apache.commons.math3.random.MersenneTwister";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
93;240;20275;0;;"javaclass";81;81;240;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[3]/div[3]";0;0;8;2;"Gamma";"d";2;2;;"f";-100000;"Regularized Gamma";"Regularized Gamma";;0;27;21;27;21;27;4;26;3;25;7;20275;2;"Gamma";"org.apache.commons.math3.special.Gamma";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
94;241;20277;0;;"javaclass";82;82;241;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[4]";0;0;8;2;"Beta";"d";2;2;;"f";-100000;"5.4 Beta functions";"5.4 Beta functions";;0;27;24;27;24;27;4;26;3;25;7;20277;2;"Beta";"org.apache.commons.math3.special.Beta";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
95;242;20194;0;;"javaclass";83;83;242;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/table/tr[4]/td[1]/a";0;0;8;2;"JDKRandomGenerator";"d";2;2;;"f";151;"JDKRandomGenerator";"JDKRandomGenerator";;0;;;27;28;27;2;26;4;25;7;20194;2;"JDKRandomGenerator";"org.apache.commons.math3.random.JDKRandomGenerator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
385;243;20149;0;;"javageneric";352;352;243;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/table/tr[5]/td[1]/a";0;0;8;2;"Well512a";"d";30;30;;"f";152;"Well512a";"Well512a";;0;;;27;28;27;2;26;4;25;7;20149;2;"Well512a";"org.apache.commons.math3.random.Well512a";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
96;244;20277;0;;"javaclass";84;84;244;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[4]/div[1]";0;0;8;2;"Beta";"d";2;2;;"f";-100000;"Log Beta";"Log Beta";;0;27;27;27;27;27;4;26;3;25;7;20277;2;"Beta";"org.apache.commons.math3.special.Beta";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
97;245;20277;0;;"javaclass";85;85;245;;"math/doc/manual3.1/math/userguide/special.html";"/html/body/div[4]/div/div/div[4]/div[2]";0;0;8;2;"Beta";"d";2;2;;"f";-100000;"Regularized Beta";"Regularized Beta";;0;27;29;27;29;27;4;26;3;25;7;20277;2;"Beta";"org.apache.commons.math3.special.Beta";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
386;246;20197;0;;"javageneric";353;353;246;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/table/tr[6]/td[1]/a";0;0;8;2;"Well1024a";"d";30;30;;"f";153;"Well1024a";"Well1024a";;0;;;27;28;27;2;26;4;25;7;20197;2;"Well1024a";"org.apache.commons.math3.random.Well1024a";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
387;247;20225;0;;"javageneric";354;354;247;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/table/tr[7]/td[1]/a";0;0;8;2;"Well19937a";"d";30;30;;"f";154;"Well19937a";"Well19937a";;0;;;27;28;27;2;26;4;25;7;20225;2;"Well19937a";"org.apache.commons.math3.random.Well19937a";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
388;248;19897;0;;"javageneric";355;355;248;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/table/tr[8]/td[1]/a";0;0;8;2;"Well19937c";"d";30;30;;"f";155;"Well19937c";"Well19937c";;0;;;27;28;27;2;26;4;25;7;19897;2;"Well19937c";"org.apache.commons.math3.random.Well19937c";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
389;249;20054;0;;"javageneric";356;356;249;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/table/tr[9]/td[1]/a";0;0;8;2;"Well44497a";"d";30;30;;"f";156;"Well44497a";"Well44497a";;0;;;27;28;27;2;26;4;25;7;20054;2;"Well44497a";"org.apache.commons.math3.random.Well44497a";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
390;251;19731;0;;"javageneric";357;357;251;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/table/tr[10]/td[1]/a";0;0;8;2;"Well44497b";"d";30;30;;"f";157;"Well44497b";"Well44497b";;0;;;27;28;27;2;26;4;25;7;19731;2;"Well44497b";"org.apache.commons.math3.random.Well44497b";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
391;253;19897;0;;"javageneric";358;358;253;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/p[9]/a[1]";0;0;8;2;"Well19937c";"d";30;30;;"f";158;"So for most simulation problems, the better generators like Well19937c and Well44497b are probably very good choices.";"So for most simulation problems, the better generators like Well19937c and Well44497b are probably very good choices.";;0;;;27;28;27;2;26;4;25;7;19897;2;"Well19937c";"org.apache.commons.math3.random.Well19937c";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
392;256;19731;0;;"javageneric";359;359;256;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/p[9]/a[2]";0;0;8;2;"Well44497b";"d";30;30;;"f";159;"So for most simulation problems, the better generators like Well19937c and Well44497b are probably very good choices.";"So for most simulation problems, the better generators like Well19937c and Well44497b are probably very good choices.";;0;;;27;28;27;2;26;4;25;7;19731;2;"Well44497b";"org.apache.commons.math3.random.Well44497b";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
98;257;19730;0;;"javaclass";86;86;257;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/dl/dd[1]/tt";0;0;8;2;"AbstractRandomGenerator";"d";2;2;;"f";160;"as the source of randomness, extend AbstractRandomGenerator";"To create a RandomGenerator using the RngPack Mersenne Twister PRNG
       as the source of randomness, extend AbstractRandomGenerator
       overriding the derived methods that the RngPack implementation provides:
       
import edu.cornell.lassp.houle.RngPack.RanMT;
/**
 * AbstractRandomGenerator based on RngPack RanMT generator.
 */
public class RngPackGenerator extends AbstractRandomGenerator {
    
    private RanMT random = new RanMT();
    
    public void setSeed(long seed) {
       random = new RanMT(seed);
    }
    
    public double nextDouble() {
        return random.raw();
    }
    
    public double nextGaussian() {
        return random.gaussian();
    }
    
    public int nextInt(int n) {
        return random.choose(n);
    }
    
    public boolean nextBoolean() {
        return random.coin();
    }
}";;0;;;27;28;27;2;26;4;25;7;19730;2;"AbstractRandomGenerator";"org.apache.commons.math3.random.AbstractRandomGenerator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
99;260;20071;0;;"javaclass";87;87;260;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/dl/dt[2]/tt[2]";0;0;8;2;"RandomData";"d";2;2;;"f";162;"Random in RandomData";"Use the Mersenne Twister RandomGenerator in place of 
      java.util.Random in RandomData";;0;;;27;28;27;2;26;4;25;7;20071;2;"RandomData";"org.apache.commons.math3.random.RandomData";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
100;288;11865;0;;"javaclass";88;88;288;;"math/doc/manual3.1/math/userguide/exceptions.html";"/html/body/div[4]/div/div/div[3]/ul/li[1]/a[2]/tt";0;0;8;2;"MathIllegalArgumentException";"d";2;2;;"f";62;"MathIllegalArgumentException";"MathIllegalArgumentException";;0;;;27;38;27;35;26;7;25;7;11865;2;"MathIllegalArgumentException";"org.apache.commons.math3.exception.MathIllegalArgumentException";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
101;290;11871;0;;"javaclass";89;89;290;;"math/doc/manual3.1/math/userguide/exceptions.html";"/html/body/div[4]/div/div/div[3]/ul/li[2]/a[2]/tt";0;0;8;2;"MathIllegalStateException";"d";2;2;;"f";66;"MathIllegalStateException";"MathIllegalStateException";;0;;;27;38;27;35;26;7;25;7;11871;2;"MathIllegalStateException";"org.apache.commons.math3.exception.MathIllegalStateException";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
102;293;11672;0;;"javaclass";90;90;293;;"math/doc/manual3.1/math/userguide/exceptions.html";"/html/body/div[4]/div/div/div[3]/ul/li[3]/a[2]/tt";0;0;8;2;"MathArithmeticException";"d";2;2;;"f";70;"MathArithmeticException";"MathArithmeticException";;0;;;27;38;27;35;26;7;25;7;11672;2;"MathArithmeticException";"org.apache.commons.math3.exception.MathArithmeticException";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
103;297;11786;0;;"javaclass";91;91;297;;"math/doc/manual3.1/math/userguide/exceptions.html";"/html/body/div[4]/div/div/div[3]/ul/li[4]/a[2]/tt";0;0;8;2;"MathUnsupportedOperationException";"d";2;2;;"f";74;"MathUnsupportedOperationException";"MathUnsupportedOperationException";;0;;;27;38;27;35;26;7;25;7;11786;2;"MathUnsupportedOperationException";"org.apache.commons.math3.exception.MathUnsupportedOperationException";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
423;301;11915;0;;"javageneric";386;386;301;;"math/doc/manual3.1/math/userguide/exceptions.html";"/html/body/div[4]/div/div/div[4]/ul/li[1]/p/a";0;0;8;2;"getLocalizedMessage";"d";2;30;;"f";76;"getLocalizedMessage method) can be localized.";"The detailed error messages (i.e. the string returned by the
              
                getLocalizedMessage method) can be localized.
              However, besides the American/English default, French is the only language
              for which a translation resource is available.";;0;;;27;39;27;35;26;7;25;7;11915;2;"getLocalizedMessage";"org.apache.commons.math3.exception.util.ExceptionContext.getLocalizedMessage";5;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
104;303;11924;0;;"javaclass";92;92;303;;"math/doc/manual3.1/math/userguide/filter.html";"/html/body/div[4]/div/div/div[2]/p[1]/a";0;0;8;2;"KalmanFilter";"d";2;2;;"f";55;"KalmanFilter provides a discrete-time filter to estimate";"KalmanFilter provides a discrete-time filter to estimate
          a stochastic linear process.";;0;;;27;46;27;43;26;9;25;7;11924;2;"KalmanFilter";"org.apache.commons.math3.filter.KalmanFilter";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
105;304;11870;0;;"javaclass";93;93;304;;"math/doc/manual3.1/math/userguide/exceptions.html";"/html/body/div[4]/div/div/div[4]/ul/li[2]/p/a[1]";0;0;8;2;"ExceptionContextProvider";"d";2;2;;"f";77;"ExceptionContextProvider interface.";"Every exception generated by Commons Math implements the
              
                ExceptionContextProvider interface. A call to the
              
                getContext method will return the
              
                ExceptionContext instance stored in the exception, which the
              user can further customize by adding messages and/or any object.";;0;;;27;39;27;35;26;7;25;7;11870;2;"ExceptionContextProvider";"org.apache.commons.math3.exception.util.ExceptionContextProvider";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
106;306;11979;0;;"javaclass";94;94;306;;"math/doc/manual3.1/math/userguide/filter.html";"/html/body/div[4]/div/div/div[2]/p[2]/a[1]";0;0;8;2;"ProcessModel";"d";2;2;;"f";56;"ProcessModel and a";"A Kalman filter is initialized with a 
          ProcessModel and a 
          MeasurementModel, which contain the corresponding transformation and noise covariance matrices. 
          The parameter names used in the respective models correspond to the following names commonly used 
          in the mathematical literature:";;0;;;27;46;27;43;26;9;25;7;11979;2;"ProcessModel";"org.apache.commons.math3.filter.ProcessModel";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
424;307;11874;0;;"javageneric";387;387;307;;"math/doc/manual3.1/math/userguide/exceptions.html";"/html/body/div[4]/div/div/div[4]/ul/li[2]/p/a[2]";0;0;8;2;"getContext";"d";2;30;;"f";78;"getContext method will return the";"Every exception generated by Commons Math implements the
              
                ExceptionContextProvider interface. A call to the
              
                getContext method will return the
              
                ExceptionContext instance stored in the exception, which the
              user can further customize by adding messages and/or any object.";;0;;;27;39;27;35;26;7;25;7;11874;2;"getContext";"org.apache.commons.math3.exception.util.ExceptionContextProvider.getContext";5;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
107;309;11977;0;;"javaclass";95;95;309;;"math/doc/manual3.1/math/userguide/filter.html";"/html/body/div[4]/div/div/div[2]/p[2]/a[2]";0;0;8;2;"MeasurementModel";"d";2;2;;"f";57;"MeasurementModel, which contain the corresponding transformation and noise covariance matrices.";"A Kalman filter is initialized with a 
          ProcessModel and a 
          MeasurementModel, which contain the corresponding transformation and noise covariance matrices. 
          The parameter names used in the respective models correspond to the following names commonly used 
          in the mathematical literature:";;0;;;27;46;27;43;26;9;25;7;11977;2;"MeasurementModel";"org.apache.commons.math3.filter.MeasurementModel";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
108;310;11893;0;;"javaclass";96;96;310;;"math/doc/manual3.1/math/userguide/exceptions.html";"/html/body/div[4]/div/div/div[4]/ul/li[2]/p/a[3]";0;0;8;2;"ExceptionContext";"d";2;2;;"f";79;"ExceptionContext instance stored in the exception, which the";"Every exception generated by Commons Math implements the
              
                ExceptionContextProvider interface. A call to the
              
                getContext method will return the
              
                ExceptionContext instance stored in the exception, which the
              user can further customize by adding messages and/or any object.";;0;;;27;39;27;35;26;7;25;7;11893;2;"ExceptionContext";"org.apache.commons.math3.exception.util.ExceptionContext";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
109;314;11871;0;;"javaclass";97;97;314;;"math/doc/manual3.1/math/userguide/overview.html";"/html/body/div[4]/div/div/div[4]/p[2]/a[2]";0;0;8;2;"MathIllegalStateException";"d";2;2;;"f";75;"MathIllegalStateException may be thrown.";"When the actual parameters provided to a method or the internal state of an object 
    make a computation meaningless, a
    
      IllegalArgumentException or
    
      MathIllegalStateException may be thrown. Exact conditions under which runtime
    exceptions (and any other exceptions) are thrown are specified in the javadoc method
    comments.
    In some cases, to be consistent with the 
      IEEE 754 standard for floating point arithmetic and with java.lang.Math, Commons Math
    methods return Double.NaN values. Conditions under which Double.NaN
    or other special values are returned are fully specified in the javadoc method comments.";;0;;;27;47;27;40;26;8;25;7;11871;2;"MathIllegalStateException";"org.apache.commons.math3.exception.MathIllegalStateException";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
110;317;11846;0;;"javaclass";98;98;317;;"math/doc/manual3.1/math/userguide/overview.html";"/html/body/div[4]/div/div/div[4]/p[3]/a";0;0;8;2;"NullArgumentException";"d";2;2;;"f";79;"NullArgumentException is raised for signalling the illegal argument.";"As of version 2.2, the policy for dealing with null references is as
    follows: When an argument is unexpectedly null, a
    
      NullArgumentException is raised for signalling the illegal argument. Note that this
    class does not inherit from the standard NullPointerException but is a subclass
    of MathIllegalArgumentException.
    No NullPointerException should be propagated from within Commons Math.";;0;;;27;47;27;40;26;8;25;7;11846;2;"NullArgumentException";"org.apache.commons.math3.exception.NullArgumentException";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
111;319;11865;0;;"javaclass";99;99;319;;"math/doc/manual3.1/math/userguide/overview.html";"/html/body/div[4]/div/div/div[4]/p[3]/tt[2]";0;0;8;2;"MathIllegalArgumentException";"d";2;2;;"f";81;"of MathIllegalArgumentException.";"As of version 2.2, the policy for dealing with null references is as
    follows: When an argument is unexpectedly null, a
    
      NullArgumentException is raised for signalling the illegal argument. Note that this
    class does not inherit from the standard NullPointerException but is a subclass
    of MathIllegalArgumentException.
    No NullPointerException should be propagated from within Commons Math.";;0;;;27;47;27;40;26;8;25;7;11865;2;"MathIllegalArgumentException";"org.apache.commons.math3.exception.MathIllegalArgumentException";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
112;340;22195;0;;"javaclass";100;100;340;;"math/doc/manual3.1/math/userguide/transform.html";"/html/body/div[4]/div/div/ul/li[1]/a";0;0;8;2;"FastFourierTransformer";"d";2;2;;"f";53;"FastFourierTransformer (produces Complex results)";"FastFourierTransformer (produces Complex results)";;0;;;27;50;;;26;10;25;7;22195;2;"FastFourierTransformer";"org.apache.commons.math3.transform.FastFourierTransformer";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
393;342;10554;0;;"javageneric";360;360;342;;"math/doc/manual3.1/math/userguide/transform.html";"/html/body/div[4]/div/div/ul/li[1]/tt";0;0;8;2;"Complex";"d";30;30;;"f";54;"FastFourierTransformer (produces Complex results)";"FastFourierTransformer (produces Complex results)";;0;;;27;50;;;26;10;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
113;344;22135;0;;"javaclass";101;101;344;;"math/doc/manual3.1/math/userguide/transform.html";"/html/body/div[4]/div/div/ul/li[2]/a";0;0;8;2;"FastCosineTransformer";"d";2;2;;"f";55;"FastCosineTransformer (produces real results)";"FastCosineTransformer (produces real results)";;0;;;27;50;;;26;10;25;7;22135;2;"FastCosineTransformer";"org.apache.commons.math3.transform.FastCosineTransformer";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
114;346;22171;0;;"javaclass";102;102;346;;"math/doc/manual3.1/math/userguide/transform.html";"/html/body/div[4]/div/div/ul/li[3]/a";0;0;8;2;"FastSineTransformer";"d";2;2;;"f";56;"FastSineTransformer (produces real results)";"FastSineTransformer (produces real results)";;0;;;27;50;;;26;10;25;7;22171;2;"FastSineTransformer";"org.apache.commons.math3.transform.FastSineTransformer";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
115;348;22262;0;;"javaclass";103;103;348;;"math/doc/manual3.1/math/userguide/transform.html";"/html/body/div[4]/div/div/ul/li[4]/a";0;0;8;2;"FastHadamardTransformer";"d";2;2;;"f";57;"FastHadamardTransformer (produces real results)";"FastHadamardTransformer (produces real results)";;0;;;27;50;;;26;10;25;7;22262;2;"FastHadamardTransformer";"org.apache.commons.math3.transform.FastHadamardTransformer";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
116;359;13858;0;;"javaclass";104;104;359;;"math/doc/manual3.1/math/userguide/transform.html";"/html/body/div[4]/div/div";0;0;8;2;"Transform";"d";2;2;;"f";-100000;"10 Transform methods";"10 Transform methods";;0;27;50;27;50;;;26;10;25;7;13858;2;"Transform";"org.apache.commons.math3.geometry.partitioning.Transform";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
117;366;22844;0;;"javaclass";105;105;366;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[2]/p[1]/a";0;0;8;2;"DoubleArray";"d";2;2;;"f";57;"DoubleArray.";"To maintain statistics based on a ""rolling"" window of values, a resizable 
    array implementation was developed and is provided for reuse in the 
    util package.  The core functionality provided is described in
    the documentation for the interface, 
    
    DoubleArray.  This interface adds one method,
    addElementRolling(double) to basic list accessors. 
    The addElementRolling method adds an element 
    (the actual parameter) to the end of the list and removes the first element
     in the list.";;0;;;27;53;27;51;26;11;25;7;22844;2;"DoubleArray";"org.apache.commons.math3.util.DoubleArray";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
118;372;22922;0;;"javaclass";106;106;372;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[2]/p[2]/a[1]";0;0;8;2;"ResizableDoubleArray";"d";2;2;;"f";60;"ResizableDoubleArray class provides a configurable, array-backed";"The 
    ResizableDoubleArray class provides a configurable, array-backed
    implementation of the DoubleArray interface.
    When addElementRolling is invoked, the underlying
    array is expanded if necessary, the new element is added to the end of the
    array and the ""usable window"" of the array is moved forward, so that
    the first element is effectively discarded, what was the second becomes the
    first, and so on.  To efficiently manage storage, two maintenance
    operations need to be periodically performed -- orphaned elements at the
    beginning of the array need to be reclaimed and space for new elements at
    the end needs to be created.  Both of these operations are handled
    automatically, with frequency / effect driven by the configuration
    properties expansionMode, expansionFactor and
    contractionCriteria.  See 
    
    ResizableDoubleArray
    for details.";;0;;;27;53;27;51;26;11;25;7;22922;2;"ResizableDoubleArray";"org.apache.commons.math3.util.ResizableDoubleArray";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
119;374;22844;0;;"javaclass";107;107;374;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[2]/p[2]/tt[1]";0;0;8;2;"DoubleArray";"d";2;2;;"f";61;"implementation of the DoubleArray interface.";"The 
    ResizableDoubleArray class provides a configurable, array-backed
    implementation of the DoubleArray interface.
    When addElementRolling is invoked, the underlying
    array is expanded if necessary, the new element is added to the end of the
    array and the ""usable window"" of the array is moved forward, so that
    the first element is effectively discarded, what was the second becomes the
    first, and so on.  To efficiently manage storage, two maintenance
    operations need to be periodically performed -- orphaned elements at the
    beginning of the array need to be reclaimed and space for new elements at
    the end needs to be created.  Both of these operations are handled
    automatically, with frequency / effect driven by the configuration
    properties expansionMode, expansionFactor and
    contractionCriteria.  See 
    
    ResizableDoubleArray
    for details.";;0;;;27;53;27;51;26;11;25;7;22844;2;"DoubleArray";"org.apache.commons.math3.util.DoubleArray";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
120;383;11152;0;;"javaclass";108;108;383;;"math/doc/manual3.1/math/userguide/distribution.html";"/html/body/div[4]/div/div/div[3]/p/a[4]";0;0;8;2;"IntegerDistribution";"d";2;2;;"f";72;"IntegerDistribution interfaces serve as";"Since there are numerous distributions and Commons-Math only directly
        supports a handful, it may be necessary to extend the distribution
        framework to satisfy individual needs.  It is recommended that the
        Distribution,
        
        ContinuousDistribution,
        
        DiscreteDistribution, and 
        IntegerDistribution interfaces serve as
        base types for any extension.  These serve as the basis for all the
        distributions directly supported by Commons-Math and using those interfaces
        for implementation purposes will ensure any extension is compatible with the
        remainder of Commons-Math.  To aid in implementing a distribution extension,
        the 
        AbstractDistribution, 
        AbstractContinuousDistribution, and 
        AbstractIntegerDistribution provide implementation building blocks and
        offer basic distribution functionality.  By extending these abstract classes
        directly, much of the repetitive distribution implementation is already
        developed and should save time and effort in developing user-defined
        distributions.";;0;;;27;62;27;59;26;12;25;7;11152;2;"IntegerDistribution";"org.apache.commons.math3.distribution.IntegerDistribution";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
121;386;22922;0;;"javaclass";109;109;386;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[2]/p[2]/a[2]";0;0;8;2;"ResizableDoubleArray";"d";2;2;;"f";66;"ResizableDoubleArray";"The 
    ResizableDoubleArray class provides a configurable, array-backed
    implementation of the DoubleArray interface.
    When addElementRolling is invoked, the underlying
    array is expanded if necessary, the new element is added to the end of the
    array and the ""usable window"" of the array is moved forward, so that
    the first element is effectively discarded, what was the second becomes the
    first, and so on.  To efficiently manage storage, two maintenance
    operations need to be periodically performed -- orphaned elements at the
    beginning of the array need to be reclaimed and space for new elements at
    the end needs to be created.  Both of these operations are handled
    automatically, with frequency / effect driven by the configuration
    properties expansionMode, expansionFactor and
    contractionCriteria.  See 
    
    ResizableDoubleArray
    for details.";;0;;;27;53;27;51;26;11;25;7;22922;2;"ResizableDoubleArray";"org.apache.commons.math3.util.ResizableDoubleArray";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
122;389;22468;0;;"javaclass";110;110;389;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[3]/p/a";0;0;8;2;"OpenIntToDoubleHashMap";"d";2;2;;"f";68;"OpenIntToDoubleHashMap class provides a specialized hash map";"The 
    OpenIntToDoubleHashMap class provides a specialized hash map
    implementation for int/double. This implementation has a much smaller memory
    overhead than standard java.util.HashMap class. It uses open addressing
    and primitive arrays, which greatly reduces the number of intermediate objects and
    improve data locality.";;0;;;27;54;27;51;26;11;25;7;22468;2;"OpenIntToDoubleHashMap";"org.apache.commons.math3.util.OpenIntToDoubleHashMap";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
123;394;11307;0;;"javaclass";111;111;394;;"math/doc/manual3.1/math/userguide/distribution.html";"/html/body/div[4]/div/div/div[3]/p/a[7]";0;0;8;2;"AbstractIntegerDistribution";"d";2;2;;"f";75;"AbstractIntegerDistribution provide implementation building blocks and";"Since there are numerous distributions and Commons-Math only directly
        supports a handful, it may be necessary to extend the distribution
        framework to satisfy individual needs.  It is recommended that the
        Distribution,
        
        ContinuousDistribution,
        
        DiscreteDistribution, and 
        IntegerDistribution interfaces serve as
        base types for any extension.  These serve as the basis for all the
        distributions directly supported by Commons-Math and using those interfaces
        for implementation purposes will ensure any extension is compatible with the
        remainder of Commons-Math.  To aid in implementing a distribution extension,
        the 
        AbstractDistribution, 
        AbstractContinuousDistribution, and 
        AbstractIntegerDistribution provide implementation building blocks and
        offer basic distribution functionality.  By extending these abstract classes
        directly, much of the repetitive distribution implementation is already
        developed and should save time and effort in developing user-defined
        distributions.";;0;;;27;62;27;59;26;12;25;7;11307;2;"AbstractIntegerDistribution";"org.apache.commons.math3.distribution.AbstractIntegerDistribution";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
124;397;22649;0;;"javaclass";112;112;397;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[4]/p[1]/a[1]";0;0;8;2;"ContinuedFraction";"d";2;2;;"f";71;"ContinuedFraction class provides a generic way to create and evaluate";"The 
    ContinuedFraction class provides a generic way to create and evaluate
    continued fractions.  The easiest way to create a continued fraction is
    to subclass ContinuedFraction and override the
    getA and getB methods which return
    the continued fraction terms.  The precise definition of these terms is
    explained in 
    Continued Fraction, equation (1) from MathWorld.";;0;;;27;55;27;51;26;11;25;7;22649;2;"ContinuedFraction";"org.apache.commons.math3.util.ContinuedFraction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
125;398;17746;0;;"javaclass";113;113;398;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[1]/p[3]/a";0;0;8;2;"StepInterpolator";"d";2;2;;"f";54;"StepInterpolator";"All integrators provide dense output. This means that besides computing the state vector
          at discrete times, they also provide a cheap mean to get both the state and its derivative
          between the time steps. They do so through classes extending the
          StepInterpolator
          abstract class, which are made available to the user at the end of each step.";;0;;;27;64;27;63;26;13;25;7;17746;2;"StepInterpolator";"org.apache.commons.math3.ode.sampling.StepInterpolator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
126;400;22649;0;;"javaclass";114;114;400;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[4]/p[1]/tt[1]";0;0;8;2;"ContinuedFraction";"d";2;2;;"f";72;"to subclass ContinuedFraction and override the";"The 
    ContinuedFraction class provides a generic way to create and evaluate
    continued fractions.  The easiest way to create a continued fraction is
    to subclass ContinuedFraction and override the
    getA and getB methods which return
    the continued fraction terms.  The precise definition of these terms is
    explained in 
    Continued Fraction, equation (1) from MathWorld.";;0;;;27;55;27;51;26;11;25;7;22649;2;"ContinuedFraction";"org.apache.commons.math3.util.ContinuedFraction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
439;404;22704;0;;"javageneric";394;394;404;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[4]/p[1]/tt[2]";0;0;8;2;"getA";"d";30;30;;"f";73;"getA and getB methods which return";"The 
    ContinuedFraction class provides a generic way to create and evaluate
    continued fractions.  The easiest way to create a continued fraction is
    to subclass ContinuedFraction and override the
    getA and getB methods which return
    the continued fraction terms.  The precise definition of these terms is
    explained in 
    Continued Fraction, equation (1) from MathWorld.";;0;;;27;55;27;51;26;11;25;7;22704;2;"getA";"org.apache.commons.math3.util.ContinuedFraction.getA";5;"f";"t";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
127;405;16854;0;;"javaclass";115;115;405;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[1]/p[6]/a[1]";0;0;8;2;"FirstOrderDifferentialEquations";"d";2;2;;"f";56;"FirstOrderDifferentialEquations";"The user should describe his problem in his own classes which should implement the
          FirstOrderDifferentialEquations
          interface. Then he should pass it to the integrator he prefers among all the classes that implement
          the FirstOrderIntegrator
          interface. The following example shows how to implement the simple two-dimensional problem:";;0;;;27;64;27;63;26;13;25;7;16854;2;"FirstOrderDifferentialEquations";"org.apache.commons.math3.ode.FirstOrderDifferentialEquations";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
440;407;22713;0;;"javageneric";395;395;407;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[4]/p[1]/tt[3]";0;0;8;2;"getB";"d";30;30;;"f";74;"getA and getB methods which return";"The 
    ContinuedFraction class provides a generic way to create and evaluate
    continued fractions.  The easiest way to create a continued fraction is
    to subclass ContinuedFraction and override the
    getA and getB methods which return
    the continued fraction terms.  The precise definition of these terms is
    explained in 
    Continued Fraction, equation (1) from MathWorld.";;0;;;27;55;27;51;26;11;25;7;22713;2;"getB";"org.apache.commons.math3.util.ContinuedFraction.getB";5;"f";"t";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
128;409;16989;0;;"javaclass";116;116;409;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[1]/p[6]/a[2]";0;0;8;2;"FirstOrderIntegrator";"d";2;2;;"f";57;"the FirstOrderIntegrator";"The user should describe his problem in his own classes which should implement the
          FirstOrderDifferentialEquations
          interface. Then he should pass it to the integrator he prefers among all the classes that implement
          the FirstOrderIntegrator
          interface. The following example shows how to implement the simple two-dimensional problem:";;0;;;27;64;27;63;26;13;25;7;16989;2;"FirstOrderIntegrator";"org.apache.commons.math3.ode.FirstOrderIntegrator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
129;412;16989;0;;"javaclass";117;117;412;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[1]/tt[1]";0;0;8;2;"FirstOrderIntegrator.integrate";"d";2;2;;"f";59;"FirstOrderIntegrator.integrate method, as shown by previous example.";"The solution of the integration problem is provided by two means. The first one is aimed towards
          simple use: the state vector at the end of the integration process is copied in the y array of the
          FirstOrderIntegrator.integrate method, as shown by previous example. The second one
          should be used when more in-depth information is needed throughout the integration process. The user
          can register an object implementing the
          StepHandler interface or a
          StepNormalizer object wrapping
          a user-specified object implementing the
          FixedStepHandler interface
          into the integrator before calling the FirstOrderIntegrator.integrate method. The user object
          will be called appropriately during the integration process, allowing the user to process intermediate
          results. The default step handler does nothing. Considering again the previous example, we want to print the
          trajectory of the point to check it really is a circle arc. We simply add the following before the call
          to integrator.integrate:";;0;;;27;65;27;63;26;13;25;7;16989;2;"FirstOrderIntegrator";"org.apache.commons.math3.ode.FirstOrderIntegrator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
441;414;16992;0;;"javageneric";396;396;414;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[1]/tt[1]";0;0;8;2;"FirstOrderIntegrator.integrate";"d";8;30;;"f";59;"FirstOrderIntegrator.integrate method, as shown by previous example.";"The solution of the integration problem is provided by two means. The first one is aimed towards
          simple use: the state vector at the end of the integration process is copied in the y array of the
          FirstOrderIntegrator.integrate method, as shown by previous example. The second one
          should be used when more in-depth information is needed throughout the integration process. The user
          can register an object implementing the
          StepHandler interface or a
          StepNormalizer object wrapping
          a user-specified object implementing the
          FixedStepHandler interface
          into the integrator before calling the FirstOrderIntegrator.integrate method. The user object
          will be called appropriately during the integration process, allowing the user to process intermediate
          results. The default step handler does nothing. Considering again the previous example, we want to print the
          trajectory of the point to check it really is a circle arc. We simply add the following before the call
          to integrator.integrate:";412;0;;;27;65;27;63;26;13;25;7;16992;2;"integrate";"org.apache.commons.math3.ode.FirstOrderIntegrator.integrate";5;"f";"t";"Err:512";;0;"java";8;"field";"f";"f";"f";"f"
130;416;22840;0;;"javaclass";118;118;416;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[5]/p/a";0;0;8;2;"ArithmeticUtils";"d";2;2;;"f";81;"ArithmeticUtils";"A collection of reusable math functions is provided in the
    ArithmeticUtils
    utility class.  ArithmeticUtils currently includes methods to compute the following:";;0;;;27;56;27;51;26;11;25;7;22840;2;"ArithmeticUtils";"org.apache.commons.math3.util.ArithmeticUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
131;418;17770;0;;"javaclass";119;119;418;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[1]";0;0;8;2;"StepHandler";"d";2;2;;"f";60;"StepHandler interface or a";"The solution of the integration problem is provided by two means. The first one is aimed towards
          simple use: the state vector at the end of the integration process is copied in the y array of the
          FirstOrderIntegrator.integrate method, as shown by previous example. The second one
          should be used when more in-depth information is needed throughout the integration process. The user
          can register an object implementing the
          StepHandler interface or a
          StepNormalizer object wrapping
          a user-specified object implementing the
          FixedStepHandler interface
          into the integrator before calling the FirstOrderIntegrator.integrate method. The user object
          will be called appropriately during the integration process, allowing the user to process intermediate
          results. The default step handler does nothing. Considering again the previous example, we want to print the
          trajectory of the point to check it really is a circle arc. We simply add the following before the call
          to integrator.integrate:";;0;;;27;65;27;63;26;13;25;7;17770;2;"StepHandler";"org.apache.commons.math3.ode.sampling.StepHandler";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
326;420;22863;0;;"javamethod";302;302;420;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[5]/ul/li[1]/tt[1]";0;0;8;2;"binomialCoefficient(int, int)";"d";5;5;;"f";82;"binomialCoefficient(int, int) for small n, k; as a double,";"Binomial coefficients -- ""n choose k"" available as an (exact) long value,  
    binomialCoefficient(int, int) for small n, k; as a double,
    binomialCoefficientDouble(int, int) for larger values; and in
    a ""super-sized"" version, binomialCoefficientLog(int, int) 
    that returns the natural logarithm of the value.";;0;;;27;56;27;51;26;11;25;7;22863;2;"binomialCoefficient";"org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
132;421;17693;0;;"javaclass";120;120;421;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[2]";0;0;8;2;"StepNormalizer";"d";2;2;;"f";61;"StepNormalizer object wrapping";"The solution of the integration problem is provided by two means. The first one is aimed towards
          simple use: the state vector at the end of the integration process is copied in the y array of the
          FirstOrderIntegrator.integrate method, as shown by previous example. The second one
          should be used when more in-depth information is needed throughout the integration process. The user
          can register an object implementing the
          StepHandler interface or a
          StepNormalizer object wrapping
          a user-specified object implementing the
          FixedStepHandler interface
          into the integrator before calling the FirstOrderIntegrator.integrate method. The user object
          will be called appropriately during the integration process, allowing the user to process intermediate
          results. The default step handler does nothing. Considering again the previous example, we want to print the
          trajectory of the point to check it really is a circle arc. We simply add the following before the call
          to integrator.integrate:";;0;;;27;65;27;63;26;13;25;7;17693;2;"StepNormalizer";"org.apache.commons.math3.ode.sampling.StepNormalizer";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
329;422;22873;0;;"javamethod";304;304;422;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[5]/ul/li[1]/tt[2]";0;0;8;2;"binomialCoefficientDouble(int, int)";"d";5;5;;"f";83;"binomialCoefficientDouble(int, int) for larger values; and in";"Binomial coefficients -- ""n choose k"" available as an (exact) long value,  
    binomialCoefficient(int, int) for small n, k; as a double,
    binomialCoefficientDouble(int, int) for larger values; and in
    a ""super-sized"" version, binomialCoefficientLog(int, int) 
    that returns the natural logarithm of the value.";;0;;;27;56;27;51;26;11;25;7;22873;2;"binomialCoefficientDouble";"org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientDouble";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
133;424;17801;0;;"javaclass";121;121;424;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[3]";0;0;8;2;"FixedStepHandler";"d";2;2;;"f";62;"FixedStepHandler interface";"The solution of the integration problem is provided by two means. The first one is aimed towards
          simple use: the state vector at the end of the integration process is copied in the y array of the
          FirstOrderIntegrator.integrate method, as shown by previous example. The second one
          should be used when more in-depth information is needed throughout the integration process. The user
          can register an object implementing the
          StepHandler interface or a
          StepNormalizer object wrapping
          a user-specified object implementing the
          FixedStepHandler interface
          into the integrator before calling the FirstOrderIntegrator.integrate method. The user object
          will be called appropriately during the integration process, allowing the user to process intermediate
          results. The default step handler does nothing. Considering again the previous example, we want to print the
          trajectory of the point to check it really is a circle arc. We simply add the following before the call
          to integrator.integrate:";;0;;;27;65;27;63;26;13;25;7;17801;2;"FixedStepHandler";"org.apache.commons.math3.ode.sampling.FixedStepHandler";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
330;426;22884;0;;"javamethod";305;305;426;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[5]/ul/li[1]/tt[3]";0;0;8;2;"binomialCoefficientLog(int, int)";"d";5;5;;"f";84;"a ""super-sized"" version, binomialCoefficientLog(int, int)";"Binomial coefficients -- ""n choose k"" available as an (exact) long value,  
    binomialCoefficient(int, int) for small n, k; as a double,
    binomialCoefficientDouble(int, int) for larger values; and in
    a ""super-sized"" version, binomialCoefficientLog(int, int) 
    that returns the natural logarithm of the value.";;0;;;27;56;27;51;26;11;25;7;22884;2;"binomialCoefficientLog";"org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficientLog";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
134;427;16989;0;;"javaclass";122;122;427;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[1]/tt[2]";0;0;8;2;"FirstOrderIntegrator.integrate";"d";2;2;;"f";63;"into the integrator before calling the FirstOrderIntegrator.integrate method.";"The solution of the integration problem is provided by two means. The first one is aimed towards
          simple use: the state vector at the end of the integration process is copied in the y array of the
          FirstOrderIntegrator.integrate method, as shown by previous example. The second one
          should be used when more in-depth information is needed throughout the integration process. The user
          can register an object implementing the
          StepHandler interface or a
          StepNormalizer object wrapping
          a user-specified object implementing the
          FixedStepHandler interface
          into the integrator before calling the FirstOrderIntegrator.integrate method. The user object
          will be called appropriately during the integration process, allowing the user to process intermediate
          results. The default step handler does nothing. Considering again the previous example, we want to print the
          trajectory of the point to check it really is a circle arc. We simply add the following before the call
          to integrator.integrate:";;0;;;27;65;27;63;26;13;25;7;16989;2;"FirstOrderIntegrator";"org.apache.commons.math3.ode.FirstOrderIntegrator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
442;428;16992;0;;"javageneric";397;397;428;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[1]/tt[2]";0;0;8;2;"FirstOrderIntegrator.integrate";"d";8;30;;"f";63;"into the integrator before calling the FirstOrderIntegrator.integrate method.";"The solution of the integration problem is provided by two means. The first one is aimed towards
          simple use: the state vector at the end of the integration process is copied in the y array of the
          FirstOrderIntegrator.integrate method, as shown by previous example. The second one
          should be used when more in-depth information is needed throughout the integration process. The user
          can register an object implementing the
          StepHandler interface or a
          StepNormalizer object wrapping
          a user-specified object implementing the
          FixedStepHandler interface
          into the integrator before calling the FirstOrderIntegrator.integrate method. The user object
          will be called appropriately during the integration process, allowing the user to process intermediate
          results. The default step handler does nothing. Considering again the previous example, we want to print the
          trajectory of the point to check it really is a circle arc. We simply add the following before the call
          to integrator.integrate:";427;0;;;27;65;27;63;26;13;25;7;16992;2;"integrate";"org.apache.commons.math3.ode.FirstOrderIntegrator.integrate";5;"f";"t";"Err:512";;0;"java";8;"field";"f";"f";"f";"f"
335;429;23060;0;;"javamethod";309;309;429;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[5]/ul/li[2]/tt";0;0;8;2;"stirlingS2(int, int)";"d";5;5;;"f";85;"stirlingS2(int, int) for small n, k.";"Stirling numbers of the second kind -- S(n,k) as an exact long value
    stirlingS2(int, int) for small n, k.";;0;;;27;56;27;51;26;11;25;7;23060;2;"stirlingS2";"org.apache.commons.math3.util.ArithmeticUtils.stirlingS2";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
336;430;22895;0;;"javamethod";310;310;430;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[5]/ul/li[3]/tt[1]";0;0;8;2;"factorial(int)";"d";5;5;;"f";86;"values, factorial(int);  doubles,";"Factorials -- like binomial coefficients, these are available as exact long
    values, factorial(int);  doubles, 
    factorialDouble(int); or logs, factorialLog(int).";;0;;;27;56;27;51;26;11;25;7;22895;2;"factorial";"org.apache.commons.math3.util.ArithmeticUtils.factorial";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
135;431;16901;0;;"javaclass";123;123;431;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[2]/a";0;0;8;2;"ContinuousOutputModel";"d";2;2;;"f";64;"ContinuousOutputModel";"ContinuousOutputModel
          is a special-purpose step handler that is able to store all steps and to provide transparent access to
          any intermediate result once the integration is over. An important feature of this class is that it
          implements the Serializable interface. This means that a complete continuous model of the
          integrated function throughout the integration range can be serialized and reused later (if stored into
          a persistent medium like a file system or a database) or elsewhere (if sent to another application).
          Only the result of the integration is stored, there is no reference to the integrated problem by itself.";;0;;;27;65;27;63;26;13;25;7;16901;2;"ContinuousOutputModel";"org.apache.commons.math3.ode.ContinuousOutputModel";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
339;433;22902;0;;"javamethod";313;313;433;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[5]/ul/li[3]/tt[2]";0;0;8;2;"factorialDouble(int)";"d";5;5;;"f";87;"factorialDouble(int); or logs, factorialLog(int).";"Factorials -- like binomial coefficients, these are available as exact long
    values, factorial(int);  doubles, 
    factorialDouble(int); or logs, factorialLog(int).";;0;;;27;56;27;51;26;11;25;7;22902;2;"factorialDouble";"org.apache.commons.math3.util.ArithmeticUtils.factorialDouble";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
341;434;22909;0;;"javamethod";315;315;434;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[5]/ul/li[3]/tt[3]";0;0;8;2;"factorialLog(int)";"d";5;5;;"f";88;"factorialDouble(int); or logs, factorialLog(int).";"Factorials -- like binomial coefficients, these are available as exact long
    values, factorial(int);  doubles, 
    factorialDouble(int); or logs, factorialLog(int).";;0;;;27;56;27;51;26;11;25;7;22909;2;"factorialLog";"org.apache.commons.math3.util.ArithmeticUtils.factorialLog";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
136;435;17770;0;;"javaclass";124;124;435;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[3]/a[1]";0;0;8;2;"StepHandler";"d";2;2;;"f";66;"Other default implementations of the StepHandler";"Other default implementations of the StepHandler
          interface are available for general needs
          (DummyStepHandler,
          StepNormalizer) and custom
          implementations can be developed for specific needs. As an example, if an application is to be
          completely driven by the integration process, then most of the application code will be run inside a
          step handler specific to this application.";;0;;;27;65;27;63;26;13;25;7;17770;2;"StepHandler";"org.apache.commons.math3.ode.sampling.StepHandler";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
137;439;17633;0;;"javaclass";125;125;439;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[3]/a[2]";0;0;8;2;"DummyStepHandler";"d";2;2;;"f";67;"(DummyStepHandler,";"Other default implementations of the StepHandler
          interface are available for general needs
          (DummyStepHandler,
          StepNormalizer) and custom
          implementations can be developed for specific needs. As an example, if an application is to be
          completely driven by the integration process, then most of the application code will be run inside a
          step handler specific to this application.";;0;;;27;65;27;63;26;13;25;7;17633;2;"DummyStepHandler";"org.apache.commons.math3.ode.sampling.DummyStepHandler";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
138;442;17693;0;;"javaclass";126;126;442;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[3]/a[3]";0;0;8;2;"StepNormalizer";"d";2;2;;"f";68;"StepNormalizer) and custom";"Other default implementations of the StepHandler
          interface are available for general needs
          (DummyStepHandler,
          StepNormalizer) and custom
          implementations can be developed for specific needs. As an example, if an application is to be
          completely driven by the integration process, then most of the application code will be run inside a
          step handler specific to this application.";;0;;;27;65;27;63;26;13;25;7;17693;2;"StepNormalizer";"org.apache.commons.math3.ode.sampling.StepNormalizer";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
139;443;17305;0;;"javaclass";127;127;443;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[4]/a[1]";0;0;8;2;"AdaptiveStepsizeIntegrator";"d";2;2;;"f";69;"AdaptiveStepsizeIntegrator";"Some integrators (the simple ones) use fixed steps that are set at creation time. The more efficient
          integrators use variable steps that are handled internally in order to control the integration error
          with respect to a specified accuracy (these integrators extend the
          AdaptiveStepsizeIntegrator
          abstract class). In this case, the step handler which is called after each successful step shows up
          the variable stepsize. The StepNormalizer
          class can be used to convert the variable stepsize into a fixed stepsize that can be handled by classes
          implementing the FixedStepHandler
          interface. Adaptive stepsize integrators can automatically compute the initial stepsize by themselves,
          however the user can specify it if he prefers to retain full control over the integration or if the
          automatic guess is wrong.";;0;;;27;65;27;63;26;13;25;7;17305;2;"AdaptiveStepsizeIntegrator";"org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
140;448;17693;0;;"javaclass";128;128;448;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[4]/a[2]";0;0;8;2;"StepNormalizer";"d";2;2;;"f";70;"The StepNormalizer";"Some integrators (the simple ones) use fixed steps that are set at creation time. The more efficient
          integrators use variable steps that are handled internally in order to control the integration error
          with respect to a specified accuracy (these integrators extend the
          AdaptiveStepsizeIntegrator
          abstract class). In this case, the step handler which is called after each successful step shows up
          the variable stepsize. The StepNormalizer
          class can be used to convert the variable stepsize into a fixed stepsize that can be handled by classes
          implementing the FixedStepHandler
          interface. Adaptive stepsize integrators can automatically compute the initial stepsize by themselves,
          however the user can specify it if he prefers to retain full control over the integration or if the
          automatic guess is wrong.";;0;;;27;65;27;63;26;13;25;7;17693;2;"StepNormalizer";"org.apache.commons.math3.ode.sampling.StepNormalizer";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
141;449;17801;0;;"javaclass";129;129;449;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[2]/p[4]/a[3]";0;0;8;2;"FixedStepHandler";"d";2;2;;"f";71;"implementing the FixedStepHandler";"Some integrators (the simple ones) use fixed steps that are set at creation time. The more efficient
          integrators use variable steps that are handled internally in order to control the integration error
          with respect to a specified accuracy (these integrators extend the
          AdaptiveStepsizeIntegrator
          abstract class). In this case, the step handler which is called after each successful step shows up
          the variable stepsize. The StepNormalizer
          class can be used to convert the variable stepsize into a fixed stepsize that can be handled by classes
          implementing the FixedStepHandler
          interface. Adaptive stepsize integrators can automatically compute the initial stepsize by themselves,
          however the user can specify it if he prefers to retain full control over the integration or if the
          automatic guess is wrong.";;0;;;27;65;27;63;26;13;25;7;17801;2;"FixedStepHandler";"org.apache.commons.math3.ode.sampling.FixedStepHandler";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
142;458;22935;0;;"javaclass";130;130;458;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[6]/p[2]/tt[3]";0;0;8;2;"FastMath.sin(x)";"d";2;2;;"f";94;"methods as is (using FastMath.sin(x) or FastMath.";"FastMath is a drop-in replacement for both Math and StrictMath. This
        means that for any method in Math (say Math.sin(x) or
        Math.cbrt(y)), user can directly change the class and use the
        methods as is (using FastMath.sin(x) or FastMath.cbrt(y)
        in the previous example).";;0;;;27;57;27;51;26;11;25;7;22935;2;"FastMath";"org.apache.commons.math3.util.FastMath";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
346;459;23226;0;;"javamethod";319;319;459;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[6]/p[2]/tt[3]";0;0;8;2;"FastMath.sin(x)";"d";5;5;;"f";94;"methods as is (using FastMath.sin(x) or FastMath.";"FastMath is a drop-in replacement for both Math and StrictMath. This
        means that for any method in Math (say Math.sin(x) or
        Math.cbrt(y)), user can directly change the class and use the
        methods as is (using FastMath.sin(x) or FastMath.cbrt(y)
        in the previous example).";458;0;;;27;57;27;51;26;11;25;7;23226;2;"sin";"org.apache.commons.math3.util.FastMath.sin";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
143;461;22935;0;;"javaclass";131;131;461;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[6]/p[2]/tt[4]";0;0;8;2;"FastMath.cbrt(y)";"d";2;2;;"f";95;"sin(x) or FastMath.cbrt(y)";"FastMath is a drop-in replacement for both Math and StrictMath. This
        means that for any method in Math (say Math.sin(x) or
        Math.cbrt(y)), user can directly change the class and use the
        methods as is (using FastMath.sin(x) or FastMath.cbrt(y)
        in the previous example).";;0;;;27;57;27;51;26;11;25;7;22935;2;"FastMath";"org.apache.commons.math3.util.FastMath";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
348;464;23057;0;;"javamethod";321;321;464;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[6]/p[2]/tt[4]";0;0;8;2;"FastMath.cbrt(y)";"d";5;5;;"f";95;"sin(x) or FastMath.cbrt(y)";"FastMath is a drop-in replacement for both Math and StrictMath. This
        means that for any method in Math (say Math.sin(x) or
        Math.cbrt(y)), user can directly change the class and use the
        methods as is (using FastMath.sin(x) or FastMath.cbrt(y)
        in the previous example).";461;0;;;27;57;27;51;26;11;25;7;23057;2;"cbrt";"org.apache.commons.math3.util.FastMath.cbrt";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
144;468;22387;0;;"javaclass";132;132;468;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[7]/a";0;0;8;2;"MultidimensionalCounter";"d";2;2;;"f";98;"MultidimensionalCounter is a utility class that converts a set of indices";"6.7 Miscellaneous
  The 
    MultidimensionalCounter is a utility class that converts a set of indices
  (identifying points in a multidimensional space) to a single index (e.g. identifying
  a location in a one-dimensional array.";;0;;;27;58;27;51;26;11;25;7;22387;2;"MultidimensionalCounter";"org.apache.commons.math3.util.MultidimensionalCounter";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
145;474;20760;0;;"javaclass";133;133;474;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[3]/a[1]";0;0;8;2;"UnivariateStatistic";"d";2;2;;"f";62;"UnivariateStatistic.";"The top level interface is
          
          UnivariateStatistic.
          This interface, implemented by all statistics, consists of
          evaluate() methods that take double[] arrays as arguments
          and return the value of the statistic.   This interface is extended by
          
          StorelessUnivariateStatistic, which adds increment(),
          getResult() and associated methods to support
          ""storageless"" implementations that maintain counters, sums or other
          state information as values are added using the increment()
          method.";;0;;;27;71;27;69;26;14;25;7;20760;2;"UnivariateStatistic";"org.apache.commons.math3.stat.descriptive.UnivariateStatistic";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
146;479;20804;0;;"javaclass";134;134;479;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[3]/a[2]";0;0;8;2;"StorelessUnivariateStatistic";"d";2;2;;"f";64;"StorelessUnivariateStatistic, which adds increment(),";"The top level interface is
          
          UnivariateStatistic.
          This interface, implemented by all statistics, consists of
          evaluate() methods that take double[] arrays as arguments
          and return the value of the statistic.   This interface is extended by
          
          StorelessUnivariateStatistic, which adds increment(),
          getResult() and associated methods to support
          ""storageless"" implementations that maintain counters, sums or other
          state information as values are added using the increment()
          method.";;0;;;27;71;27;69;26;14;25;7;20804;2;"StorelessUnivariateStatistic";"org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
147;489;16854;0;;"javaclass";135;135;489;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[5]/p[5]/a[1]";0;0;8;2;"FirstOrderDifferentialEquations";"d";2;2;;"f";88;"So rather than the FirstOrderDifferentialEquations";"If the function f is too complex, the user can simply rely on internal differentiation
          using finite differences to compute these local jacobians. So rather than the FirstOrderDifferentialEquations
          interface he will implement the ParameterizedODE
          interface. Considering again our example where only ω is considered a parameter, we get:";;0;;;27;68;27;63;26;13;25;7;16854;2;"FirstOrderDifferentialEquations";"org.apache.commons.math3.ode.FirstOrderDifferentialEquations";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
148;491;16864;0;;"javaclass";136;136;491;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[5]/p[5]/a[2]";0;0;8;2;"ParameterizedODE";"d";2;2;;"f";89;"interface he will implement the ParameterizedODE";"If the function f is too complex, the user can simply rely on internal differentiation
          using finite differences to compute these local jacobians. So rather than the FirstOrderDifferentialEquations
          interface he will implement the ParameterizedODE
          interface. Considering again our example where only ω is considered a parameter, we get:";;0;;;27;68;27;63;26;13;25;7;16864;2;"ParameterizedODE";"org.apache.commons.math3.ode.ParameterizedODE";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
394;492;10554;0;;"javageneric";361;361;492;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[2]/p[1]/a";0;0;8;2;"Complex";"d";30;30;;"f";55;"Complex provides a complex number type that forms the basis for";"Complex provides a complex number type that forms the basis for
          the complex functionality found in commons-math.";;0;;;27;80;27;78;26;15;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
149;493;20857;0;;"javaclass";137;137;493;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[4]/a[1]";0;0;8;2;"AbstractUnivariateStatistic";"d";2;2;;"f";68;"AbstractUnivariateStatistic and";"Abstract implementations of the top level interfaces are provided in
          
          AbstractUnivariateStatistic and
          
          AbstractStorelessUnivariateStatistic respectively.";;0;;;27;71;27;69;26;14;25;7;20857;2;"AbstractUnivariateStatistic";"org.apache.commons.math3.stat.descriptive.AbstractUnivariateStatistic";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
150;494;16854;0;;"javaclass";138;138;494;;"math/doc/manual3.1/math/userguide/ode.html";"/html/body/div[4]/div/div/div[5]/p[7]/a[1]";0;0;8;2;"FirstOrderDifferentialEquations";"d";2;2;;"f";90;"So rather than the FirstOrderDifferentialEquations";"If the function f is simple, the user can simply provide the local jacobians
          by himself. So rather than the FirstOrderDifferentialEquations
          interface he will implement the ODEWithJacobians
          interface. Considering again our example where only ω is considered a parameter, we get:";;0;;;27;68;27;63;26;13;25;7;16854;2;"FirstOrderDifferentialEquations";"org.apache.commons.math3.ode.FirstOrderDifferentialEquations";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
151;496;20693;0;;"javaclass";139;139;496;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[4]/a[2]";0;0;8;2;"AbstractStorelessUnivariateStatistic";"d";2;2;;"f";69;"AbstractStorelessUnivariateStatistic respectively.";"Abstract implementations of the top level interfaces are provided in
          
          AbstractUnivariateStatistic and
          
          AbstractStorelessUnivariateStatistic respectively.";;0;;;27;71;27;69;26;14;25;7;20693;2;"AbstractStorelessUnivariateStatistic";"org.apache.commons.math3.stat.descriptive.AbstractStorelessUnivariateStatistic";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
486;498;10826;0;;"javageneric";417;417;498;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[2]/p[2]/tt[2]";0;0;8;2;"NaN";"d";2;30;;"f";57;"handling infinite and NaN values.";"Complex functions and arithmetic operations are implemented in
           commons-math by applying standard computational formulas and
           following the rules for java.lang.Double arithmetic in 
           handling infinite and NaN values.  No attempt is made
           to comply with ANSII/IEC C99x Annex G or any other standard for
           Complex arithmetic.  See the class and method javadocs for the 
           
           Complex and
           
           ComplexUtils classes for details on computing formulas.";;0;;;27;80;27;78;26;15;25;7;10826;2;"NaN";"org.apache.commons.math3.complex.Complex.NaN";8;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
152;499;20721;0;;"javaclass";140;140;499;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[5]/a[1]";0;0;8;2;"DescriptiveStatistics";"d";2;2;;"f";70;"DescriptiveStatistics and";"Each statistic is implemented as a separate class, in one of the
          subpackages (moment, rank, summary) and each extends one of the abstract
          classes above (depending on whether or not value storage is required to
          compute the statistic). There are several ways to instantiate and use statistics.
          Statistics can be instantiated and used directly,  but it is generally more convenient
          (and efficient) to access them using the provided aggregates,
          
           DescriptiveStatistics and
           
           SummaryStatistics.";;0;;;27;71;27;69;26;14;25;7;20721;2;"DescriptiveStatistics";"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
395;500;10554;0;;"javageneric";362;362;500;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[2]/p[2]/a[1]";0;0;8;2;"Complex";"d";30;30;;"f";58;"Complex functions and arithmetic operations are implemented in";"Complex functions and arithmetic operations are implemented in
           commons-math by applying standard computational formulas and
           following the rules for java.lang.Double arithmetic in 
           handling infinite and NaN values.  No attempt is made
           to comply with ANSII/IEC C99x Annex G or any other standard for
           Complex arithmetic.  See the class and method javadocs for the 
           
           Complex and
           
           ComplexUtils classes for details on computing formulas.";;0;;;27;80;27;78;26;15;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
153;501;10504;0;;"javaclass";141;141;501;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[2]/p[2]/a[2]";0;0;8;2;"ComplexUtils";"d";2;2;;"f";59;"ComplexUtils classes for details on computing formulas.";"Complex functions and arithmetic operations are implemented in
           commons-math by applying standard computational formulas and
           following the rules for java.lang.Double arithmetic in 
           handling infinite and NaN values.  No attempt is made
           to comply with ANSII/IEC C99x Annex G or any other standard for
           Complex arithmetic.  See the class and method javadocs for the 
           
           Complex and
           
           ComplexUtils classes for details on computing formulas.";;0;;;27;80;27;78;26;15;25;7;10504;2;"ComplexUtils";"org.apache.commons.math3.complex.ComplexUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
154;502;20756;0;;"javaclass";142;142;502;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[5]/a[2]";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";71;"SummaryStatistics.";"Each statistic is implemented as a separate class, in one of the
          subpackages (moment, rank, summary) and each extends one of the abstract
          classes above (depending on whether or not value storage is required to
          compute the statistic). There are several ways to instantiate and use statistics.
          Statistics can be instantiated and used directly,  but it is generally more convenient
          (and efficient) to access them using the provided aggregates,
          
           DescriptiveStatistics and
           
           SummaryStatistics.";;0;;;27;71;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
155;503;20721;0;;"javaclass";143;143;503;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[6]/tt";0;0;8;2;"DescriptiveStatistics";"d";2;2;;"f";72;"DescriptiveStatistics maintains the input data in memory";"DescriptiveStatistics maintains the input data in memory
           and has the capability of producing ""rolling"" statistics computed from a
           ""window"" consisting of the most recently added values.";;0;;;27;71;27;69;26;14;25;7;20721;2;"DescriptiveStatistics";"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
443;504;10512;0;;"javageneric";398;398;504;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[2]/p[4]/tt[1]";0;0;8;2;"polar2Complex";"d";30;30;;"f";60;"using the polar2Complex method in";"Complex numbers may also be created from polar representations
          using the polar2Complex method in 
          ComplexUtils.";;0;;;27;80;27;78;26;15;25;7;10512;2;"polar2Complex";"org.apache.commons.math3.complex.ComplexUtils.polar2Complex";5;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
156;505;10504;0;;"javaclass";144;144;505;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[2]/p[4]/tt[2]";0;0;8;2;"ComplexUtils";"d";2;2;;"f";61;"ComplexUtils.";"Complex numbers may also be created from polar representations
          using the polar2Complex method in 
          ComplexUtils.";;0;;;27;80;27;78;26;15;25;7;10504;2;"ComplexUtils";"org.apache.commons.math3.complex.ComplexUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
157;506;20756;0;;"javaclass";145;145;506;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[7]/tt";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";73;"SummaryStatistics does not store the input data values";"SummaryStatistics does not store the input data values
           in memory, so the statistics included in this aggregate are limited to those
           that can be computed in one pass through the data without access to
           the full array of values.";;0;;;27;71;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
396;507;10554;0;;"javageneric";363;363;507;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[2]/p[5]/tt[1]";0;0;8;2;"Complex";"d";30;30;;"f";62;"The Complex class provides basic unary and binary";"The Complex class provides basic unary and binary
          complex number operations.  These operations provide the means to add,
          subtract, multiply and divide complex numbers along with other
          complex number functions similar to the real number functions found in
          java.math.BigDecimal:";;0;;;27;80;27;78;26;15;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
158;508;20721;0;;"javaclass";146;146;508;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/table/tr[2]/td[1]/a";0;0;8;2;"DescriptiveStatistics";"d";2;2;;"f";74;"DescriptiveStatistics";"DescriptiveStatistics";;0;;;27;71;27;69;26;14;25;7;20721;2;"DescriptiveStatistics";"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
159;510;20756;0;;"javaclass";147;147;510;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/table/tr[3]/td[1]/a";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";75;"SummaryStatistics";"SummaryStatistics";;0;;;27;71;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
397;511;10554;0;;"javageneric";364;364;511;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[3]/p/a[1]";0;0;8;2;"Complex";"d";30;30;;"f";65;"Complex also provides implementations of serveral transcendental";"Complex also provides implementations of serveral transcendental
          functions involving complex number arguments.
          Prior to version 1.2, these functions were provided
          by 
          ComplexUtils in a way similar to the real number functions found in
          java.lang.Math, but this has been deprecated.
          These operations provide the means to compute the log, sine, tangent,
          and other complex values :";;0;;;27;81;27;78;26;15;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
160;512;20756;0;;"javaclass";148;148;512;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[9]/tt";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";76;"SummaryStatistics can be aggregated using";"SummaryStatistics can be aggregated using 
          
          AggregateSummaryStatistics.  This class can be used to concurrently
          gather statistics for multiple datasets as well as for a combined sample
          including all of the data.";;0;;;27;71;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
161;513;10504;0;;"javaclass";149;149;513;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[3]/p/a[2]";0;0;8;2;"ComplexUtils";"d";2;2;;"f";66;"ComplexUtils in a way similar to the real number functions found in";"Complex also provides implementations of serveral transcendental
          functions involving complex number arguments.
          Prior to version 1.2, these functions were provided
          by 
          ComplexUtils in a way similar to the real number functions found in
          java.lang.Math, but this has been deprecated.
          These operations provide the means to compute the log, sine, tangent,
          and other complex values :";;0;;;27;81;27;78;26;15;25;7;10504;2;"ComplexUtils";"org.apache.commons.math3.complex.ComplexUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
162;514;21046;0;;"javaclass";150;150;514;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[9]/a";0;0;8;2;"AggregateSummaryStatistics";"d";2;2;;"f";77;"AggregateSummaryStatistics.  This class can be used to concurrently";"SummaryStatistics can be aggregated using 
          
          AggregateSummaryStatistics.  This class can be used to concurrently
          gather statistics for multiple datasets as well as for a combined sample
          including all of the data.";;0;;;27;71;27;69;26;14;25;7;21046;2;"AggregateSummaryStatistics";"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
163;516;20981;0;;"javaclass";151;151;516;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[10]/tt[1]";0;0;8;2;"MultivariateSummaryStatistics";"d";2;2;;"f";78;"MultivariateSummaryStatistics is similar to";"MultivariateSummaryStatistics is similar to
           SummaryStatistics but handles n-tuple values instead of
           scalar values. It can also compute the full covariance matrix for the
           input data.";;0;;;27;71;27;69;26;14;25;7;20981;2;"MultivariateSummaryStatistics";"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
398;517;10554;0;;"javageneric";365;365;517;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[4]/p[1]/tt[1]";0;0;8;2;"Complex";"d";30;30;;"f";69;"Complex instances can be converted to and from strings";"Complex instances can be converted to and from strings
          using the
          ComplexFormat class.
          ComplexFormat is a java.text.Format
          extension and, as such, is used like other formatting objects (e.g.
          java.text.SimpleDateFormat):";;0;;;27;82;27;78;26;15;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
164;518;20756;0;;"javaclass";152;152;518;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[10]/tt[2]";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";79;"SummaryStatistics but handles n-tuple values instead of";"MultivariateSummaryStatistics is similar to
           SummaryStatistics but handles n-tuple values instead of
           scalar values. It can also compute the full covariance matrix for the
           input data.";;0;;;27;71;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
165;519;10522;0;;"javaclass";153;153;519;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[4]/p[1]/a";0;0;8;2;"ComplexFormat";"d";2;2;;"f";70;"ComplexFormat class.";"Complex instances can be converted to and from strings
          using the
          ComplexFormat class.
          ComplexFormat is a java.text.Format
          extension and, as such, is used like other formatting objects (e.g.
          java.text.SimpleDateFormat):";;0;;;27;82;27;78;26;15;25;7;10522;2;"ComplexFormat";"org.apache.commons.math3.complex.ComplexFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
166;520;20721;0;;"javaclass";154;154;520;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[11]/tt[1]";0;0;8;2;"DescriptiveStatistics";"d";2;2;;"f";80;"Neither DescriptiveStatistics nor SummaryStatistics";"Neither DescriptiveStatistics nor SummaryStatistics
           is thread-safe.
           
           SynchronizedDescriptiveStatistics and
            
           SynchronizedSummaryStatistics, respectively, provide thread-safe
           versions for applications that require concurrent access to statistical
           aggregates by multiple threads.
            
           SynchronizedMultivariateSummaryStatistics provides thread-safe
           MultivariateSummaryStatistics.";;0;;;27;71;27;69;26;14;25;7;20721;2;"DescriptiveStatistics";"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
167;521;10522;0;;"javaclass";155;155;521;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[4]/p[1]/tt[2]";0;0;8;2;"ComplexFormat";"d";2;2;;"f";71;"ComplexFormat is a java.";"Complex instances can be converted to and from strings
          using the
          ComplexFormat class.
          ComplexFormat is a java.text.Format
          extension and, as such, is used like other formatting objects (e.g.
          java.text.SimpleDateFormat):";;0;;;27;82;27;78;26;15;25;7;10522;2;"ComplexFormat";"org.apache.commons.math3.complex.ComplexFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
168;522;20756;0;;"javaclass";156;156;522;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[11]/tt[2]";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";81;"Neither DescriptiveStatistics nor SummaryStatistics";"Neither DescriptiveStatistics nor SummaryStatistics
           is thread-safe.
           
           SynchronizedDescriptiveStatistics and
            
           SynchronizedSummaryStatistics, respectively, provide thread-safe
           versions for applications that require concurrent access to statistical
           aggregates by multiple threads.
            
           SynchronizedMultivariateSummaryStatistics provides thread-safe
           MultivariateSummaryStatistics.";;0;;;27;71;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
169;524;21057;0;;"javaclass";157;157;524;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[11]/a[1]";0;0;8;2;"SynchronizedDescriptiveStatistics";"d";2;2;;"f";82;"SynchronizedDescriptiveStatistics and";"Neither DescriptiveStatistics nor SummaryStatistics
           is thread-safe.
           
           SynchronizedDescriptiveStatistics and
            
           SynchronizedSummaryStatistics, respectively, provide thread-safe
           versions for applications that require concurrent access to statistical
           aggregates by multiple threads.
            
           SynchronizedMultivariateSummaryStatistics provides thread-safe
           MultivariateSummaryStatistics.";;0;;;27;71;27;69;26;14;25;7;21057;2;"SynchronizedDescriptiveStatistics";"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
170;526;20948;0;;"javaclass";158;158;526;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[11]/a[2]";0;0;8;2;"SynchronizedSummaryStatistics";"d";2;2;;"f";83;"SynchronizedSummaryStatistics, respectively, provide thread-safe";"Neither DescriptiveStatistics nor SummaryStatistics
           is thread-safe.
           
           SynchronizedDescriptiveStatistics and
            
           SynchronizedSummaryStatistics, respectively, provide thread-safe
           versions for applications that require concurrent access to statistical
           aggregates by multiple threads.
            
           SynchronizedMultivariateSummaryStatistics provides thread-safe
           MultivariateSummaryStatistics.";;0;;;27;71;27;69;26;14;25;7;20948;2;"SynchronizedSummaryStatistics";"org.apache.commons.math3.stat.descriptive.SynchronizedSummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
171;527;20773;0;;"javaclass";159;159;527;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[11]/a[3]";0;0;8;2;"SynchronizedMultivariateSummaryStatistics";"d";2;2;;"f";84;"SynchronizedMultivariateSummaryStatistics provides thread-safe";"Neither DescriptiveStatistics nor SummaryStatistics
           is thread-safe.
           
           SynchronizedDescriptiveStatistics and
            
           SynchronizedSummaryStatistics, respectively, provide thread-safe
           versions for applications that require concurrent access to statistical
           aggregates by multiple threads.
            
           SynchronizedMultivariateSummaryStatistics provides thread-safe
           MultivariateSummaryStatistics.";;0;;;27;71;27;69;26;14;25;7;20773;2;"SynchronizedMultivariateSummaryStatistics";"org.apache.commons.math3.stat.descriptive.SynchronizedMultivariateSummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
172;529;20981;0;;"javaclass";160;160;529;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[11]/tt[3]";0;0;8;2;"MultivariateSummaryStatistics";"d";2;2;;"f";85;"MultivariateSummaryStatistics.";"Neither DescriptiveStatistics nor SummaryStatistics
           is thread-safe.
           
           SynchronizedDescriptiveStatistics and
            
           SynchronizedSummaryStatistics, respectively, provide thread-safe
           versions for applications that require concurrent access to statistical
           aggregates by multiple threads.
            
           SynchronizedMultivariateSummaryStatistics provides thread-safe
           MultivariateSummaryStatistics.";;0;;;27;71;27;69;26;14;25;7;20981;2;"MultivariateSummaryStatistics";"org.apache.commons.math3.stat.descriptive.MultivariateSummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
173;530;10522;0;;"javaclass";161;161;530;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[4]/p[2]/tt[2]";0;0;8;2;"ComplexFormat";"d";2;2;;"f";75;"a ComplexFormat.";"To customize the formatting output, one or two
          java.text.NumberFormat instances can be used to construct
          a ComplexFormat.  These number formats control the
          formatting of the real and imaginary values of the complex number:";;0;;;27;82;27;78;26;15;25;7;10522;2;"ComplexFormat";"org.apache.commons.math3.complex.ComplexFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
174;531;10522;0;;"javaclass";162;162;531;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[4]/p[3]/tt[1]";0;0;8;2;"ComplexFormat";"d";2;2;;"f";76;"ComplexFormat is the text used for the imaginary";"Another formatting customization provided by
          ComplexFormat is the text used for the imaginary
          designation.  By default, the imaginary notation is ""i"" but, it can be
          manipulated using the setImaginaryCharacter method.";;0;;;27;82;27;78;26;15;25;7;10522;2;"ComplexFormat";"org.apache.commons.math3.complex.ComplexFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
175;532;20394;0;;"javaclass";163;163;532;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[12]/a";0;0;8;2;"StatUtils";"d";2;2;;"f";86;"StatUtils, that provides static methods for computing statistics";"There is also a utility class,
          
          StatUtils, that provides static methods for computing statistics
          directly from double[] arrays.";;0;;;27;71;27;69;26;14;25;7;20394;2;"StatUtils";"org.apache.commons.math3.stat.StatUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
176;534;20721;0;;"javaclass";164;164;534;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[1]/tt";0;0;8;2;"DescriptiveStatistics";"d";2;2;;"f";87;"Using the DescriptiveStatistics aggregate";"Using the DescriptiveStatistics aggregate
          (values are stored in memory):
        
// Get a DescriptiveStatistics instance
DescriptiveStatistics stats = new DescriptiveStatistics();

// Add the data from the array
for( int i = 0; i < inputArray.length; i++) {
        stats.addValue(inputArray[i]);
}

// Compute some statistics
double mean = stats.getMean();
double std = stats.getStandardDeviation();
double median = stats.getPercentile(50);";;0;;;27;71;27;69;26;14;25;7;20721;2;"DescriptiveStatistics";"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
177;535;10522;0;;"javaclass";165;165;535;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[4]/p[4]/tt[1]";0;0;8;2;"ComplexFormat";"d";2;2;;"f";78;"ComplexFormat.";"Formatting inverse operation, parsing, can also be performed by
          ComplexFormat.  Parse a complex number from a string,
          simply call the parse method:";;0;;;27;82;27;78;26;15;25;7;10522;2;"ComplexFormat";"org.apache.commons.math3.complex.ComplexFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
178;536;20756;0;;"javaclass";166;166;536;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[2]/tt";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";88;"Using the SummaryStatistics aggregate (values are";"Using the SummaryStatistics aggregate (values are
        not stored in memory):
       
// Get a SummaryStatistics instance
SummaryStatistics stats = new SummaryStatistics();

// Read data from an input stream,
// adding values and updating sums, counters, etc.
while (line != null) {
        line = in.readLine();
        stats.addValue(Double.parseDouble(line.trim()));
}
in.close();

// Compute the statistics
double mean = stats.getMean();
double std = stats.getStandardDeviation();
//double median = stats.getMedian(); <-- NOT AVAILABLE";;0;;;27;71;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
179;538;20394;0;;"javaclass";167;167;538;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[3]/tt";0;0;8;2;"StatUtils";"d";2;2;;"f";89;"Using the StatUtils utility class:";"Using the StatUtils utility class:
       
// Compute statistics directly from the array
// assume values is a double[] array
double mean = StatUtils.mean(values);
double std = StatUtils.variance(values);
double median = StatUtils.percentile(values, 50);

// Compute the mean of the first three values in the array
mean = StatUtils.mean(values, 0, 3);";;0;;;27;71;27;69;26;14;25;7;20394;2;"StatUtils";"org.apache.commons.math3.stat.StatUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
180;539;20721;0;;"javaclass";168;168;539;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[4]/tt";0;0;8;2;"DescriptiveStatistics";"d";2;2;;"f";90;"Use a DescriptiveStatistics instance with";"Use a DescriptiveStatistics instance with
        window size set to 100
        
// Create a DescriptiveStats instance and set the window size to 100
DescriptiveStatistics stats = new DescriptiveStatistics();
stats.setWindowSize(100);

// Read data from an input stream,
// displaying the mean of the most recent 100 observations
// after every 100 observations
long nLines = 0;
while (line != null) {
        line = in.readLine();
        stats.addValue(Double.parseDouble(line.trim()));
        if (nLines == 100) {
                nLines = 0;
                System.out.println(stats.getMean());
       }
}
in.close();";;0;;;27;71;27;69;26;14;25;7;20721;2;"DescriptiveStatistics";"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
181;540;21057;0;;"javaclass";169;169;540;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[5]/tt";0;0;8;2;"SynchronizedDescriptiveStatistics";"d";2;2;;"f";91;"Use a SynchronizedDescriptiveStatistics instance";"Use a SynchronizedDescriptiveStatistics instance
        
// Create a SynchronizedDescriptiveStatistics instance and
// use as any other DescriptiveStatistics instance
DescriptiveStatistics stats = new SynchronizedDescriptiveStatistics();";;0;;;27;71;27;69;26;14;25;7;21057;2;"SynchronizedDescriptiveStatistics";"org.apache.commons.math3.stat.descriptive.SynchronizedDescriptiveStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
182;541;21046;0;;"javaclass";170;170;541;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[6]/tt[1]";0;0;8;2;"AggregateSummaryStatistics";"d";2;2;;"f";92;"There are two ways to do this using AggregateSummaryStatistics.";"There are two ways to do this using AggregateSummaryStatistics. 
        The first is to use an AggregateSummaryStatistics instance
        to accumulate overall statistics contributed by SummaryStatistics
        instances created using
        
        AggregateSummaryStatistics.createContributingStatistics():
        
// Create a AggregateSummaryStatistics instance to accumulate the overall statistics 
// and AggregatingSummaryStatistics for the subsamples
AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();
SummaryStatistics setOneStats = aggregate.createContributingStatistics();
SummaryStatistics setTwoStats = aggregate.createContributingStatistics();
// Add values to the subsample aggregates
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Full sample data is reported by the aggregate
double totalSampleSum = aggregate.getSum();
        
        The above approach has the disadvantages that the addValue calls must be synchronized on the
        SummaryStatistics instance maintained by the aggregate and each value addition updates the
        aggregate as well as the subsample. For applications that can wait to do the aggregation until all values
        have been added, a static
        
          aggregate method is available, as shown in the following example.
        This method should be used when aggregation needs to be done across threads.
        
// Create SummaryStatistics instances for the subsample data
SummaryStatistics setOneStats = new SummaryStatistics();
SummaryStatistics setTwoStats = new SummaryStatistics();
// Add values to the subsample SummaryStatistics instances
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Aggregate the subsample statistics
Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();
aggregate.add(setOneStats);
aggregate.add(setTwoStats);
StatisticalSummary aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);

// Full sample data is reported by aggregatedStats
double totalSampleSum = aggregatedStats.getSum();";;0;;;27;71;27;69;26;14;25;7;21046;2;"AggregateSummaryStatistics";"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
183;542;21046;0;;"javaclass";171;171;542;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[6]/tt[2]";0;0;8;2;"AggregateSummaryStatistics";"d";2;2;;"f";93;"The first is to use an AggregateSummaryStatistics instance";"There are two ways to do this using AggregateSummaryStatistics. 
        The first is to use an AggregateSummaryStatistics instance
        to accumulate overall statistics contributed by SummaryStatistics
        instances created using
        
        AggregateSummaryStatistics.createContributingStatistics():
        
// Create a AggregateSummaryStatistics instance to accumulate the overall statistics 
// and AggregatingSummaryStatistics for the subsamples
AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();
SummaryStatistics setOneStats = aggregate.createContributingStatistics();
SummaryStatistics setTwoStats = aggregate.createContributingStatistics();
// Add values to the subsample aggregates
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Full sample data is reported by the aggregate
double totalSampleSum = aggregate.getSum();
        
        The above approach has the disadvantages that the addValue calls must be synchronized on the
        SummaryStatistics instance maintained by the aggregate and each value addition updates the
        aggregate as well as the subsample. For applications that can wait to do the aggregation until all values
        have been added, a static
        
          aggregate method is available, as shown in the following example.
        This method should be used when aggregation needs to be done across threads.
        
// Create SummaryStatistics instances for the subsample data
SummaryStatistics setOneStats = new SummaryStatistics();
SummaryStatistics setTwoStats = new SummaryStatistics();
// Add values to the subsample SummaryStatistics instances
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Aggregate the subsample statistics
Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();
aggregate.add(setOneStats);
aggregate.add(setTwoStats);
StatisticalSummary aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);

// Full sample data is reported by aggregatedStats
double totalSampleSum = aggregatedStats.getSum();";;0;;;27;71;27;69;26;14;25;7;21046;2;"AggregateSummaryStatistics";"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
184;543;20756;0;;"javaclass";172;172;543;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[6]/tt[3]";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";94;"to accumulate overall statistics contributed by SummaryStatistics";"There are two ways to do this using AggregateSummaryStatistics. 
        The first is to use an AggregateSummaryStatistics instance
        to accumulate overall statistics contributed by SummaryStatistics
        instances created using
        
        AggregateSummaryStatistics.createContributingStatistics():
        
// Create a AggregateSummaryStatistics instance to accumulate the overall statistics 
// and AggregatingSummaryStatistics for the subsamples
AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();
SummaryStatistics setOneStats = aggregate.createContributingStatistics();
SummaryStatistics setTwoStats = aggregate.createContributingStatistics();
// Add values to the subsample aggregates
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Full sample data is reported by the aggregate
double totalSampleSum = aggregate.getSum();
        
        The above approach has the disadvantages that the addValue calls must be synchronized on the
        SummaryStatistics instance maintained by the aggregate and each value addition updates the
        aggregate as well as the subsample. For applications that can wait to do the aggregation until all values
        have been added, a static
        
          aggregate method is available, as shown in the following example.
        This method should be used when aggregation needs to be done across threads.
        
// Create SummaryStatistics instances for the subsample data
SummaryStatistics setOneStats = new SummaryStatistics();
SummaryStatistics setTwoStats = new SummaryStatistics();
// Add values to the subsample SummaryStatistics instances
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Aggregate the subsample statistics
Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();
aggregate.add(setOneStats);
aggregate.add(setTwoStats);
StatisticalSummary aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);

// Full sample data is reported by aggregatedStats
double totalSampleSum = aggregatedStats.getSum();";;0;;;27;71;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
185;545;21046;0;;"javaclass";173;173;545;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[6]/a[1]";0;0;8;2;"AggregateSummaryStatistics.createContributingStatistics()";"d";2;2;;"f";95;"AggregateSummaryStatistics.createContributingStatistics():";"There are two ways to do this using AggregateSummaryStatistics. 
        The first is to use an AggregateSummaryStatistics instance
        to accumulate overall statistics contributed by SummaryStatistics
        instances created using
        
        AggregateSummaryStatistics.createContributingStatistics():
        
// Create a AggregateSummaryStatistics instance to accumulate the overall statistics 
// and AggregatingSummaryStatistics for the subsamples
AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();
SummaryStatistics setOneStats = aggregate.createContributingStatistics();
SummaryStatistics setTwoStats = aggregate.createContributingStatistics();
// Add values to the subsample aggregates
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Full sample data is reported by the aggregate
double totalSampleSum = aggregate.getSum();
        
        The above approach has the disadvantages that the addValue calls must be synchronized on the
        SummaryStatistics instance maintained by the aggregate and each value addition updates the
        aggregate as well as the subsample. For applications that can wait to do the aggregation until all values
        have been added, a static
        
          aggregate method is available, as shown in the following example.
        This method should be used when aggregation needs to be done across threads.
        
// Create SummaryStatistics instances for the subsample data
SummaryStatistics setOneStats = new SummaryStatistics();
SummaryStatistics setTwoStats = new SummaryStatistics();
// Add values to the subsample SummaryStatistics instances
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Aggregate the subsample statistics
Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();
aggregate.add(setOneStats);
aggregate.add(setTwoStats);
StatisticalSummary aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);

// Full sample data is reported by aggregatedStats
double totalSampleSum = aggregatedStats.getSum();";;0;;;27;71;27;69;26;14;25;7;21046;2;"AggregateSummaryStatistics";"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
347;546;21072;0;;"javamethod";320;320;546;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[6]/a[1]";0;0;8;2;"AggregateSummaryStatistics.createContributingStatistics()";"d";5;5;;"f";95;"AggregateSummaryStatistics.createContributingStatistics():";"There are two ways to do this using AggregateSummaryStatistics. 
        The first is to use an AggregateSummaryStatistics instance
        to accumulate overall statistics contributed by SummaryStatistics
        instances created using
        
        AggregateSummaryStatistics.createContributingStatistics():
        
// Create a AggregateSummaryStatistics instance to accumulate the overall statistics 
// and AggregatingSummaryStatistics for the subsamples
AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();
SummaryStatistics setOneStats = aggregate.createContributingStatistics();
SummaryStatistics setTwoStats = aggregate.createContributingStatistics();
// Add values to the subsample aggregates
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Full sample data is reported by the aggregate
double totalSampleSum = aggregate.getSum();
        
        The above approach has the disadvantages that the addValue calls must be synchronized on the
        SummaryStatistics instance maintained by the aggregate and each value addition updates the
        aggregate as well as the subsample. For applications that can wait to do the aggregation until all values
        have been added, a static
        
          aggregate method is available, as shown in the following example.
        This method should be used when aggregation needs to be done across threads.
        
// Create SummaryStatistics instances for the subsample data
SummaryStatistics setOneStats = new SummaryStatistics();
SummaryStatistics setTwoStats = new SummaryStatistics();
// Add values to the subsample SummaryStatistics instances
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Aggregate the subsample statistics
Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();
aggregate.add(setOneStats);
aggregate.add(setTwoStats);
StatisticalSummary aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);

// Full sample data is reported by aggregatedStats
double totalSampleSum = aggregatedStats.getSum();";545;0;;;27;71;27;69;26;14;25;7;21072;2;"createContributingStatistics";"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.createContributingStatistics";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
186;550;20756;0;;"javaclass";174;174;550;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[6]/tt[5]";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";97;"// and AggregatingSummaryStatistics for the subsamples";"There are two ways to do this using AggregateSummaryStatistics. 
        The first is to use an AggregateSummaryStatistics instance
        to accumulate overall statistics contributed by SummaryStatistics
        instances created using
        
        AggregateSummaryStatistics.createContributingStatistics():
        
// Create a AggregateSummaryStatistics instance to accumulate the overall statistics 
// and AggregatingSummaryStatistics for the subsamples
AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();
SummaryStatistics setOneStats = aggregate.createContributingStatistics();
SummaryStatistics setTwoStats = aggregate.createContributingStatistics();
// Add values to the subsample aggregates
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Full sample data is reported by the aggregate
double totalSampleSum = aggregate.getSum();
        
        The above approach has the disadvantages that the addValue calls must be synchronized on the
        SummaryStatistics instance maintained by the aggregate and each value addition updates the
        aggregate as well as the subsample. For applications that can wait to do the aggregation until all values
        have been added, a static
        
          aggregate method is available, as shown in the following example.
        This method should be used when aggregation needs to be done across threads.
        
// Create SummaryStatistics instances for the subsample data
SummaryStatistics setOneStats = new SummaryStatistics();
SummaryStatistics setTwoStats = new SummaryStatistics();
// Add values to the subsample SummaryStatistics instances
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Aggregate the subsample statistics
Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();
aggregate.add(setOneStats);
aggregate.add(setTwoStats);
StatisticalSummary aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);

// Full sample data is reported by aggregatedStats
double totalSampleSum = aggregatedStats.getSum();";;0;;;27;71;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
452;553;21065;0;;"javageneric";401;401;553;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[6]/a[2]";0;0;8;2;"aggregate";"d";30;30;;"f";98;"SummaryStatistics setOneStats = aggregate.";"There are two ways to do this using AggregateSummaryStatistics. 
        The first is to use an AggregateSummaryStatistics instance
        to accumulate overall statistics contributed by SummaryStatistics
        instances created using
        
        AggregateSummaryStatistics.createContributingStatistics():
        
// Create a AggregateSummaryStatistics instance to accumulate the overall statistics 
// and AggregatingSummaryStatistics for the subsamples
AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();
SummaryStatistics setOneStats = aggregate.createContributingStatistics();
SummaryStatistics setTwoStats = aggregate.createContributingStatistics();
// Add values to the subsample aggregates
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Full sample data is reported by the aggregate
double totalSampleSum = aggregate.getSum();
        
        The above approach has the disadvantages that the addValue calls must be synchronized on the
        SummaryStatistics instance maintained by the aggregate and each value addition updates the
        aggregate as well as the subsample. For applications that can wait to do the aggregation until all values
        have been added, a static
        
          aggregate method is available, as shown in the following example.
        This method should be used when aggregation needs to be done across threads.
        
// Create SummaryStatistics instances for the subsample data
SummaryStatistics setOneStats = new SummaryStatistics();
SummaryStatistics setTwoStats = new SummaryStatistics();
// Add values to the subsample SummaryStatistics instances
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Aggregate the subsample statistics
Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();
aggregate.add(setOneStats);
aggregate.add(setTwoStats);
StatisticalSummary aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);

// Full sample data is reported by aggregatedStats
double totalSampleSum = aggregatedStats.getSum();";;0;;;27;71;27;69;26;14;25;7;21065;2;"aggregate";"org.apache.commons.math3.stat.descriptive.AggregateSummaryStatistics.aggregate";5;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
399;554;20382;0;;"javageneric";366;366;554;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[3]/p[1]/a";0;0;8;2;"Frequency";"d";30;30;;"f";100;"Frequency";"Frequency
          provides a simple interface for maintaining counts and percentages of discrete
          values.";;0;;;27;72;27;69;26;14;25;7;20382;2;"Frequency";"org.apache.commons.math3.stat.Frequency";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
187;562;22101;0;;"javaclass";175;175;562;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[4]/p[1]/a";0;0;8;2;"SimpleRegression";"d";2;2;;"f";105;"SimpleRegression provides ordinary least squares regression with";"SimpleRegression provides ordinary least squares regression with
         one independent variable estimating the linear model:";;0;;;27;73;27;69;26;14;25;7;22101;2;"SimpleRegression";"org.apache.commons.math3.stat.regression.SimpleRegression";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
354;569;22107;0;;"javamethod";327;327;569;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[4]/ul[1]/li[3]/a";0;0;8;2;"SimpleRegression(boolean)";"d";5;5;;"f";112;"SimpleRegression(boolean) constructor.";"The intercept term may be suppressed by passing false to the
           
           SimpleRegression(boolean) constructor.  When the hasIntercept
           property is false, the model is estimated without a constant term and
           getIntercept() returns 0.";;0;;;27;73;27;69;26;14;25;7;22107;2;"SimpleRegression";"org.apache.commons.math3.stat.regression.SimpleRegression.SimpleRegression";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
453;570;22212;0;;"javageneric";402;402;570;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[4]/ul[1]/li[3]/tt[2]";0;0;8;2;"hasIntercept";"d";2;30;;"f";113;"When the hasIntercept";"The intercept term may be suppressed by passing false to the
           
           SimpleRegression(boolean) constructor.  When the hasIntercept
           property is false, the model is estimated without a constant term and
           getIntercept() returns 0.";;0;;;27;73;27;69;26;14;25;7;22212;2;"hasIntercept";"org.apache.commons.math3.stat.regression.SimpleRegression.hasIntercept";5;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
355;571;22137;0;;"javamethod";328;328;571;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[4]/ul[1]/li[3]/tt[3]";0;0;8;2;"getIntercept()";"d";5;5;;"f";114;"getIntercept() returns 0.";"The intercept term may be suppressed by passing false to the
           
           SimpleRegression(boolean) constructor.  When the hasIntercept
           property is false, the model is estimated without a constant term and
           getIntercept() returns 0.";;0;;;27;73;27;69;26;14;25;7;22137;2;"getIntercept";"org.apache.commons.math3.stat.regression.SimpleRegression.getIntercept";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
188;573;22021;0;;"javaclass";176;176;573;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[1]/a[1]";0;0;8;2;"OLSMultipleLinearRegression";"d";2;2;;"f";118;"OLSMultipleLinearRegression and";"OLSMultipleLinearRegression and
         
         GLSMultipleLinearRegression provide least squares regression to fit the linear model:";;0;;;27;74;27;69;26;14;25;7;22021;2;"OLSMultipleLinearRegression";"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
189;576;22056;0;;"javaclass";177;177;576;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[1]/a[2]";0;0;8;2;"GLSMultipleLinearRegression";"d";2;2;;"f";119;"GLSMultipleLinearRegression provide least squares regression to fit the linear model:";"OLSMultipleLinearRegression and
         
         GLSMultipleLinearRegression provide least squares regression to fit the linear model:";;0;;;27;74;27;69;26;14;25;7;22056;2;"GLSMultipleLinearRegression";"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
190;579;22021;0;;"javaclass";178;178;579;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[4]/a[1]";0;0;8;2;"OLSMultipleLinearRegression";"d";2;2;;"f";121;"OLSMultipleLinearRegression provides Ordinary Least Squares Regression, and";"OLSMultipleLinearRegression provides Ordinary Least Squares Regression, and 
          
          GLSMultipleLinearRegression implements Generalized Least Squares.  See the javadoc for these
          classes for details on the algorithms and forumlas used.";;0;;;27;74;27;69;26;14;25;7;22021;2;"OLSMultipleLinearRegression";"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
191;580;10554;0;;"javaclass";179;179;580;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div";0;0;8;2;"Complex";"d";2;2;;"f";-100000;"7 Complex Numbers";"7 Complex Numbers";;0;27;78;27;78;;;26;15;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
192;582;22056;0;;"javaclass";180;180;582;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[4]/a[2]";0;0;8;2;"GLSMultipleLinearRegression";"d";2;2;;"f";122;"GLSMultipleLinearRegression implements Generalized Least Squares.";"OLSMultipleLinearRegression provides Ordinary Least Squares Regression, and 
          
          GLSMultipleLinearRegression implements Generalized Least Squares.  See the javadoc for these
          classes for details on the algorithms and forumlas used.";;0;;;27;74;27;69;26;14;25;7;22056;2;"GLSMultipleLinearRegression";"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
193;585;22100;0;;"javaclass";181;181;585;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[5]/a[1]";0;0;8;2;"AbstractMultipleLinearRegression";"d";2;2;;"f";123;"AbstractMultipleLinearRegression#newSampleData(double[],int,int),";"Data for OLS models can be loaded in a single double[] array, consisting of concatenated rows of data, each containing
           the regressand (Y) value, followed by regressor values; or using a double[][] array with rows corresponding to
           observations. GLS models also require a double[][] array representing the covariance matrix of the error terms.  See
           
           AbstractMultipleLinearRegression#newSampleData(double[],int,int),  
           
           OLSMultipleLinearRegression#newSampleData(double[], double[][]) and 
           
           GLSMultipleLinearRegression#newSampleData(double[],double[][],double[][]) for details.";;0;;;27;74;27;69;26;14;25;7;22100;2;"AbstractMultipleLinearRegression";"org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
194;589;10554;0;;"javaclass";182;182;589;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[2]";0;0;8;2;"Complex";"d";2;2;;"f";-100000;"7.2 Complex Numbers";"7.2 Complex Numbers";;0;27;80;27;80;27;78;26;15;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
195;592;22021;0;;"javaclass";183;183;592;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[5]/a[2]";0;0;8;2;"OLSMultipleLinearRegression";"d";2;2;;"f";124;"OLSMultipleLinearRegression#newSampleData(double[], double[][]) and";"Data for OLS models can be loaded in a single double[] array, consisting of concatenated rows of data, each containing
           the regressand (Y) value, followed by regressor values; or using a double[][] array with rows corresponding to
           observations. GLS models also require a double[][] array representing the covariance matrix of the error terms.  See
           
           AbstractMultipleLinearRegression#newSampleData(double[],int,int),  
           
           OLSMultipleLinearRegression#newSampleData(double[], double[][]) and 
           
           GLSMultipleLinearRegression#newSampleData(double[],double[][],double[][]) for details.";;0;;;27;74;27;69;26;14;25;7;22021;2;"OLSMultipleLinearRegression";"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
196;596;10554;0;;"javaclass";184;184;596;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[3]";0;0;8;2;"Complex";"d";2;2;;"f";-100000;"7.3 Complex Transcendental Functions";"7.3 Complex Transcendental Functions";;0;27;81;27;81;27;78;26;15;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
197;599;22056;0;;"javaclass";185;185;599;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[5]/a[3]";0;0;8;2;"GLSMultipleLinearRegression";"d";2;2;;"f";125;"GLSMultipleLinearRegression#newSampleData(double[],double[][],double[][]) for details.";"Data for OLS models can be loaded in a single double[] array, consisting of concatenated rows of data, each containing
           the regressand (Y) value, followed by regressor values; or using a double[][] array with rows corresponding to
           observations. GLS models also require a double[][] array representing the covariance matrix of the error terms.  See
           
           AbstractMultipleLinearRegression#newSampleData(double[],int,int),  
           
           OLSMultipleLinearRegression#newSampleData(double[], double[][]) and 
           
           GLSMultipleLinearRegression#newSampleData(double[],double[][],double[][]) for details.";;0;;;27;74;27;69;26;14;25;7;22056;2;"GLSMultipleLinearRegression";"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
198;603;10554;0;;"javaclass";186;186;603;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[4]";0;0;8;2;"Complex";"d";2;2;;"f";-100000;"7.4 Complex Formatting and Parsing";"7.4 Complex Formatting and Parsing";;0;27;82;27;82;27;78;26;15;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
199;612;21939;0;;"javaclass";187;187;612;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[6]/p[1]/a[2]";0;0;8;2;"RankingAlgorithm";"d";2;2;;"f";131;"RankingAlgorithm defines the interface for ranking.";"Some statistical algorithms require that input data be replaced by ranks.
         The 
         org.apache.commons.math3.stat.ranking package provides rank transformation.
         
         RankingAlgorithm defines the interface for ranking.  
         
         NaturalRanking provides an implementation that has two configuration options.";;0;;;27;75;27;69;26;14;25;7;21939;2;"RankingAlgorithm";"org.apache.commons.math3.stat.ranking.RankingAlgorithm";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
200;613;21845;0;;"javaclass";188;188;613;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[6]/p[1]/a[3]";0;0;8;2;"NaturalRanking";"d";2;2;;"f";132;"NaturalRanking provides an implementation that has two configuration options.";"Some statistical algorithms require that input data be replaced by ranks.
         The 
         org.apache.commons.math3.stat.ranking package provides rank transformation.
         
         RankingAlgorithm defines the interface for ranking.  
         
         NaturalRanking provides an implementation that has two configuration options.";;0;;;27;75;27;69;26;14;25;7;21845;2;"NaturalRanking";"org.apache.commons.math3.stat.ranking.NaturalRanking";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
201;624;21896;0;;"javaclass";189;189;624;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[6]/p[3]/tt[1]";0;0;8;2;"NaNStrategy";"d";2;2;;"f";138;"The default NaNStrategy is NaNStrategy.";"The default NaNStrategy is NaNStrategy.MAXIMAL.  This makes NaN
        values larger than any other value (including Double.POSITIVE_INFINITY). The
        default TiesStrategy is TiesStrategy.AVERAGE, which assigns tied
        values the average of the ranks applicable to the sequence of ties.  See the 
        
        NaturalRanking for more examples and 
        TiesStrategy and NaNStrategy
        for details on these configuration options.";;0;;;27;75;27;69;26;14;25;7;21896;2;"NaNStrategy";"org.apache.commons.math3.stat.ranking.NaNStrategy";4;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
400;625;13003;0;;"javageneric";367;367;625;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[1]";0;0;8;2;"Interval";"d";30;30;;"f";55;"Interval and";"Interval and 
          IntervalsSet represent one dimensional regions. All classical set operations are available
          for intervals sets: union, intersection, symmetric difference (exclusive or), difference, complement,
          as well as region predicates (point inside/outside/on boundary, emptiness, other region contained).
          It is also possible to compute geometrical properties like size, barycenter or boundary size.
          Intervals sets can be built by constructive geometry (union, intersection ...) or from a boundary
          representation.";;0;;;27;85;27;83;26;16;25;7;13003;2;"Interval";"org.apache.commons.math3.geometry.euclidean.oned.Interval";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
202;627;13064;0;;"javaclass";190;190;627;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[1]/a[2]";0;0;8;2;"IntervalsSet";"d";2;2;;"f";56;"IntervalsSet represent one dimensional regions.";"Interval and 
          IntervalsSet represent one dimensional regions. All classical set operations are available
          for intervals sets: union, intersection, symmetric difference (exclusive or), difference, complement,
          as well as region predicates (point inside/outside/on boundary, emptiness, other region contained).
          It is also possible to compute geometrical properties like size, barycenter or boundary size.
          Intervals sets can be built by constructive geometry (union, intersection ...) or from a boundary
          representation.";;0;;;27;85;27;83;26;16;25;7;13064;2;"IntervalsSet";"org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
203;630;13587;0;;"javaclass";191;191;630;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[2]/a";0;0;8;2;"PolygonsSet";"d";2;2;;"f";57;"PolygonsSet represent two dimensional regions.";"PolygonsSet represent two dimensional regions. All classical set operations are available
          for polygons sets: union, intersection, symmetric difference (exclusive or), difference, complement,
          as well as region predicates (point inside/outside/on boundary, emptiness, other region contained).
          It is also possible to compute geometrical properties like size, barycenter or boundary size and
          to extract the vertices. Polygons sets can be built by constructive geometry (union, intersection ...)
          or from a boundary representation.";;0;;;27;85;27;83;26;16;25;7;13587;2;"PolygonsSet";"org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
204;631;13130;0;;"javaclass";192;192;631;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[3]/a";0;0;8;2;"PolyhedronsSet";"d";2;2;;"f";58;"PolyhedronsSet represent three dimensional regions.";"PolyhedronsSet represent three dimensional regions. All classical set operations are available
          for polyhedrons sets: union, intersection, symmetric difference (exclusive or), difference, complement,
          as well as region predicates (point inside/outside/on boundary, emptiness, other region contained).
          It is also possible to compute geometrical properties like size, barycenter or boundary size and
          to extract the vertices. Polyhedrons sets can be built by constructive geometry (union, intersection ...)
          or from a boundary representation.";;0;;;27;85;27;83;26;16;25;7;13130;2;"PolyhedronsSet";"org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSet";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
401;632;13344;0;;"javageneric";368;368;632;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[4]/a";0;0;8;2;"Vector3D";"d";30;30;;"f";59;"Vector3D provides a simple vector type.";"Vector3D provides a simple vector type. One important feature is
          that instances of this class are guaranteed
          to be immutable, this greatly simplifies modelling dynamical systems
          with changing states: once a vector has been computed, a reference to it
          is known to preserve its state as long as the reference itself is preserved.";;0;;;27;85;27;83;26;16;25;7;13344;2;"Vector3D";"org.apache.commons.math3.geometry.euclidean.threed.Vector3D";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
205;633;21851;0;;"javaclass";193;193;633;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[6]/p[3]/tt[4]";0;0;8;2;"TiesStrategy";"d";2;2;;"f";141;"default TiesStrategy is TiesStrategy.";"The default NaNStrategy is NaNStrategy.MAXIMAL.  This makes NaN
        values larger than any other value (including Double.POSITIVE_INFINITY). The
        default TiesStrategy is TiesStrategy.AVERAGE, which assigns tied
        values the average of the ranks applicable to the sequence of ties.  See the 
        
        NaturalRanking for more examples and 
        TiesStrategy and NaNStrategy
        for details on these configuration options.";;0;;;27;75;27;69;26;14;25;7;21851;2;"TiesStrategy";"org.apache.commons.math3.stat.ranking.TiesStrategy";4;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
206;634;13323;0;;"javaclass";194;194;634;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[7]/a";0;0;8;2;"Vector3DFormat";"d";2;2;;"f";60;"Vector3DFormat is a specialized format for formatting output or parsing";"Vector3DFormat is a specialized format for formatting output or parsing
          input with text representation of 3D vectors.";;0;;;27;85;27;83;26;16;25;7;13323;2;"Vector3DFormat";"org.apache.commons.math3.geometry.euclidean.threed.Vector3DFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
207;635;21851;0;;"javaclass";195;195;635;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[6]/p[3]/tt[5]";0;0;8;2;"TiesStrategy.AVERAGE";"d";2;2;;"f";142;"default TiesStrategy is TiesStrategy.AVERAGE, which assigns tied";"The default NaNStrategy is NaNStrategy.MAXIMAL.  This makes NaN
        values larger than any other value (including Double.POSITIVE_INFINITY). The
        default TiesStrategy is TiesStrategy.AVERAGE, which assigns tied
        values the average of the ranks applicable to the sequence of ties.  See the 
        
        NaturalRanking for more examples and 
        TiesStrategy and NaNStrategy
        for details on these configuration options.";;0;;;27;75;27;69;26;14;25;7;21851;2;"TiesStrategy";"org.apache.commons.math3.stat.ranking.TiesStrategy";4;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
295;636;21857;0;;"javafield";283;283;636;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[6]/p[3]/tt[5]";0;0;8;2;"TiesStrategy.AVERAGE";"d";8;8;;"f";142;"default TiesStrategy is TiesStrategy.AVERAGE, which assigns tied";"The default NaNStrategy is NaNStrategy.MAXIMAL.  This makes NaN
        values larger than any other value (including Double.POSITIVE_INFINITY). The
        default TiesStrategy is TiesStrategy.AVERAGE, which assigns tied
        values the average of the ranks applicable to the sequence of ties.  See the 
        
        NaturalRanking for more examples and 
        TiesStrategy and NaNStrategy
        for details on these configuration options.";635;0;;;27;75;27;69;26;14;25;7;21857;2;"AVERAGE";"org.apache.commons.math3.stat.ranking.TiesStrategy.AVERAGE";9;"f";"f";"Err:512";;0;"java";8;"field";"f";"f";"f";"f"
402;637;13134;0;;"javageneric";369;369;637;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[8]/a";0;0;8;2;"Rotation";"d";30;30;;"f";61;"Rotation represents 3D rotations.";"Rotation represents 3D rotations.
          Rotation instances are also immutable objects, as Vector3D instances.";;0;;;27;85;27;83;26;16;25;7;13134;2;"Rotation";"org.apache.commons.math3.geometry.euclidean.threed.Rotation";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
208;638;21845;0;;"javaclass";196;196;638;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[6]/p[3]/a[1]";0;0;8;2;"NaturalRanking";"d";2;2;;"f";143;"NaturalRanking for more examples and";"The default NaNStrategy is NaNStrategy.MAXIMAL.  This makes NaN
        values larger than any other value (including Double.POSITIVE_INFINITY). The
        default TiesStrategy is TiesStrategy.AVERAGE, which assigns tied
        values the average of the ranks applicable to the sequence of ties.  See the 
        
        NaturalRanking for more examples and 
        TiesStrategy and NaNStrategy
        for details on these configuration options.";;0;;;27;75;27;69;26;14;25;7;21845;2;"NaturalRanking";"org.apache.commons.math3.stat.ranking.NaturalRanking";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
403;639;13134;0;;"javageneric";370;370;639;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[9]/tt";0;0;8;2;"Rotation";"d";30;30;;"f";62;"Rotations can be represented by several different mathematical";"Rotations can be represented by several different mathematical
          entities (matrices, axe and angle, Cardan or Euler angles,
          quaternions). This class presents a higher level abstraction, more
          user-oriented and hiding implementation details. Well, for the
          curious, we use quaternions for the internal representation. The user
          can build a rotation from any of these representations, and any of
          these representations can be retrieved from a Rotation
          instance (see the various constructors and getters). In addition, a
          rotation can also be built implicitely from a set of vectors and their
          image.";;0;;;27;85;27;83;26;16;25;7;13134;2;"Rotation";"org.apache.commons.math3.geometry.euclidean.threed.Rotation";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
209;640;21851;0;;"javaclass";197;197;640;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[6]/p[3]/a[2]";0;0;8;2;"TiesStrategy";"d";2;2;;"f";144;"TiesStrategy and NaNStrategy";"The default NaNStrategy is NaNStrategy.MAXIMAL.  This makes NaN
        values larger than any other value (including Double.POSITIVE_INFINITY). The
        default TiesStrategy is TiesStrategy.AVERAGE, which assigns tied
        values the average of the ranks applicable to the sequence of ties.  See the 
        
        NaturalRanking for more examples and 
        TiesStrategy and NaNStrategy
        for details on these configuration options.";;0;;;27;75;27;69;26;14;25;7;21851;2;"TiesStrategy";"org.apache.commons.math3.stat.ranking.TiesStrategy";4;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
210;642;21896;0;;"javaclass";198;198;642;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[6]/p[3]/a[3]";0;0;8;2;"NaNStrategy";"d";2;2;;"f";145;"The default NaNStrategy is NaNStrategy.";"The default NaNStrategy is NaNStrategy.MAXIMAL.  This makes NaN
        values larger than any other value (including Double.POSITIVE_INFINITY). The
        default TiesStrategy is TiesStrategy.AVERAGE, which assigns tied
        values the average of the ranks applicable to the sequence of ties.  See the 
        
        NaturalRanking for more examples and 
        TiesStrategy and NaNStrategy
        for details on these configuration options.";;0;;;27;75;27;69;26;14;25;7;21896;2;"NaNStrategy";"org.apache.commons.math3.stat.ranking.NaNStrategy";4;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
310;647;13219;0;;"javamethod";289;289;647;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[13]/tt[4]";0;0;8;2;"applyInverseTo(Vector3D)";"d";5;5;;"f";66;"applyInverseTo(Vector3D).";"These examples show that a rotation means what the user wants it to
          mean, so this class does not push the user towards one specific
          definition and hence does not provide methods like
          projectVectorIntoDestinationFrame or
          computeTransformedDirection. It provides simpler and more
          generic methods: applyTo(Vector3D) and
          applyInverseTo(Vector3D).";;0;;;27;85;27;83;26;16;25;7;13219;2;"applyInverseTo";"org.apache.commons.math3.geometry.euclidean.threed.Rotation.applyInverseTo";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
404;648;20588;0;;"javageneric";371;371;648;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/p[1]/a[2]";0;0;8;2;"Covariance";"d";30;30;;"f";148;"Covariance computes covariances,";"The 
          org.apache.commons.math3.stat.correlation package computes covariances
          and correlations for pairs of arrays or columns of a matrix.
          
          Covariance computes covariances, 
          
          PearsonsCorrelation provides Pearson's Product-Moment correlation coefficients and
          
          SpearmansCorrelation computes Spearman's rank correlation.";;0;;;27;76;27;69;26;14;25;7;20588;2;"Covariance";"org.apache.commons.math3.stat.correlation.Covariance";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
211;650;20627;0;;"javaclass";199;199;650;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/p[1]/a[3]";0;0;8;2;"PearsonsCorrelation";"d";2;2;;"f";149;"PearsonsCorrelation provides Pearson's Product-Moment correlation coefficients and";"The 
          org.apache.commons.math3.stat.correlation package computes covariances
          and correlations for pairs of arrays or columns of a matrix.
          
          Covariance computes covariances, 
          
          PearsonsCorrelation provides Pearson's Product-Moment correlation coefficients and
          
          SpearmansCorrelation computes Spearman's rank correlation.";;0;;;27;76;27;69;26;14;25;7;20627;2;"PearsonsCorrelation";"org.apache.commons.math3.stat.correlation.PearsonsCorrelation";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
212;653;20576;0;;"javaclass";200;200;653;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/p[1]/a[4]";0;0;8;2;"SpearmansCorrelation";"d";2;2;;"f";150;"SpearmansCorrelation computes Spearman's rank correlation.";"The 
          org.apache.commons.math3.stat.correlation package computes covariances
          and correlations for pairs of arrays or columns of a matrix.
          
          Covariance computes covariances, 
          
          PearsonsCorrelation provides Pearson's Product-Moment correlation coefficients and
          
          SpearmansCorrelation computes Spearman's rank correlation.";;0;;;27;76;27;69;26;14;25;7;20576;2;"SpearmansCorrelation";"org.apache.commons.math3.stat.correlation.SpearmansCorrelation";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
323;663;13234;0;;"javamethod";299;299;663;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[14]/tt[8]";0;0;8;2;"applyInverseTo(Rotation)";"d";5;5;;"f";74;"applyInverseTo(Rotation).";"Since a rotation is basically a vectorial operator, several
          rotations can be composed together and the composite operation
          r = r1 o r2 (which means that for each
          vector u, r(u) = r1(r2(u)))
          is also a rotation. Hence we can consider that in addition to vectors, a
          rotation can be applied to other rotations as well (or to itself). With our
          previous notations, we would say we can apply r1 to
          r2 and the result we get is r =
          r1 o r2. For this purpose, the class
          provides the methods: applyTo(Rotation) and
          applyInverseTo(Rotation).";;0;;;27;85;27;83;26;16;25;7;13234;2;"applyInverseTo";"org.apache.commons.math3.geometry.euclidean.threed.Rotation.applyInverseTo";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
487;664;21398;0;;"javageneric";418;418;664;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/ul/li[1]/tt[7]";0;0;8;2;"n - 1.";"d";30;30;;"f";157;"n in place of n - 1.  Whether or not covariances are";"Unbiased covariances are given by the formula cov(X, Y) = sum [(xi - E(X))(yi - E(Y))] / (n - 1)
            where E(X) is the mean of X and E(Y)
           is the mean of the Y values. Non-bias-corrected estimates use 
           n in place of n - 1.  Whether or not covariances are
           bias-corrected is determined by the optional parameter, ""biasCorrected,"" which
           defaults to true.";;0;;;27;76;27;69;26;14;25;7;21398;2;"n";"org.apache.commons.math3.stat.descriptive.moment.FirstMoment.n";8;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
213;667;20627;0;;"javaclass";201;201;667;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/ul/li[2]/a";0;0;8;2;"PearsonsCorrelation";"d";2;2;;"f";159;"PearsonsCorrelation computes correlations defined by the formula cor(X, Y) = sum[(xi - E(X))(yi - E(Y))] / [(n - 1)s(X)s(Y)]";"PearsonsCorrelation computes correlations defined by the formula cor(X, Y) = sum[(xi - E(X))(yi - E(Y))] / [(n - 1)s(X)s(Y)]
          where E(X) and E(Y) are means of X and Y
          and s(X), s(Y) are standard deviations.";;0;;;27;76;27;69;26;14;25;7;20627;2;"PearsonsCorrelation";"org.apache.commons.math3.stat.correlation.PearsonsCorrelation";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
214;677;20576;0;;"javaclass";202;202;677;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/ul/li[3]/a[1]";0;0;8;2;"SpearmansCorrelation";"d";2;2;;"f";167;"SpearmansCorrelation applies a rank transformation to the input data and computes Pearson's";"SpearmansCorrelation applies a rank transformation to the input data and computes Pearson's
          correlation on the ranked data.  The ranking algorithm is configurable. By default, 
          
          NaturalRanking with default strategies for handling ties and NaN values is used.";;0;;;27;76;27;69;26;14;25;7;20576;2;"SpearmansCorrelation";"org.apache.commons.math3.stat.correlation.SpearmansCorrelation";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
215;678;21845;0;;"javaclass";203;203;678;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/ul/li[3]/a[2]";0;0;8;2;"NaturalRanking";"d";2;2;;"f";168;"NaturalRanking with default strategies for handling ties and NaN values is used.";"SpearmansCorrelation applies a rank transformation to the input data and computes Pearson's
          correlation on the ranked data.  The ranking algorithm is configurable. By default, 
          
          NaturalRanking with default strategies for handling ties and NaN values is used.";;0;;;27;76;27;69;26;14;25;7;21845;2;"NaturalRanking";"org.apache.commons.math3.stat.ranking.NaturalRanking";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
216;683;20627;0;;"javaclass";204;204;683;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/dl/dd[5]/tt[1]";0;0;8;2;"PearsonsCorrelation";"d";2;2;;"f";177;"PearsonsCorrelation instance";"To compute standard errors and/or significances of correlation coefficients
          associated with Pearson's correlation coefficients, start by creating a
          PearsonsCorrelation instance
          
PearsonsCorrelation correlation = new PearsonsCorrelation(data);
          
          where data is either a rectangular array or a RealMatrix.
          Then the matrix of standard errors is
          
correlation.getCorrelationStandardErrors();
          
          The formula used to compute the standard error is SEr = ((1 - r2) / (n - 2))1/2
           where r is the estimated correlation coefficient and 
          n is the number of observations in the source dataset.p-values for the (2-sided) null hypotheses that elements of
          a correlation matrix are zero populate the RealMatrix returned by
          
correlation.getCorrelationPValues()
          
          getCorrelationPValues().getEntry(i,j) is the
          probability that a random variable distributed as tn-2 takes
           a value with absolute value greater than or equal to |rij|((n - 2) / (1 - rij2))1/2,
           where rij is the estimated correlation between the ith and jth
           columns of the source array or RealMatrix. This is sometimes referred to as the 
           significance of the coefficient.
           For example, if data is a RealMatrix with 2 columns and 10 rows, then 
           
new PearsonsCorrelation(data).getCorrelationPValues().getEntry(0,1)
           
           is the significance of the Pearson's correlation coefficient between the two columns
           of data.  If this value is less than .01, we can say that the correlation
           between the two columns of data is significant at the 99% level.";;0;;;27;76;27;69;26;14;25;7;20627;2;"PearsonsCorrelation";"org.apache.commons.math3.stat.correlation.PearsonsCorrelation";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
217;685;16469;0;;"javaclass";205;205;685;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/dl/dd[5]/tt[3]";0;0;8;2;"RealMatrix";"d";2;2;;"f";179;"where data is either a rectangular array or a RealMatrix.";"To compute standard errors and/or significances of correlation coefficients
          associated with Pearson's correlation coefficients, start by creating a
          PearsonsCorrelation instance
          
PearsonsCorrelation correlation = new PearsonsCorrelation(data);
          
          where data is either a rectangular array or a RealMatrix.
          Then the matrix of standard errors is
          
correlation.getCorrelationStandardErrors();
          
          The formula used to compute the standard error is SEr = ((1 - r2) / (n - 2))1/2
           where r is the estimated correlation coefficient and 
          n is the number of observations in the source dataset.p-values for the (2-sided) null hypotheses that elements of
          a correlation matrix are zero populate the RealMatrix returned by
          
correlation.getCorrelationPValues()
          
          getCorrelationPValues().getEntry(i,j) is the
          probability that a random variable distributed as tn-2 takes
           a value with absolute value greater than or equal to |rij|((n - 2) / (1 - rij2))1/2,
           where rij is the estimated correlation between the ith and jth
           columns of the source array or RealMatrix. This is sometimes referred to as the 
           significance of the coefficient.
           For example, if data is a RealMatrix with 2 columns and 10 rows, then 
           
new PearsonsCorrelation(data).getCorrelationPValues().getEntry(0,1)
           
           is the significance of the Pearson's correlation coefficient between the two columns
           of data.  If this value is less than .01, we can say that the correlation
           between the two columns of data is significant at the 99% level.";;0;;;27;76;27;69;26;14;25;7;16469;2;"RealMatrix";"org.apache.commons.math3.linear.RealMatrix";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
363;689;20690;0;;"javamethod";333;333;689;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/dl/dd[5]/tt[7]";0;0;8;2;"getCorrelationPValues().getEntry(i,j)";"d";5;5;;"f";183;"getCorrelationPValues().getEntry(i,j) is the";"To compute standard errors and/or significances of correlation coefficients
          associated with Pearson's correlation coefficients, start by creating a
          PearsonsCorrelation instance
          
PearsonsCorrelation correlation = new PearsonsCorrelation(data);
          
          where data is either a rectangular array or a RealMatrix.
          Then the matrix of standard errors is
          
correlation.getCorrelationStandardErrors();
          
          The formula used to compute the standard error is SEr = ((1 - r2) / (n - 2))1/2
           where r is the estimated correlation coefficient and 
          n is the number of observations in the source dataset.p-values for the (2-sided) null hypotheses that elements of
          a correlation matrix are zero populate the RealMatrix returned by
          
correlation.getCorrelationPValues()
          
          getCorrelationPValues().getEntry(i,j) is the
          probability that a random variable distributed as tn-2 takes
           a value with absolute value greater than or equal to |rij|((n - 2) / (1 - rij2))1/2,
           where rij is the estimated correlation between the ith and jth
           columns of the source array or RealMatrix. This is sometimes referred to as the 
           significance of the coefficient.
           For example, if data is a RealMatrix with 2 columns and 10 rows, then 
           
new PearsonsCorrelation(data).getCorrelationPValues().getEntry(0,1)
           
           is the significance of the Pearson's correlation coefficient between the two columns
           of data.  If this value is less than .01, we can say that the correlation
           between the two columns of data is significant at the 99% level.";;0;;;27;76;27;69;26;14;25;7;20690;2;"getCorrelationPValues";"org.apache.commons.math3.stat.correlation.PearsonsCorrelation.getCorrelationPValues";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
474;690;16574;0;;"javageneric";409;409;690;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/dl/dd[5]/tt[7]";0;0;8;2;"getEntry(i,j)";"d";5;30;;"f";183;"getCorrelationPValues().getEntry(i,j) is the";"To compute standard errors and/or significances of correlation coefficients
          associated with Pearson's correlation coefficients, start by creating a
          PearsonsCorrelation instance
          
PearsonsCorrelation correlation = new PearsonsCorrelation(data);
          
          where data is either a rectangular array or a RealMatrix.
          Then the matrix of standard errors is
          
correlation.getCorrelationStandardErrors();
          
          The formula used to compute the standard error is SEr = ((1 - r2) / (n - 2))1/2
           where r is the estimated correlation coefficient and 
          n is the number of observations in the source dataset.p-values for the (2-sided) null hypotheses that elements of
          a correlation matrix are zero populate the RealMatrix returned by
          
correlation.getCorrelationPValues()
          
          getCorrelationPValues().getEntry(i,j) is the
          probability that a random variable distributed as tn-2 takes
           a value with absolute value greater than or equal to |rij|((n - 2) / (1 - rij2))1/2,
           where rij is the estimated correlation between the ith and jth
           columns of the source array or RealMatrix. This is sometimes referred to as the 
           significance of the coefficient.
           For example, if data is a RealMatrix with 2 columns and 10 rows, then 
           
new PearsonsCorrelation(data).getCorrelationPValues().getEntry(0,1)
           
           is the significance of the Pearson's correlation coefficient between the two columns
           of data.  If this value is less than .01, we can say that the correlation
           between the two columns of data is significant at the 99% level.";;0;;;27;76;27;69;26;14;25;7;16574;2;"getEntry";"org.apache.commons.math3.linear.RealMatrix.getEntry";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
218;693;12881;0;;"javaclass";206;206;693;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[3]";0;0;8;2;"Space";"d";2;2;;"f";-100000;"11.3 Binary Space Partitioning";"11.3 Binary Space Partitioning";;0;27;86;27;86;27;83;26;16;25;7;12881;2;"Space";"org.apache.commons.math3.geometry.Space";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
219;707;21642;0;;"javaclass";207;207;707;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/a[9]";0;0;8;2;"TTest";"d";2;2;;"f";206;"TTest,";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21642;2;"TTest";"org.apache.commons.math3.stat.inference.TTest";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
220;708;21615;0;;"javaclass";208;208;708;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/a[10]";0;0;8;2;"ChiSquareTest";"d";2;2;;"f";207;"ChiSquareTest,";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21615;2;"ChiSquareTest";"org.apache.commons.math3.stat.inference.ChiSquareTest";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
221;709;21736;0;;"javaclass";209;209;709;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/a[11]";0;0;8;2;"GTest";"d";2;2;;"f";208;"GTest,";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21736;2;"GTest";"org.apache.commons.math3.stat.inference.GTest";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
222;710;21711;0;;"javaclass";210;210;710;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/a[12]";0;0;8;2;"OneWayAnova";"d";2;2;;"f";209;"OneWayAnova,";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21711;2;"OneWayAnova";"org.apache.commons.math3.stat.inference.OneWayAnova";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
223;711;21598;0;;"javaclass";211;211;711;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/a[13]";0;0;8;2;"MannWhitneyUTest";"d";2;2;;"f";210;"MannWhitneyUTest, and";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21598;2;"MannWhitneyUTest";"org.apache.commons.math3.stat.inference.MannWhitneyUTest";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
224;712;21772;0;;"javaclass";212;212;712;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/a[14]";0;0;8;2;"WilcoxonSignedRankTest";"d";2;2;;"f";211;"WilcoxonSignedRankTest.";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21772;2;"WilcoxonSignedRankTest";"org.apache.commons.math3.stat.inference.WilcoxonSignedRankTest";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
225;713;21617;0;;"javaclass";213;213;713;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/a[15]";0;0;8;2;"TestUtils";"d";2;2;;"f";212;"TestUtils class provides static methods to get test instances or";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21617;2;"TestUtils";"org.apache.commons.math3.stat.inference.TestUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
226;714;21617;0;;"javaclass";214;214;714;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/tt[7]";0;0;8;2;"TestUtils";"d";2;2;;"f";213;"static methods in TestUtils to execute tests.";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21617;2;"TestUtils";"org.apache.commons.math3.stat.inference.TestUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
227;715;21617;0;;"javaclass";215;215;715;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/tt[8]";0;0;8;2;"TestUtils.getTTest()";"d";2;2;;"f";214;", TestUtils.getTTest()";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21617;2;"TestUtils";"org.apache.commons.math3.stat.inference.TestUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
405;717;21642;0;;"javageneric";372;372;717;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/p[1]/tt[9]";0;0;8;2;"TTest()";"d";5;30;;"f";215;"new TTest().";"The 
          org.apache.commons.math3.stat.inference package provides implementations for
          
          Student's t,
          
          Chi-Square, 
          G Test,
          
          One-Way ANOVA,
          
          Mann-Whitney U and
          
          Wilcoxon signed rank test statistics as well as
          
          p-values associated with t-,
          Chi-Square, G, One-Way ANOVA, Mann-Whitney U
          and Wilcoxon signed rank tests. The respective test classes are
          
          TTest,
          
          ChiSquareTest,
          
          GTest,
          
          OneWayAnova,
          
          MannWhitneyUTest, and
          
          WilcoxonSignedRankTest.          
          The 
          TestUtils class provides static methods to get test instances or
          to compute test statistics directly.  The examples below all use the
          static methods in TestUtils to execute tests.  To get
          test object instances, either use e.g., TestUtils.getTTest()
          or use the implementation constructors directly, e.g. new TTest().";;0;;;27;77;27;69;26;14;25;7;21642;2;"TTest";"org.apache.commons.math3.stat.inference.TTest";2;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
228;724;20692;0;;"javaclass";216;216;724;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[2]/a";0;0;8;2;"StatisticalSummary";"d";2;2;;"f";225;"StatisticalSummary  to a fixed value:";"To compare the mean of a dataset described by a
          
          StatisticalSummary  to a fixed value:
          
double[] observed ={1d, 2d, 3d};
double mu = 2.5d;
SummaryStatistics sampleStats = new SummaryStatistics();
for (int i = 0; i < observed.length; i++) {
    sampleStats.addValue(observed[i]);
}
System.out.println(TestUtils.t(mu, observed));";;0;;;27;77;27;69;26;14;25;7;20692;2;"StatisticalSummary";"org.apache.commons.math3.stat.descriptive.StatisticalSummary";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
229;735;21617;0;;"javaclass";217;217;735;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[5]/tt[5]";0;0;8;2;"TestUtils.pairedTTest(sample1, sample2)";"d";2;2;;"f";236;"returned by TestUtils.pairedTTest(sample1, sample2)";"Example 1: Paired test evaluating
          the null hypothesis that the mean difference between corresponding
          (paired) elements of the double[] arrays
          sample1 and sample2 is zero.
          
          To compute the t-statistic:
          
TestUtils.pairedT(sample1, sample2);
          
           
           
           To compute the p-value:
           
TestUtils.pairedTTest(sample1, sample2);
           
           
           
           To perform a fixed significance level test with alpha = .05:
           
TestUtils.pairedTTest(sample1, sample2, .05);
           
           
           The last example will return true iff the p-value
           returned by TestUtils.pairedTTest(sample1, sample2)
           is less than .05";;0;;;27;77;27;69;26;14;25;7;21617;2;"TestUtils";"org.apache.commons.math3.stat.inference.TestUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
371;736;21887;0;;"javamethod";338;338;736;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[5]/tt[5]";0;0;8;2;"TestUtils.pairedTTest(sample1, sample2)";"d";5;5;;"f";236;"returned by TestUtils.pairedTTest(sample1, sample2)";"Example 1: Paired test evaluating
          the null hypothesis that the mean difference between corresponding
          (paired) elements of the double[] arrays
          sample1 and sample2 is zero.
          
          To compute the t-statistic:
          
TestUtils.pairedT(sample1, sample2);
          
           
           
           To compute the p-value:
           
TestUtils.pairedTTest(sample1, sample2);
           
           
           
           To perform a fixed significance level test with alpha = .05:
           
TestUtils.pairedTTest(sample1, sample2, .05);
           
           
           The last example will return true iff the p-value
           returned by TestUtils.pairedTTest(sample1, sample2)
           is less than .05";735;0;;;27;77;27;69;26;14;25;7;21887;2;"pairedTTest";"org.apache.commons.math3.stat.inference.TestUtils.pairedTTest";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
230;738;20692;0;;"javaclass";218;218;738;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[6]/tt";0;0;8;2;"StatisticalSummary";"d";2;2;;"f";238;"StatisticalSummary instances, without assuming that";"Example 2:  unpaired, two-sided, two-sample t-test using
           StatisticalSummary instances, without assuming that
           subpopulation variances are equal.
           
           First create the StatisticalSummary instances.  Both
           DescriptiveStatistics and SummaryStatistics
           implement this interface.  Assume that summary1 and
           summary2 are SummaryStatistics instances,
           each of which has had at least 2 values added to the (virtual) dataset that
           it describes.  The sample sizes do not have to be the same -- all that is required
           is that both samples have at least 2 elements.
           
           Note: The SummaryStatistics class does
           not store the dataset that it describes in memory, but it does compute all
           statistics necessary to perform t-tests, so this method can be used to
           conduct t-tests with very large samples.  One-sample tests can also be
           performed this way.
           (See Descriptive statistics for details
           on the SummaryStatistics class.)
           
           
          To compute the t-statistic:
          
TestUtils.t(summary1, summary2);
          
           
           
           To compute the p-value:
           
TestUtils.tTest(sample1, sample2);
           
           
           
           To perform a fixed significance level test with alpha = .05:
           
TestUtils.tTest(sample1, sample2, .05);
           
           
           
           In each case above, the test does not assume that the subpopulation
           variances are equal.  To perform the tests under this assumption,
           replace ""t"" at the beginning of the method name with ""homoscedasticT""";;0;;;27;77;27;69;26;14;25;7;20692;2;"StatisticalSummary";"org.apache.commons.math3.stat.descriptive.StatisticalSummary";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
231;739;20692;0;;"javaclass";219;219;739;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[6]/p[1]/tt[1]";0;0;8;2;"StatisticalSummary";"d";2;2;;"f";239;"First create the StatisticalSummary instances.";"First create the StatisticalSummary instances.  Both
           DescriptiveStatistics and SummaryStatistics
           implement this interface.  Assume that summary1 and
           summary2 are SummaryStatistics instances,
           each of which has had at least 2 values added to the (virtual) dataset that
           it describes.  The sample sizes do not have to be the same -- all that is required
           is that both samples have at least 2 elements.";;0;;;27;77;27;69;26;14;25;7;20692;2;"StatisticalSummary";"org.apache.commons.math3.stat.descriptive.StatisticalSummary";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
232;740;20721;0;;"javaclass";220;220;740;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[6]/p[1]/tt[2]";0;0;8;2;"DescriptiveStatistics";"d";2;2;;"f";240;"DescriptiveStatistics and SummaryStatistics";"First create the StatisticalSummary instances.  Both
           DescriptiveStatistics and SummaryStatistics
           implement this interface.  Assume that summary1 and
           summary2 are SummaryStatistics instances,
           each of which has had at least 2 values added to the (virtual) dataset that
           it describes.  The sample sizes do not have to be the same -- all that is required
           is that both samples have at least 2 elements.";;0;;;27;77;27;69;26;14;25;7;20721;2;"DescriptiveStatistics";"org.apache.commons.math3.stat.descriptive.DescriptiveStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
233;741;20756;0;;"javaclass";221;221;741;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[6]/p[1]/tt[3]";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";241;"DescriptiveStatistics and SummaryStatistics";"First create the StatisticalSummary instances.  Both
           DescriptiveStatistics and SummaryStatistics
           implement this interface.  Assume that summary1 and
           summary2 are SummaryStatistics instances,
           each of which has had at least 2 values added to the (virtual) dataset that
           it describes.  The sample sizes do not have to be the same -- all that is required
           is that both samples have at least 2 elements.";;0;;;27;77;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
234;744;20756;0;;"javaclass";222;222;744;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[6]/p[1]/tt[6]";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";244;"summary2 are SummaryStatistics instances,";"First create the StatisticalSummary instances.  Both
           DescriptiveStatistics and SummaryStatistics
           implement this interface.  Assume that summary1 and
           summary2 are SummaryStatistics instances,
           each of which has had at least 2 values added to the (virtual) dataset that
           it describes.  The sample sizes do not have to be the same -- all that is required
           is that both samples have at least 2 elements.";;0;;;27;77;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
235;745;20756;0;;"javaclass";223;223;745;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[6]/p[2]/tt[1]";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";245;"Note: The SummaryStatistics class does";"Note: The SummaryStatistics class does
           not store the dataset that it describes in memory, but it does compute all
           statistics necessary to perform t-tests, so this method can be used to
           conduct t-tests with very large samples.  One-sample tests can also be
           performed this way.
           (See Descriptive statistics for details
           on the SummaryStatistics class.)";;0;;;27;77;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
236;746;20756;0;;"javaclass";224;224;746;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[6]/p[2]/tt[2]";0;0;8;2;"SummaryStatistics";"d";2;2;;"f";247;"on the SummaryStatistics class.";"Note: The SummaryStatistics class does
           not store the dataset that it describes in memory, but it does compute all
           statistics necessary to perform t-tests, so this method can be used to
           conduct t-tests with very large samples.  One-sample tests can also be
           performed this way.
           (See Descriptive statistics for details
           on the SummaryStatistics class.)";;0;;;27;77;27;69;26;14;25;7;20756;2;"SummaryStatistics";"org.apache.commons.math3.stat.descriptive.SummaryStatistics";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
237;769;21736;0;;"javaclass";225;225;769;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[13]/tt";0;0;8;2;"GTest";"d";2;2;;"f";273;"root log likelihood ratio provided by the GTest class.";"G tests are an alternative to chi-square tests that are recommended
          when observed counts are small and / or incidence probabillities for 
          some cells are small. See Ted Dunning's paper,
          
          Accurate Methods for the Statistics of Surprise and Coincidence for
          background and an empirical analysis showing now chi-square
          statistics can be misldeading in the presence of low incidence probabilities.
          This paper also derives the formulas used in computing G statistics and the
          root log likelihood ratio provided by the GTest class.";;0;;;27;77;27;69;26;14;25;7;21736;2;"GTest";"org.apache.commons.math3.stat.inference.GTest";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
238;784;21711;0;;"javaclass";226;226;784;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/tt[1]";0;0;8;2;"OneWayAnova";"d";2;2;;"f";289;"using a OneWayAnova instance or TestUtils";"One-sample t tests
          To compare the mean of a double[] array to a fixed value:
          
double[] observed = {1d, 2d, 3d};
double mu = 2.5d;
System.out.println(TestUtils.t(mu, observed));
          
          The code above will display the t-statisitic associated with a one-sample
           t-test comparing the mean of the observed values against
           mu.
          
          To compare the mean of a dataset described by a
          
          StatisticalSummary  to a fixed value:
          
double[] observed ={1d, 2d, 3d};
double mu = 2.5d;
SummaryStatistics sampleStats = new SummaryStatistics();
for (int i = 0; i < observed.length; i++) {
    sampleStats.addValue(observed[i]);
}
System.out.println(TestUtils.t(mu, observed));

           
           To compute the p-value associated with the null hypothesis that the mean
            of a set of values equals a point estimate, against the two-sided alternative that
            the mean is different from the target value:
            
double[] observed = {1d, 2d, 3d};
double mu = 2.5d;
System.out.println(TestUtils.tTest(mu, observed));
           
          The snippet above will display the p-value associated with the null
          hypothesis that the mean of the population from which the
          observed values are drawn equals mu.
          
          To perform the test using a fixed significance level, use:
          
TestUtils.tTest(mu, observed, alpha);
          
          where 0 < alpha < 0.5 is the significance level of
          the test.  The boolean value returned will be true iff the
          null hypothesis can be rejected with confidence 1 - alpha.
          To test, for example at the 95% level of confidence, use
          alpha = 0.05
          
          Two-Sample t-tests
          Example 1: Paired test evaluating
          the null hypothesis that the mean difference between corresponding
          (paired) elements of the double[] arrays
          sample1 and sample2 is zero.
          
          To compute the t-statistic:
          
TestUtils.pairedT(sample1, sample2);
          
           
           
           To compute the p-value:
           
TestUtils.pairedTTest(sample1, sample2);
           
           
           
           To perform a fixed significance level test with alpha = .05:
           
TestUtils.pairedTTest(sample1, sample2, .05);
           
           
           The last example will return true iff the p-value
           returned by TestUtils.pairedTTest(sample1, sample2)
           is less than .05
           
           Example 2:  unpaired, two-sided, two-sample t-test using
           StatisticalSummary instances, without assuming that
           subpopulation variances are equal.
           
           First create the StatisticalSummary instances.  Both
           DescriptiveStatistics and SummaryStatistics
           implement this interface.  Assume that summary1 and
           summary2 are SummaryStatistics instances,
           each of which has had at least 2 values added to the (virtual) dataset that
           it describes.  The sample sizes do not have to be the same -- all that is required
           is that both samples have at least 2 elements.
           
           Note: The SummaryStatistics class does
           not store the dataset that it describes in memory, but it does compute all
           statistics necessary to perform t-tests, so this method can be used to
           conduct t-tests with very large samples.  One-sample tests can also be
           performed this way.
           (See Descriptive statistics for details
           on the SummaryStatistics class.)
           
           
          To compute the t-statistic:
          
TestUtils.t(summary1, summary2);
          
           
           
           To compute the p-value:
           
TestUtils.tTest(sample1, sample2);
           
           
           
           To perform a fixed significance level test with alpha = .05:
           
TestUtils.tTest(sample1, sample2, .05);
           
           
           
           In each case above, the test does not assume that the subpopulation
           variances are equal.  To perform the tests under this assumption,
           replace ""t"" at the beginning of the method name with ""homoscedasticT""
           
           
           Chi-square tests
          To compute a chi-square statistic measuring the agreement between a
          long[] array of observed counts and a double[]
          array of expected counts, use:
          
long[] observed = {10, 9, 11};
double[] expected = {10.1, 9.8, 10.3};
System.out.println(TestUtils.chiSquare(expected, observed));
          
          the value displayed will be
          sum((expected[i] - observed[i])^2 / expected[i])
          
           To get the p-value associated with the null hypothesis that
          observed conforms to expected use:
          
TestUtils.chiSquareTest(expected, observed);
          
          
           To test the null hypothesis that observed conforms to
          expected with alpha siginficance level
          (equiv. 100 * (1-alpha)% confidence) where 
          0 < alpha < 1  use:
          
TestUtils.chiSquareTest(expected, observed, alpha);
          
          The boolean value returned will be true iff the null hypothesis
          can be rejected with confidence 1 - alpha.
          
          To compute a chi-square statistic statistic associated with a
          
          chi-square test of independence based on a two-dimensional (long[][])
          counts array viewed as a two-way table, use:
          
TestUtils.chiSquareTest(counts);
          
          The rows of the 2-way table are
          count[0], ... , count[count.length - 1]. 
          The chi-square statistic returned is
          sum((counts[i][j] - expected[i][j])^2/expected[i][j])
          where the sum is taken over all table entries and
          expected[i][j] is the product of the row and column sums at
          row i, column j divided by the total count.
          
          To compute the p-value associated with the null hypothesis that
          the classifications represented by the counts in the columns of the input 2-way
          table are independent of the rows, use:
          
 TestUtils.chiSquareTest(counts);
          
          
          To perform a chi-square test of independence with alpha
          siginficance level (equiv. 100 * (1-alpha)% confidence)
          where 0 < alpha < 1  use:
          
TestUtils.chiSquareTest(counts, alpha);
          
          The boolean value returned will be true iff the null
          hypothesis can be rejected with confidence 1 - alpha.
          
          G tests
          G tests are an alternative to chi-square tests that are recommended
          when observed counts are small and / or incidence probabillities for 
          some cells are small. See Ted Dunning's paper,
          
          Accurate Methods for the Statistics of Surprise and Coincidence for
          background and an empirical analysis showing now chi-square
          statistics can be misldeading in the presence of low incidence probabilities.
          This paper also derives the formulas used in computing G statistics and the
          root log likelihood ratio provided by the GTest class.
          
          To compute a G-test statistic measuring the agreement between a
          long[] array of observed counts and a double[]
          array of expected counts, use:
          
double[] expected = new double[]{0.54d, 0.40d, 0.05d, 0.01d};
long[] observed = new long[]{70, 79, 3, 4};
System.out.println(TestUtils.g(expected, observed));
          
          the value displayed will be
          2 * sum(observed[i]) * log(observed[i]/expected[i])
          
           To get the p-value associated with the null hypothesis that
          observed conforms to expected use:
          
TestUtils.gTest(expected, observed);
          
          
           To test the null hypothesis that observed conforms to
          expected with alpha siginficance level
          (equiv. 100 * (1-alpha)% confidence) where 
          0 < alpha < 1  use:
          
TestUtils.gTest(expected, observed, alpha);
          
          The boolean value returned will be true iff the null hypothesis
          can be rejected with confidence 1 - alpha.
          
          To evaluate the hypothesis that two sets of counts come from the
          same underlying distribution, use long[] arrays for the counts and
          gDataSetsComparison for the test statistic
          
long[] obs1 = new long[]{268, 199, 42};
long[] obs2 = new long[]{807, 759, 184};
System.out.println(TestUtils.gDataSetsComparison(obs1, obs2)); // G statistic
System.out.println(TestUtils.gTestDataSetsComparison(obs1, obs2)); // p-value
          
          
          For 2 x 2 designs, the rootLogLikelihoodRaio method
          computes the
          
          signed root log likelihood ratio.  For example, suppose that for two events
          A and B, the observed count of AB (both occurring) is 5, not A and B (B without A)
          is 1995, A not B is 0; and neither A nor B is 10000.  Then
          
new GTest().rootLogLikelihoodRatio(5, 1995, 0, 100000);
          
          returns the root log likelihood associated with the null hypothesis that A 
          and B are independent.
          
          One-Way Anova tests
          
double[] classA =
   {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0 };
double[] classB =
   {99.0, 92.0, 102.0, 100.0, 102.0, 89.0 };
double[] classC =
   {110.0, 115.0, 111.0, 117.0, 128.0, 117.0 };
List classes = new ArrayList();
classes.add(classA);
classes.add(classB);
classes.add(classC);
          
          Then you can compute ANOVA F- or p-values associated with the
          null hypothesis that the class means are all the same
          using a OneWayAnova instance or TestUtils
          methods:
          
double fStatistic = TestUtils.oneWayAnovaFValue(classes); // F-value
double pValue = TestUtils.oneWayAnovaPValue(classes);     // P-value
          
          To test perform a One-Way Anova test with signficance level set at 0.01
          (so the test will, assuming assumptions are met, reject the null
          hypothesis incorrectly only about one in 100 times), use
          
TestUtils.oneWayAnovaTest(classes, 0.01); // returns a boolean
                                          // true means reject null hypothesis";;0;;;27;77;27;69;26;14;25;7;21711;2;"OneWayAnova";"org.apache.commons.math3.stat.inference.OneWayAnova";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
239;785;21617;0;;"javaclass";227;227;785;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/tt[2]";0;0;8;2;"TestUtils";"d";2;2;;"f";290;"TestUtils.";"One-sample t tests
          To compare the mean of a double[] array to a fixed value:
          
double[] observed = {1d, 2d, 3d};
double mu = 2.5d;
System.out.println(TestUtils.t(mu, observed));
          
          The code above will display the t-statisitic associated with a one-sample
           t-test comparing the mean of the observed values against
           mu.
          
          To compare the mean of a dataset described by a
          
          StatisticalSummary  to a fixed value:
          
double[] observed ={1d, 2d, 3d};
double mu = 2.5d;
SummaryStatistics sampleStats = new SummaryStatistics();
for (int i = 0; i < observed.length; i++) {
    sampleStats.addValue(observed[i]);
}
System.out.println(TestUtils.t(mu, observed));

           
           To compute the p-value associated with the null hypothesis that the mean
            of a set of values equals a point estimate, against the two-sided alternative that
            the mean is different from the target value:
            
double[] observed = {1d, 2d, 3d};
double mu = 2.5d;
System.out.println(TestUtils.tTest(mu, observed));
           
          The snippet above will display the p-value associated with the null
          hypothesis that the mean of the population from which the
          observed values are drawn equals mu.
          
          To perform the test using a fixed significance level, use:
          
TestUtils.tTest(mu, observed, alpha);
          
          where 0 < alpha < 0.5 is the significance level of
          the test.  The boolean value returned will be true iff the
          null hypothesis can be rejected with confidence 1 - alpha.
          To test, for example at the 95% level of confidence, use
          alpha = 0.05
          
          Two-Sample t-tests
          Example 1: Paired test evaluating
          the null hypothesis that the mean difference between corresponding
          (paired) elements of the double[] arrays
          sample1 and sample2 is zero.
          
          To compute the t-statistic:
          
TestUtils.pairedT(sample1, sample2);
          
           
           
           To compute the p-value:
           
TestUtils.pairedTTest(sample1, sample2);
           
           
           
           To perform a fixed significance level test with alpha = .05:
           
TestUtils.pairedTTest(sample1, sample2, .05);
           
           
           The last example will return true iff the p-value
           returned by TestUtils.pairedTTest(sample1, sample2)
           is less than .05
           
           Example 2:  unpaired, two-sided, two-sample t-test using
           StatisticalSummary instances, without assuming that
           subpopulation variances are equal.
           
           First create the StatisticalSummary instances.  Both
           DescriptiveStatistics and SummaryStatistics
           implement this interface.  Assume that summary1 and
           summary2 are SummaryStatistics instances,
           each of which has had at least 2 values added to the (virtual) dataset that
           it describes.  The sample sizes do not have to be the same -- all that is required
           is that both samples have at least 2 elements.
           
           Note: The SummaryStatistics class does
           not store the dataset that it describes in memory, but it does compute all
           statistics necessary to perform t-tests, so this method can be used to
           conduct t-tests with very large samples.  One-sample tests can also be
           performed this way.
           (See Descriptive statistics for details
           on the SummaryStatistics class.)
           
           
          To compute the t-statistic:
          
TestUtils.t(summary1, summary2);
          
           
           
           To compute the p-value:
           
TestUtils.tTest(sample1, sample2);
           
           
           
           To perform a fixed significance level test with alpha = .05:
           
TestUtils.tTest(sample1, sample2, .05);
           
           
           
           In each case above, the test does not assume that the subpopulation
           variances are equal.  To perform the tests under this assumption,
           replace ""t"" at the beginning of the method name with ""homoscedasticT""
           
           
           Chi-square tests
          To compute a chi-square statistic measuring the agreement between a
          long[] array of observed counts and a double[]
          array of expected counts, use:
          
long[] observed = {10, 9, 11};
double[] expected = {10.1, 9.8, 10.3};
System.out.println(TestUtils.chiSquare(expected, observed));
          
          the value displayed will be
          sum((expected[i] - observed[i])^2 / expected[i])
          
           To get the p-value associated with the null hypothesis that
          observed conforms to expected use:
          
TestUtils.chiSquareTest(expected, observed);
          
          
           To test the null hypothesis that observed conforms to
          expected with alpha siginficance level
          (equiv. 100 * (1-alpha)% confidence) where 
          0 < alpha < 1  use:
          
TestUtils.chiSquareTest(expected, observed, alpha);
          
          The boolean value returned will be true iff the null hypothesis
          can be rejected with confidence 1 - alpha.
          
          To compute a chi-square statistic statistic associated with a
          
          chi-square test of independence based on a two-dimensional (long[][])
          counts array viewed as a two-way table, use:
          
TestUtils.chiSquareTest(counts);
          
          The rows of the 2-way table are
          count[0], ... , count[count.length - 1]. 
          The chi-square statistic returned is
          sum((counts[i][j] - expected[i][j])^2/expected[i][j])
          where the sum is taken over all table entries and
          expected[i][j] is the product of the row and column sums at
          row i, column j divided by the total count.
          
          To compute the p-value associated with the null hypothesis that
          the classifications represented by the counts in the columns of the input 2-way
          table are independent of the rows, use:
          
 TestUtils.chiSquareTest(counts);
          
          
          To perform a chi-square test of independence with alpha
          siginficance level (equiv. 100 * (1-alpha)% confidence)
          where 0 < alpha < 1  use:
          
TestUtils.chiSquareTest(counts, alpha);
          
          The boolean value returned will be true iff the null
          hypothesis can be rejected with confidence 1 - alpha.
          
          G tests
          G tests are an alternative to chi-square tests that are recommended
          when observed counts are small and / or incidence probabillities for 
          some cells are small. See Ted Dunning's paper,
          
          Accurate Methods for the Statistics of Surprise and Coincidence for
          background and an empirical analysis showing now chi-square
          statistics can be misldeading in the presence of low incidence probabilities.
          This paper also derives the formulas used in computing G statistics and the
          root log likelihood ratio provided by the GTest class.
          
          To compute a G-test statistic measuring the agreement between a
          long[] array of observed counts and a double[]
          array of expected counts, use:
          
double[] expected = new double[]{0.54d, 0.40d, 0.05d, 0.01d};
long[] observed = new long[]{70, 79, 3, 4};
System.out.println(TestUtils.g(expected, observed));
          
          the value displayed will be
          2 * sum(observed[i]) * log(observed[i]/expected[i])
          
           To get the p-value associated with the null hypothesis that
          observed conforms to expected use:
          
TestUtils.gTest(expected, observed);
          
          
           To test the null hypothesis that observed conforms to
          expected with alpha siginficance level
          (equiv. 100 * (1-alpha)% confidence) where 
          0 < alpha < 1  use:
          
TestUtils.gTest(expected, observed, alpha);
          
          The boolean value returned will be true iff the null hypothesis
          can be rejected with confidence 1 - alpha.
          
          To evaluate the hypothesis that two sets of counts come from the
          same underlying distribution, use long[] arrays for the counts and
          gDataSetsComparison for the test statistic
          
long[] obs1 = new long[]{268, 199, 42};
long[] obs2 = new long[]{807, 759, 184};
System.out.println(TestUtils.gDataSetsComparison(obs1, obs2)); // G statistic
System.out.println(TestUtils.gTestDataSetsComparison(obs1, obs2)); // p-value
          
          
          For 2 x 2 designs, the rootLogLikelihoodRaio method
          computes the
          
          signed root log likelihood ratio.  For example, suppose that for two events
          A and B, the observed count of AB (both occurring) is 5, not A and B (B without A)
          is 1995, A not B is 0; and neither A nor B is 10000.  Then
          
new GTest().rootLogLikelihoodRatio(5, 1995, 0, 100000);
          
          returns the root log likelihood associated with the null hypothesis that A 
          and B are independent.
          
          One-Way Anova tests
          
double[] classA =
   {93.0, 103.0, 95.0, 101.0, 91.0, 105.0, 96.0, 94.0, 101.0 };
double[] classB =
   {99.0, 92.0, 102.0, 100.0, 102.0, 89.0 };
double[] classC =
   {110.0, 115.0, 111.0, 117.0, 128.0, 117.0 };
List classes = new ArrayList();
classes.add(classA);
classes.add(classB);
classes.add(classC);
          
          Then you can compute ANOVA F- or p-values associated with the
          null hypothesis that the class means are all the same
          using a OneWayAnova instance or TestUtils
          methods:
          
double fStatistic = TestUtils.oneWayAnovaFValue(classes); // F-value
double pValue = TestUtils.oneWayAnovaPValue(classes);     // P-value
          
          To test perform a One-Way Anova test with signficance level set at 0.01
          (so the test will, assuming assumptions are met, reject the null
          hypothesis incorrectly only about one in 100 times), use
          
TestUtils.oneWayAnovaTest(classes, 0.01); // returns a boolean
                                          // true means reject null hypothesis";;0;;;27;77;27;69;26;14;25;7;21617;2;"TestUtils";"org.apache.commons.math3.stat.inference.TestUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
240;789;20382;0;;"javaclass";228;228;789;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[3]";0;0;8;2;"Frequency";"d";2;2;;"f";-100000;"1.3 Frequency distributions";"1.3 Frequency distributions";;0;27;72;27;72;27;69;26;14;25;7;20382;2;"Frequency";"org.apache.commons.math3.stat.Frequency";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
241;793;20588;0;;"javaclass";229;229;793;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]";0;0;8;2;"Covariance";"d";2;2;;"f";-100000;"1.7 Covariance and correlation";"1.7 Covariance and correlation";;0;27;76;27;76;27;69;26;14;25;7;20588;2;"Covariance";"org.apache.commons.math3.stat.correlation.Covariance";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
242;800;10166;0;;"javaclass";230;230;800;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[1]/a[1]";0;0;8;2;"UnivariateSolver";"d";2;2;;"f";56;"UnivariateSolver,";"UnivariateSolver, 
          UnivariateDifferentiableSolver and 
          PolynomialSolver provide means to find roots of
          univariate real-valued functions,
          differentiable univariate real-valued functions,
          and polynomial functions respectively.
          A root is the value where the function takes the value 0.  Commons-Math
          includes implementations of the several root-finding algorithms:";;0;;;27;90;27;87;26;17;25;7;10166;2;"UnivariateSolver";"org.apache.commons.math3.analysis.solvers.UnivariateSolver";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
243;801;10382;0;;"javaclass";231;231;801;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[1]/a[2]";0;0;8;2;"UnivariateDifferentiableSolver";"d";2;2;;"f";57;"UnivariateDifferentiableSolver and";"UnivariateSolver, 
          UnivariateDifferentiableSolver and 
          PolynomialSolver provide means to find roots of
          univariate real-valued functions,
          differentiable univariate real-valued functions,
          and polynomial functions respectively.
          A root is the value where the function takes the value 0.  Commons-Math
          includes implementations of the several root-finding algorithms:";;0;;;27;90;27;87;26;17;25;7;10382;2;"UnivariateDifferentiableSolver";"org.apache.commons.math3.analysis.solvers.UnivariateDifferentiableSolver";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
244;802;10365;0;;"javaclass";232;232;802;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[1]/a[3]";0;0;8;2;"PolynomialSolver";"d";2;2;;"f";58;"PolynomialSolver provide means to find roots of";"UnivariateSolver, 
          UnivariateDifferentiableSolver and 
          PolynomialSolver provide means to find roots of
          univariate real-valued functions,
          differentiable univariate real-valued functions,
          and polynomial functions respectively.
          A root is the value where the function takes the value 0.  Commons-Math
          includes implementations of the several root-finding algorithms:";;0;;;27;90;27;87;26;17;25;7;10365;2;"PolynomialSolver";"org.apache.commons.math3.analysis.solvers.PolynomialSolver";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
245;836;11778;0;;"javaclass";233;233;836;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[4]/tt[7]";0;0;8;2;"ConvergenceException";"d";2;2;;"f";92;"count is exceeded, non-convergence is assumed and a ConvergenceException";"In order to use the root-finding features, first a solver object must
          be created by calling its constructor, often providing relative and absolute
          accuracy. Using a solver object, roots of functions
          are easily found using the solve methods.  These methods takes
          a maximum iteration count maxEval, a function f,
          and either two domain values, min and max, or a
          startValue as parameters. If the maximal number of iterations
          count is exceeded, non-convergence is assumed and a ConvergenceException
          exception is thrown.  A suggested value is 100, which should be plenty, given that a
          bisection algorithm can't get any more accurate after 52 iterations because of the
          number of mantissa bits in a double precision floating point number. If a number of
          ill-conditioned problems is to be solved, this number can be decreased in order
          to avoid wasting time.
          Bracketed
          solvers also take an allowed solution
          enum parameter to specify which side of the final convergence interval should be
          selected as the root. It can be ANY_SIDE, LEFT_SIDE, RIGHT_SIDE,
          BELOW_SIDE or ABOVE_SIDE. Left and right are used to specify the root along
          the function parameter axis while below and above refer to the function value axis. The solve methods
          compute a value c such that:";;0;;;27;90;27;87;26;17;25;7;11778;2;"ConvergenceException";"org.apache.commons.math3.exception.ConvergenceException";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
246;846;10111;0;;"javaclass";234;234;846;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[7]/tt";0;0;8;2;"BrentSolver";"d";2;2;;"f";103;"The BrentSolver uses the Brent-Dekker algorithm which is";"The BrentSolver uses the Brent-Dekker algorithm which is
          fast and robust.  If there are multiple roots in the interval,
          or there is a large domain of indeterminacy, the
          algorithm will converge to a random root in the interval without
          indication that there are problems.  Interestingly, the examined text
          book implementations all disagree in details of the convergence
          criteria.  Also each implementation had problems for one of the test
          cases, so the expressions had to be fudged further. Don't expect to
          get exactly the same root values as for other implementations of this
          algorithm.";;0;;;27;90;27;87;26;17;25;7;10111;2;"BrentSolver";"org.apache.commons.math3.analysis.solvers.BrentSolver";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
247;847;10461;0;;"javaclass";235;235;847;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[8]/tt";0;0;8;2;"BracketingNthOrderBrentSolver";"d";2;2;;"f";104;"The BracketingNthOrderBrentSolver uses an extension of the";"The BracketingNthOrderBrentSolver uses an extension of the
          Brent-Dekker algorithm which uses inverse nth order polynomial
          interpolation instead of inverse quadratic interpolation, and which allows
          selection of the side of the convergence interval for result bracketing.
          This is now the recommended algorithm for most users since it has the
          largest order, doesn't require derivatives, has guaranteed convergence
          and allows result bracket selection.";;0;;;27;90;27;87;26;17;25;7;10461;2;"BracketingNthOrderBrentSolver";"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
248;848;10478;0;;"javaclass";236;236;848;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[9]/tt";0;0;8;2;"SecantSolver";"d";2;2;;"f";105;"The SecantSolver uses a straightforward secant";"The SecantSolver uses a straightforward secant
          algorithm which does not bracket the search and therefore does not
          guarantee convergence.  It may be faster than Brent on some well-behaved
          functions.";;0;;;27;90;27;87;26;17;25;7;10478;2;"SecantSolver";"org.apache.commons.math3.analysis.solvers.SecantSolver";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
249;849;10332;0;;"javaclass";237;237;849;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[10]/tt";0;0;8;2;"RegulaFalsiSolver";"d";2;2;;"f";106;"The RegulaFalsiSolver is variation of secant preserving";"The RegulaFalsiSolver is variation of secant preserving
          bracketing, but then it may be slow, as one end point of the search interval
          will become fixed after and only the other end point will converge to the root,
          hence resulting in a search interval size that does not decrease to zero.";;0;;;27;90;27;87;26;17;25;7;10332;2;"RegulaFalsiSolver";"org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
250;850;10240;0;;"javaclass";238;238;850;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[11]/tt[1]";0;0;8;2;"IllinoisSolver";"d";2;2;;"f";107;"The IllinoisSolver and PegasusSolver are";"The IllinoisSolver and PegasusSolver are
          well-known variations of regula falsi that fix the problem of stuck
          end points by slightly weighting one endpoint to balance the interval
          at next iteration. Pegasus is often faster than Illinois. Pegasus may
          be the algorithm of choice for selecting a specific side of the convergence
          interval.";;0;;;27;90;27;87;26;17;25;7;10240;2;"IllinoisSolver";"org.apache.commons.math3.analysis.solvers.IllinoisSolver";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
251;851;10317;0;;"javaclass";239;239;851;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[11]/tt[2]";0;0;8;2;"PegasusSolver";"d";2;2;;"f";108;"The IllinoisSolver and PegasusSolver are";"The IllinoisSolver and PegasusSolver are
          well-known variations of regula falsi that fix the problem of stuck
          end points by slightly weighting one endpoint to balance the interval
          at next iteration. Pegasus is often faster than Illinois. Pegasus may
          be the algorithm of choice for selecting a specific side of the convergence
          interval.";;0;;;27;90;27;87;26;17;25;7;10317;2;"PegasusSolver";"org.apache.commons.math3.analysis.solvers.PegasusSolver";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
252;852;10081;0;;"javaclass";240;240;852;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[12]/tt";0;0;8;2;"BisectionSolver";"d";2;2;;"f";109;"The BisectionSolver is included for completeness and for";"The BisectionSolver is included for completeness and for
          establishing a fall back in cases of emergency.  The algorithm is
          simple, most likely bug free and guaranteed to converge even in very
          adverse circumstances which might cause other algorithms to
          malfunction.  The drawback is of course that it is also guaranteed
          to be slow.";;0;;;27;90;27;87;26;17;25;7;10081;2;"BisectionSolver";"org.apache.commons.math3.analysis.solvers.BisectionSolver";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
253;853;10166;0;;"javaclass";241;241;853;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[13]/tt";0;0;8;2;"UnivariateSolver";"d";2;2;;"f";110;"The UnivariateSolver interface exposes many";"The UnivariateSolver interface exposes many
          properties to control the convergence of a solver.  The accuracy properties
          are set at solver instance creation and cannot be changed afterwards,
          there are only getters to retriveve their values, no setters are available.";;0;;;27;90;27;87;26;17;25;7;10166;2;"UnivariateSolver";"org.apache.commons.math3.analysis.solvers.UnivariateSolver";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
254;854;9791;0;;"javaclass";242;242;854;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[1]/a[1]";0;0;8;2;"UnivariateInterpolator";"d";2;2;;"f";112;"UnivariateInterpolator is used to find a univariate real-valued";"A 
          UnivariateInterpolator is used to find a univariate real-valued
          function f which for a given set of ordered pairs 
          (xi,yi) yields
          f(xi)=yi to the best accuracy possible. The result
          is provided as an object implementing the 
          UnivariateFunction interface. It can therefore be evaluated at any point,
          including point not belonging to the original set.
          Currently, only an interpolator for generating natural cubic splines and a polynomial
          interpolator are available.  There is no interpolator factory, mainly because the
          interpolation algorithm is more determined by the kind of the interpolated function
          rather than the set of points to interpolate.
          There aren't currently any accuracy controls either, as interpolation
          accuracy is in general determined by the algorithm.";;0;;;27;91;27;87;26;17;25;7;9791;2;"UnivariateInterpolator";"org.apache.commons.math3.analysis.interpolation.UnivariateInterpolator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
255;858;8839;0;;"javaclass";243;243;858;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[1]/a[2]";0;0;8;2;"UnivariateFunction";"d";2;2;;"f";117;"UnivariateFunction interface.";"A 
          UnivariateInterpolator is used to find a univariate real-valued
          function f which for a given set of ordered pairs 
          (xi,yi) yields
          f(xi)=yi to the best accuracy possible. The result
          is provided as an object implementing the 
          UnivariateFunction interface. It can therefore be evaluated at any point,
          including point not belonging to the original set.
          Currently, only an interpolator for generating natural cubic splines and a polynomial
          interpolator are available.  There is no interpolator factory, mainly because the
          interpolation algorithm is more determined by the kind of the interpolated function
          rather than the set of points to interpolate.
          There aren't currently any accuracy controls either, as interpolation
          accuracy is in general determined by the algorithm.";;0;;;27;91;27;87;26;17;25;7;8839;2;"UnivariateFunction";"org.apache.commons.math3.analysis.UnivariateFunction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
256;862;9895;0;;"javaclass";244;244;862;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[7]/a[2]";0;0;8;2;"HermiteInterpolator";"d";2;2;;"f";126;"The HermiteInterpolator";"Hermite interpolation
          is an interpolation method that can use derivatives in addition to function values at sample points. The HermiteInterpolator
          class implements this method for vector-valued functions. The sampling points can have any spacing (there are
          no requirements for a regular grid) and some points may provide derivatives while others don't provide them
          (or provide derivatives to a smaller order). Points are added one at a time, as shown in the following example:";;0;;;27;91;27;87;26;17;25;7;9895;2;"HermiteInterpolator";"org.apache.commons.math3.analysis.interpolation.HermiteInterpolator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
257;863;9803;0;;"javaclass";245;245;863;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[8]/a[1]";0;0;8;2;"BivariateGridInterpolator";"d";2;2;;"f";127;"BivariateGridInterpolator is used to find a bivariate real-valued";"A 
          BivariateGridInterpolator is used to find a bivariate real-valued
          function f which for a given set of tuples
          (xi,yj,fij)
          yields f(xi,yj)=fij to the best accuracy
          possible. The result is provided as an object implementing the
          
          BivariateFunction interface. It can therefore be evaluated at any point,
          including a point not belonging to the original set.
          The arrays xi and yj must be
          sorted in increasing order in order to define a two-dimensional grid.";;0;;;27;91;27;87;26;17;25;7;9803;2;"BivariateGridInterpolator";"org.apache.commons.math3.analysis.interpolation.BivariateGridInterpolator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
258;868;8823;0;;"javaclass";246;246;868;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[8]/a[2]";0;0;8;2;"BivariateFunction";"d";2;2;;"f";133;"BivariateFunction interface.";"A 
          BivariateGridInterpolator is used to find a bivariate real-valued
          function f which for a given set of tuples
          (xi,yj,fij)
          yields f(xi,yj)=fij to the best accuracy
          possible. The result is provided as an object implementing the
          
          BivariateFunction interface. It can therefore be evaluated at any point,
          including a point not belonging to the original set.
          The arrays xi and yj must be
          sorted in increasing order in order to define a two-dimensional grid.";;0;;;27;91;27;87;26;17;25;7;8823;2;"BivariateFunction";"org.apache.commons.math3.analysis.BivariateFunction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
259;871;9925;0;;"javaclass";247;247;871;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[9]/a[2]";0;0;8;2;"BicubicSplineInterpolator";"d";2;2;;"f";137;"BicubicSplineInterpolator computes a";"In bicubic interpolation,
          the interpolation function is a 3rd-degree polynomial of two variables. The coefficients
          are computed from the function values sampled on a grid, as well as the values of the
          partial derivatives of the function at those grid points.
          From two-dimensional data sampled on a grid, the
          
          BicubicSplineInterpolator computes a
          
          bicubic interpolating function.
          Prior to computing an interpolating function, the
          
          SmoothingPolynomialBicubicSplineInterpolator class performs smoothing of
          the data by computing the polynomial that best fits each of the one-dimensional
          curves along each of the coordinate axes.";;0;;;27;91;27;87;26;17;25;7;9925;2;"BicubicSplineInterpolator";"org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
260;873;9883;0;;"javaclass";248;248;873;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[9]/a[4]";0;0;8;2;"SmoothingPolynomialBicubicSplineInterpolator";"d";2;2;;"f";139;"SmoothingPolynomialBicubicSplineInterpolator class performs smoothing of";"In bicubic interpolation,
          the interpolation function is a 3rd-degree polynomial of two variables. The coefficients
          are computed from the function values sampled on a grid, as well as the values of the
          partial derivatives of the function at those grid points.
          From two-dimensional data sampled on a grid, the
          
          BicubicSplineInterpolator computes a
          
          bicubic interpolating function.
          Prior to computing an interpolating function, the
          
          SmoothingPolynomialBicubicSplineInterpolator class performs smoothing of
          the data by computing the polynomial that best fits each of the one-dimensional
          curves along each of the coordinate axes.";;0;;;27;91;27;87;26;17;25;7;9883;2;"SmoothingPolynomialBicubicSplineInterpolator";"org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
261;874;9821;0;;"javaclass";249;249;874;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[10]/a[1]";0;0;8;2;"TrivariateGridInterpolator";"d";2;2;;"f";140;"TrivariateGridInterpolator is used to find a trivariate real-valued";"A 
          TrivariateGridInterpolator is used to find a trivariate real-valued
          function f which for a given set of tuples
          (xi,yj,zk,
          fijk)
          yields f(xi,yj,zk)=fijk
          to the best accuracy possible. The result is provided as an object implementing the
          
          TrivariateFunction interface. It can therefore be evaluated at any point,
          including a point not belonging to the original set.
          The arrays xi, yj and
          zk must be sorted in increasing order in order to define
          a three-dimensional grid.";;0;;;27;91;27;87;26;17;25;7;9821;2;"TrivariateGridInterpolator";"org.apache.commons.math3.analysis.interpolation.TrivariateGridInterpolator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
262;880;8854;0;;"javaclass";250;250;880;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[10]/a[2]";0;0;8;2;"TrivariateFunction";"d";2;2;;"f";147;"TrivariateFunction interface.";"A 
          TrivariateGridInterpolator is used to find a trivariate real-valued
          function f which for a given set of tuples
          (xi,yj,zk,
          fijk)
          yields f(xi,yj,zk)=fijk
          to the best accuracy possible. The result is provided as an object implementing the
          
          TrivariateFunction interface. It can therefore be evaluated at any point,
          including a point not belonging to the original set.
          The arrays xi, yj and
          zk must be sorted in increasing order in order to define
          a three-dimensional grid.";;0;;;27;91;27;87;26;17;25;7;8854;2;"TrivariateFunction";"org.apache.commons.math3.analysis.TrivariateFunction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
263;884;9942;0;;"javaclass";251;251;884;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[4]/p[11]/a[2]";0;0;8;2;"TricubicSplineInterpolator";"d";2;2;;"f";152;"TricubicSplineInterpolator computes a";"In tricubic interpolation,
          the interpolation function is a 3rd-degree polynomial of three variables. The coefficients
          are computed from the function values sampled on a grid, as well as the values of the
          partial derivatives of the function at those grid points.
          From three-dimensional data sampled on a grid, the
          
          TricubicSplineInterpolator computes a
          
          tricubic interpolating function.";;0;;;27;91;27;87;26;17;25;7;9942;2;"TricubicSplineInterpolator";"org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
264;886;9707;0;;"javaclass";252;252;886;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[5]/p/a[1]";0;0;8;2;"UnivariateIntegrator";"d";2;2;;"f";155;"UnivariateIntegrator provides the means to numerically integrate";"A 
          UnivariateIntegrator provides the means to numerically integrate
          
          univariate real-valued functions.
          Commons-Math includes implementations of the following integration algorithms:";;0;;;27;92;27;87;26;17;25;7;9707;2;"UnivariateIntegrator";"org.apache.commons.math3.analysis.integration.UnivariateIntegrator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
265;894;10009;0;;"javaclass";253;253;894;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[6]/p[2]/a[1]";0;0;8;2;"PolynomialFunction";"d";2;2;;"f";163;"PolynomialFunction class is the most general one, using traditional";"The 
          PolynomialFunction class is the most general one, using traditional
          coefficients arrays. The
          
          PolynomialsUtils utility class provides static factory methods to build
          Chebyshev, Hermite, Jacobi, Laguerre and Legendre polynomials. Coefficients are
          computed using exact fractions so these factory methods can build polynomials
          up to any degree.";;0;;;27;93;27;87;26;17;25;7;10009;2;"PolynomialFunction";"org.apache.commons.math3.analysis.polynomials.PolynomialFunction";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
266;895;9979;0;;"javaclass";254;254;895;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[6]/p[2]/a[2]";0;0;8;2;"PolynomialsUtils";"d";2;2;;"f";164;"PolynomialsUtils utility class provides static factory methods to build";"The 
          PolynomialFunction class is the most general one, using traditional
          coefficients arrays. The
          
          PolynomialsUtils utility class provides static factory methods to build
          Chebyshev, Hermite, Jacobi, Laguerre and Legendre polynomials. Coefficients are
          computed using exact fractions so these factory methods can build polynomials
          up to any degree.";;0;;;27;93;27;87;26;17;25;7;9979;2;"PolynomialsUtils";"org.apache.commons.math3.analysis.polynomials.PolynomialsUtils";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
267;898;8965;0;;"javaclass";255;255;898;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[2]/a[1]";0;0;8;2;"DerivativeStructure";"d";2;2;;"f";167;"DerivativeStructure which holds the value and the differentials of a function.";"The core class is 
          DerivativeStructure which holds the value and the differentials of a function. This class
          handles some arbitrary number of free parameters and arbitrary derivation order. It is used
          both as the input and the output type for the 
          UnivariateDifferentiableFunction interface. Any differentiable function should implement this
          interface.";;0;;;27;94;27;87;26;17;25;7;8965;2;"DerivativeStructure";"org.apache.commons.math3.analysis.differentiation.DerivativeStructure";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
268;899;9052;0;;"javaclass";256;256;899;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[2]/a[2]";0;0;8;2;"UnivariateDifferentiableFunction";"d";2;2;;"f";168;"UnivariateDifferentiableFunction interface.";"The core class is 
          DerivativeStructure which holds the value and the differentials of a function. This class
          handles some arbitrary number of free parameters and arbitrary derivation order. It is used
          both as the input and the output type for the 
          UnivariateDifferentiableFunction interface. Any differentiable function should implement this
          interface.";;0;;;27;94;27;87;26;17;25;7;9052;2;"UnivariateDifferentiableFunction";"org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
269;900;8965;0;;"javaclass";257;257;900;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[3]/a[1]";0;0;8;2;"DerivativeStructure";"d";2;2;;"f";169;"DerivativeStructure class is that it can be used almost as a number (i.";"The main idea behind the 
          DerivativeStructure class is that it can be used almost as a number (i.e. it can be added,
          multiplied, its square root can be extracted or its cosine computed... However, in addition to
          computed the value itself when doing these computations, the partial derivatives are also computed
          alongside. This is an extension of what is sometimes called Rall's numbers. This extension is
          described in Dan Kalman's paper Doubly Recursive
          Multivariate Automatic Differentiation, Mathematics Magazine, vol. 75, no. 3, June 2002.
          Rall's numbers only hold the first derivative with respect to one free parameter whereas Dan Kalman's
          derivative structures hold all partial derivatives up to any specified order, with respect to any
          number of free parameters. Rall's numbers therefore can be seen as derivative structures for order
          one derivative and one free parameter, and primitive real numbers can be seen as derivative structures
          with zero order derivative and no free parameters.";;0;;;27;94;27;87;26;17;25;7;8965;2;"DerivativeStructure";"org.apache.commons.math3.analysis.differentiation.DerivativeStructure";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
270;902;8965;0;;"javaclass";258;258;902;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[4]/a";0;0;8;2;"DerivativeStructure";"d";2;2;;"f";173;"DerivativeStructure so it will drive the function to compute all derivatives up to order 3 for";"The workflow of computation of a derivatives of an expression y=f(x) is the following
          one. First we configure an input parameter x of type 
          DerivativeStructure so it will drive the function to compute all derivatives up to order 3 for
          example. Then we compute y=f(x) normally by passing this parameter to the f function.At
          the end, we extract from y the value and the derivatives we want. As we have specified
          3rd order when we built x, we can retrieve the derivatives up to 3rd
          order from y. The following example shows that (the 0 parameter in the DerivativeStructure
          constructor will be explained in the next paragraph):";;0;;;27;94;27;87;26;17;25;7;8965;2;"DerivativeStructure";"org.apache.commons.math3.analysis.differentiation.DerivativeStructure";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
364;909;9228;0;;"javamethod";334;334;909;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[6]/tt[5]";0;0;8;2;"z.getPartialDerivative(1)";"d";5;5;;"f";195;"if we call z.getPartialDerivative(1), we will not get the first derivative of g";"When we compute y from this setting, what we really do is chain f after the
         identity function, so the net result is that the derivatives are computed with respect to the indexed
         free parameters (i.e. only free parameter number 0 here since there is only one free parameter) of the
         identity function x. Going one step further, if we compute z = g(y), we will also compute
         z as a function of the initial free parameter. The very important consequence is that
         if we call z.getPartialDerivative(1), we will not get the first derivative of g
         with respect to y, but with respect to the free parameter p0: the derivatives
         of g and f will be chained together automatically, without user intervention.";908;0;;;27;94;27;87;26;17;25;7;9228;2;"getPartialDerivative";"org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getPartialDerivative";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
483;919;9228;0;;"javageneric";414;414;919;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[8]/tt[19]";0;0;8;2;"getPartialDerivative";"d";2;30;;"f";217;"getPartialDerivative is a variable arguments method which take as arguments the derivation";"This design also allow a very interesting feature which can be explained with the following example.
         Suppose we have a two arguments function f and a one argument function g. If
         we compute g(f(x, y)) with x and y be two variables, we
         want to be able to compute the partial derivatives dg/dx, dg/dy,
         d2g/dx2 d2g/dxdy d2g/dy2. This does make sense since we combined
         the two functions, and it does make sense despite g is a one argument function only. In order to do
         this, we simply set up x as an identity function of an implicit free parameter
         p0 and y as an identity function of a different implicit free parameter
         p1 and compute everything directly. In order to be able to combine everything, however,
         both x and y must be built with the appropriate dimensions, so they will both
         be declared to handle two free parameters, but x will depend only on parameter 0 while
         y will depend on parameter 1. Here is how we do this (note that
         getPartialDerivative is a variable arguments method which take as arguments the derivation
         order with respect to all free parameters, i.e. the first argument is derivation order with respect to
         free parameter 0 and the second argument is derivation order with respect to free parameter 1):";;0;;;27;94;27;87;26;17;25;7;9228;2;"getPartialDerivative";"org.apache.commons.math3.analysis.differentiation.DerivativeStructure.getPartialDerivative";5;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
271;920;9052;0;;"javaclass";259;259;920;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[9]/a[1]";0;0;8;2;"UnivariateDifferentiableFunction";"d";2;2;;"f";218;"UnivariateDifferentiableFunction interface.";"There are several ways a user can create an implementation of the 
          UnivariateDifferentiableFunction interface. The first method is to simply write it directly using
          the appropriate methods from 
          DerivativeStructure to compute addition, subtraction, sine, cosine... This is often quite
          straigthforward and there is no need to remember the rules for differentiation: the user code only
          represent the function itself, the differentials will be computed automatically under the hood. The
          second method is to write a classical UnivariateFunction and to
          pass it to an existing implementation of the 
          UnivariateFunctionDifferentiator interface to retrieve a differentiated version of the same function.
          The first method is more suited to small functions for which user already control all the underlying code.
          The second method is more suited to either large functions that would be cumbersome to write using the
          
          DerivativeStructure API, or functions for which user does not have control to the full underlying code
          (for example functions that call external libraries).";;0;;;27;94;27;87;26;17;25;7;9052;2;"UnivariateDifferentiableFunction";"org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableFunction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
272;921;8965;0;;"javaclass";260;260;921;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[9]/a[2]";0;0;8;2;"DerivativeStructure";"d";2;2;;"f";219;"DerivativeStructure to compute addition, subtraction, sine, cosine.";"There are several ways a user can create an implementation of the 
          UnivariateDifferentiableFunction interface. The first method is to simply write it directly using
          the appropriate methods from 
          DerivativeStructure to compute addition, subtraction, sine, cosine... This is often quite
          straigthforward and there is no need to remember the rules for differentiation: the user code only
          represent the function itself, the differentials will be computed automatically under the hood. The
          second method is to write a classical UnivariateFunction and to
          pass it to an existing implementation of the 
          UnivariateFunctionDifferentiator interface to retrieve a differentiated version of the same function.
          The first method is more suited to small functions for which user already control all the underlying code.
          The second method is more suited to either large functions that would be cumbersome to write using the
          
          DerivativeStructure API, or functions for which user does not have control to the full underlying code
          (for example functions that call external libraries).";;0;;;27;94;27;87;26;17;25;7;8965;2;"DerivativeStructure";"org.apache.commons.math3.analysis.differentiation.DerivativeStructure";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
273;922;8839;0;;"javaclass";261;261;922;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[9]/a[3]";0;0;8;2;"UnivariateFunction";"d";2;2;;"f";220;"second method is to write a classical UnivariateFunction and to";"There are several ways a user can create an implementation of the 
          UnivariateDifferentiableFunction interface. The first method is to simply write it directly using
          the appropriate methods from 
          DerivativeStructure to compute addition, subtraction, sine, cosine... This is often quite
          straigthforward and there is no need to remember the rules for differentiation: the user code only
          represent the function itself, the differentials will be computed automatically under the hood. The
          second method is to write a classical UnivariateFunction and to
          pass it to an existing implementation of the 
          UnivariateFunctionDifferentiator interface to retrieve a differentiated version of the same function.
          The first method is more suited to small functions for which user already control all the underlying code.
          The second method is more suited to either large functions that would be cumbersome to write using the
          
          DerivativeStructure API, or functions for which user does not have control to the full underlying code
          (for example functions that call external libraries).";;0;;;27;94;27;87;26;17;25;7;8839;2;"UnivariateFunction";"org.apache.commons.math3.analysis.UnivariateFunction";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
274;923;8917;0;;"javaclass";262;262;923;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[9]/a[4]";0;0;8;2;"UnivariateFunctionDifferentiator";"d";2;2;;"f";221;"UnivariateFunctionDifferentiator interface to retrieve a differentiated version of the same function.";"There are several ways a user can create an implementation of the 
          UnivariateDifferentiableFunction interface. The first method is to simply write it directly using
          the appropriate methods from 
          DerivativeStructure to compute addition, subtraction, sine, cosine... This is often quite
          straigthforward and there is no need to remember the rules for differentiation: the user code only
          represent the function itself, the differentials will be computed automatically under the hood. The
          second method is to write a classical UnivariateFunction and to
          pass it to an existing implementation of the 
          UnivariateFunctionDifferentiator interface to retrieve a differentiated version of the same function.
          The first method is more suited to small functions for which user already control all the underlying code.
          The second method is more suited to either large functions that would be cumbersome to write using the
          
          DerivativeStructure API, or functions for which user does not have control to the full underlying code
          (for example functions that call external libraries).";;0;;;27;94;27;87;26;17;25;7;8917;2;"UnivariateFunctionDifferentiator";"org.apache.commons.math3.analysis.differentiation.UnivariateFunctionDifferentiator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
275;924;8965;0;;"javaclass";263;263;924;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[9]/a[5]";0;0;8;2;"DerivativeStructure";"d";2;2;;"f";222;"DerivativeStructure API, or functions for which user does not have control to the full underlying code";"There are several ways a user can create an implementation of the 
          UnivariateDifferentiableFunction interface. The first method is to simply write it directly using
          the appropriate methods from 
          DerivativeStructure to compute addition, subtraction, sine, cosine... This is often quite
          straigthforward and there is no need to remember the rules for differentiation: the user code only
          represent the function itself, the differentials will be computed automatically under the hood. The
          second method is to write a classical UnivariateFunction and to
          pass it to an existing implementation of the 
          UnivariateFunctionDifferentiator interface to retrieve a differentiated version of the same function.
          The first method is more suited to small functions for which user already control all the underlying code.
          The second method is more suited to either large functions that would be cumbersome to write using the
          
          DerivativeStructure API, or functions for which user does not have control to the full underlying code
          (for example functions that call external libraries).";;0;;;27;94;27;87;26;17;25;7;8965;2;"DerivativeStructure";"org.apache.commons.math3.analysis.differentiation.DerivativeStructure";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
276;925;8917;0;;"javaclass";264;264;925;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[10]/a[1]";0;0;8;2;"UnivariateFunctionDifferentiator";"d";2;2;;"f";223;"UnivariateFunctionDifferentiator interface:";"Apache Commons Math provides one implementation of the 
          UnivariateFunctionDifferentiator interface: 
          FiniteDifferencesDifferentiator. This class creates a wrapper that will call the user-provided function
          on a grid sample and will use finite differences to compute the derivatives. It takes care of boundaries
          if the variable is not defined on the whole real line. It is possible to use more points than strictly
          required by the derivation order (for example one can specify an 8-points scheme to compute first
          derivative only). However, one must be aware that tuning the parameters for finite differences is
          highly problem-dependent. Choosing the wrong step size or the wrong number of sampling points can lead
          to huge errors. Finite differences are also not well suited to compute high order derivatives.";;0;;;27;94;27;87;26;17;25;7;8917;2;"UnivariateFunctionDifferentiator";"org.apache.commons.math3.analysis.differentiation.UnivariateFunctionDifferentiator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
277;926;8961;0;;"javaclass";265;265;926;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[10]/a[2]";0;0;8;2;"FiniteDifferencesDifferentiator";"d";2;2;;"f";224;"FiniteDifferencesDifferentiator.";"Apache Commons Math provides one implementation of the 
          UnivariateFunctionDifferentiator interface: 
          FiniteDifferencesDifferentiator. This class creates a wrapper that will call the user-provided function
          on a grid sample and will use finite differences to compute the derivatives. It takes care of boundaries
          if the variable is not defined on the whole real line. It is possible to use more points than strictly
          required by the derivation order (for example one can specify an 8-points scheme to compute first
          derivative only). However, one must be aware that tuning the parameters for finite differences is
          highly problem-dependent. Choosing the wrong step size or the wrong number of sampling points can lead
          to huge errors. Finite differences are also not well suited to compute high order derivatives.";;0;;;27;94;27;87;26;17;25;7;8961;2;"FiniteDifferencesDifferentiator";"org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiator";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
278;927;8917;0;;"javaclass";266;266;927;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[7]/p[11]/a[1]";0;0;8;2;"UnivariateFunctionDifferentiator";"d";2;2;;"f";225;"UnivariateFunctionDifferentiator interface is under development in the related project";"Another implementation of the 
          UnivariateFunctionDifferentiator interface is under development in the related project
          Apache Commons Nabla. This implementation uses
          automatic code analysis and generation at binary level. However, at time of writing
          (end 2012), this project is not yet suitable for production use.";;0;;;27;94;27;87;26;17;25;7;8917;2;"UnivariateFunctionDifferentiator";"org.apache.commons.math3.analysis.differentiation.UnivariateFunctionDifferentiator";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
279;942;16469;0;;"javaclass";267;267;942;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[2]/p[1]/a";0;0;8;2;"RealMatrix";"d";2;2;;"f";55;"RealMatrix interface represents a matrix with real numbers as";"The 
          RealMatrix interface represents a matrix with real numbers as 
          entries.  The following basic matrix operations are supported:";;0;;;27;97;27;95;26;18;25;7;16469;2;"RealMatrix";"org.apache.commons.math3.linear.RealMatrix";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
280;943;14140;0;;"javaclass";268;268;943;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[2]/p[3]/a[1]";0;0;8;2;"Array2DRowRealMatrix";"d";2;2;;"f";56;"Array2DRowRealMatrix and";"The three main implementations of the interface are 
        Array2DRowRealMatrix and 
        BlockRealMatrix for dense matrices (the second one being more suited to
        dimensions above 50 or 100) and 
        SparseRealMatrix for sparse matrices.";;0;;;27;97;27;95;26;18;25;7;14140;2;"Array2DRowRealMatrix";"org.apache.commons.math3.linear.Array2DRowRealMatrix";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
281;944;14153;0;;"javaclass";269;269;944;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[2]/p[3]/a[2]";0;0;8;2;"BlockRealMatrix";"d";2;2;;"f";57;"BlockRealMatrix for dense matrices (the second one being more suited to";"The three main implementations of the interface are 
        Array2DRowRealMatrix and 
        BlockRealMatrix for dense matrices (the second one being more suited to
        dimensions above 50 or 100) and 
        SparseRealMatrix for sparse matrices.";;0;;;27;97;27;95;26;18;25;7;14153;2;"BlockRealMatrix";"org.apache.commons.math3.linear.BlockRealMatrix";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
282;945;15945;0;;"javaclass";270;270;945;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[2]/p[3]/a[3]";0;0;8;2;"SparseRealMatrix";"d";2;2;;"f";58;"SparseRealMatrix for sparse matrices.";"The three main implementations of the interface are 
        Array2DRowRealMatrix and 
        BlockRealMatrix for dense matrices (the second one being more suited to
        dimensions above 50 or 100) and 
        SparseRealMatrix for sparse matrices.";;0;;;27;97;27;95;26;18;25;7;15945;2;"SparseRealMatrix";"org.apache.commons.math3.linear.SparseRealMatrix";2;"t";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
283;946;14665;0;;"javaclass";271;271;946;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[3]/p[1]/a";0;0;8;2;"RealVector";"d";2;2;;"f";60;"RealVector interface represents a vector with real numbers as";"The 
          RealVector interface represents a vector with real numbers as 
          entries.  The following basic matrix operations are supported:";;0;;;27;98;27;95;26;18;25;7;14665;2;"RealVector";"org.apache.commons.math3.linear.RealVector";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
284;947;15387;0;;"javaclass";272;272;947;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[3]/p[2]/a";0;0;8;2;"RealVectorFormat";"d";2;2;;"f";61;"RealVectorFormat class handles input/output of vectors in a customizable";"The 
          RealVectorFormat class handles input/output of vectors in a customizable
          textual format.";;0;;;27;98;27;95;26;18;25;7;15387;2;"RealVectorFormat";"org.apache.commons.math3.linear.RealVectorFormat";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
285;949;16351;0;;"javaclass";273;273;949;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/p[1]/a";0;0;8;2;"DecompositionSolver";"d";2;2;;"f";64;"The solve() methods of the DecompositionSolver";"The solve() methods of the DecompositionSolver
          interface support solving linear systems of equations of the form AX=B, either
          in linear sense or in least square sense. A RealMatrix instance is
          used to represent the coefficient matrix of the system. Solving the system is a
          two phases process: first the coefficient matrix is decomposed in some way and
          then a solver built from the decomposition solves the system. This allows to
          compute the decomposition and build the solver only once if several systems have
          to be solved with the same coefficient matrix.";;0;;;27;99;27;95;26;18;25;7;16351;2;"DecompositionSolver";"org.apache.commons.math3.linear.DecompositionSolver";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
286;950;16469;0;;"javaclass";274;274;950;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/p[1]/tt[2]";0;0;8;2;"RealMatrix";"d";2;2;;"f";65;"A RealMatrix instance is";"The solve() methods of the DecompositionSolver
          interface support solving linear systems of equations of the form AX=B, either
          in linear sense or in least square sense. A RealMatrix instance is
          used to represent the coefficient matrix of the system. Solving the system is a
          two phases process: first the coefficient matrix is decomposed in some way and
          then a solver built from the decomposition solves the system. This allows to
          compute the decomposition and build the solver only once if several systems have
          to be solved with the same coefficient matrix.";;0;;;27;99;27;95;26;18;25;7;16469;2;"RealMatrix";"org.apache.commons.math3.linear.RealMatrix";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
287;951;14665;0;;"javaclass";275;275;951;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/tt[1]";0;0;8;2;"RealVector";"d";2;2;;"f";66;"Next create a RealVector array to represent the constant";"3.4 Solving linear systems
        
          The solve() methods of the DecompositionSolver
          interface support solving linear systems of equations of the form AX=B, either
          in linear sense or in least square sense. A RealMatrix instance is
          used to represent the coefficient matrix of the system. Solving the system is a
          two phases process: first the coefficient matrix is decomposed in some way and
          then a solver built from the decomposition solves the system. This allows to
          compute the decomposition and build the solver only once if several systems have
          to be solved with the same coefficient matrix.
        
        
          For example, to solve the linear system
          
           2x + 3y - 2z = 1
           -x + 7y + 6x = -2
           4x - 3y - 5z = 1
          
          Start by decomposing the coefficient matrix A (in this case using LU decomposition)
          and build a solver
          
RealMatrix coefficients =
    new Array2DRowRealMatrix(new double[][] { { 2, 3, -2 }, { -1, 7, 6 }, { 4, -3, -5 } },
                       false);
DecompositionSolver solver = new LUDecompositionImpl(coefficients).getSolver();
          
          Next create a RealVector array to represent the constant
          vector B and use solve(RealVector) to solve the system
          
RealVector constants = new ArrayRealVector(new double[] { 1, -2, 1 }, false);
RealVector solution = solver.solve(constants);
          
          The solution vector will contain values for x
          (solution.getEntry(0)), y (solution.getEntry(1)), 
          and z (solution.getEntry(2)) that solve the system.
        
        
          Each type of decomposition has its specific semantics and constraints on
          the coefficient matrix as shown in the following table. For algorithms that
          solve AX=B in least squares sense the value returned for X is such that the
          residual AX-B has minimal norm. If an exact solution exist (i.e. if for some
          X the residual AX-B is exactly 0), then this exact solution is also the solution
          in least square sense. This implies that algorithms suited for least squares
          problems can also be used to solve exact problems, but the reverse is not true. 
        
        
          Decomposition algorithmsNamecoefficients matrixproblem typeLUsquareexact solution onlyCholeskysymmetric positive definiteexact solution onlyQRanyleast squares solutioneigen decompositionsquareexact solution onlySVDanyleast squares solution
          It is possible to use a simple array of double instead of a RealVector.
          In this case, the solution will be provided also as an array of double.
        
        
          It is possible to solve multiple systems with the same coefficient matrix 
          in one method call.  To do this, create a matrix whose column vectors correspond 
          to the constant vectors for the systems to be solved and use solve(RealMatrix),
          which returns a matrix with column vectors representing the solutions.";;0;;;27;99;27;95;26;18;25;7;14665;2;"RealVector";"org.apache.commons.math3.linear.RealVector";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
313;952;16363;0;;"javamethod";291;291;952;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/tt[2]";0;0;8;2;"solve(RealVector)";"d";5;5;;"f";67;"vector B and use solve(RealVector) to solve the system";"3.4 Solving linear systems
        
          The solve() methods of the DecompositionSolver
          interface support solving linear systems of equations of the form AX=B, either
          in linear sense or in least square sense. A RealMatrix instance is
          used to represent the coefficient matrix of the system. Solving the system is a
          two phases process: first the coefficient matrix is decomposed in some way and
          then a solver built from the decomposition solves the system. This allows to
          compute the decomposition and build the solver only once if several systems have
          to be solved with the same coefficient matrix.
        
        
          For example, to solve the linear system
          
           2x + 3y - 2z = 1
           -x + 7y + 6x = -2
           4x - 3y - 5z = 1
          
          Start by decomposing the coefficient matrix A (in this case using LU decomposition)
          and build a solver
          
RealMatrix coefficients =
    new Array2DRowRealMatrix(new double[][] { { 2, 3, -2 }, { -1, 7, 6 }, { 4, -3, -5 } },
                       false);
DecompositionSolver solver = new LUDecompositionImpl(coefficients).getSolver();
          
          Next create a RealVector array to represent the constant
          vector B and use solve(RealVector) to solve the system
          
RealVector constants = new ArrayRealVector(new double[] { 1, -2, 1 }, false);
RealVector solution = solver.solve(constants);
          
          The solution vector will contain values for x
          (solution.getEntry(0)), y (solution.getEntry(1)), 
          and z (solution.getEntry(2)) that solve the system.
        
        
          Each type of decomposition has its specific semantics and constraints on
          the coefficient matrix as shown in the following table. For algorithms that
          solve AX=B in least squares sense the value returned for X is such that the
          residual AX-B has minimal norm. If an exact solution exist (i.e. if for some
          X the residual AX-B is exactly 0), then this exact solution is also the solution
          in least square sense. This implies that algorithms suited for least squares
          problems can also be used to solve exact problems, but the reverse is not true. 
        
        
          Decomposition algorithmsNamecoefficients matrixproblem typeLUsquareexact solution onlyCholeskysymmetric positive definiteexact solution onlyQRanyleast squares solutioneigen decompositionsquareexact solution onlySVDanyleast squares solution
          It is possible to use a simple array of double instead of a RealVector.
          In this case, the solution will be provided also as an array of double.
        
        
          It is possible to solve multiple systems with the same coefficient matrix 
          in one method call.  To do this, create a matrix whose column vectors correspond 
          to the constant vectors for the systems to be solved and use solve(RealMatrix),
          which returns a matrix with column vectors representing the solutions.";;0;;;27;99;27;95;26;18;25;7;16363;2;"solve";"org.apache.commons.math3.linear.DecompositionSolver.solve";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
316;955;14827;0;;"javamethod";293;293;955;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/tt[4]";0;0;8;2;"solution.getEntry(0)";"d";5;5;;"f";69;"(solution.getEntry(0)), y (solution.";"3.4 Solving linear systems
        
          The solve() methods of the DecompositionSolver
          interface support solving linear systems of equations of the form AX=B, either
          in linear sense or in least square sense. A RealMatrix instance is
          used to represent the coefficient matrix of the system. Solving the system is a
          two phases process: first the coefficient matrix is decomposed in some way and
          then a solver built from the decomposition solves the system. This allows to
          compute the decomposition and build the solver only once if several systems have
          to be solved with the same coefficient matrix.
        
        
          For example, to solve the linear system
          
           2x + 3y - 2z = 1
           -x + 7y + 6x = -2
           4x - 3y - 5z = 1
          
          Start by decomposing the coefficient matrix A (in this case using LU decomposition)
          and build a solver
          
RealMatrix coefficients =
    new Array2DRowRealMatrix(new double[][] { { 2, 3, -2 }, { -1, 7, 6 }, { 4, -3, -5 } },
                       false);
DecompositionSolver solver = new LUDecompositionImpl(coefficients).getSolver();
          
          Next create a RealVector array to represent the constant
          vector B and use solve(RealVector) to solve the system
          
RealVector constants = new ArrayRealVector(new double[] { 1, -2, 1 }, false);
RealVector solution = solver.solve(constants);
          
          The solution vector will contain values for x
          (solution.getEntry(0)), y (solution.getEntry(1)), 
          and z (solution.getEntry(2)) that solve the system.
        
        
          Each type of decomposition has its specific semantics and constraints on
          the coefficient matrix as shown in the following table. For algorithms that
          solve AX=B in least squares sense the value returned for X is such that the
          residual AX-B has minimal norm. If an exact solution exist (i.e. if for some
          X the residual AX-B is exactly 0), then this exact solution is also the solution
          in least square sense. This implies that algorithms suited for least squares
          problems can also be used to solve exact problems, but the reverse is not true. 
        
        
          Decomposition algorithmsNamecoefficients matrixproblem typeLUsquareexact solution onlyCholeskysymmetric positive definiteexact solution onlyQRanyleast squares solutioneigen decompositionsquareexact solution onlySVDanyleast squares solution
          It is possible to use a simple array of double instead of a RealVector.
          In this case, the solution will be provided also as an array of double.
        
        
          It is possible to solve multiple systems with the same coefficient matrix 
          in one method call.  To do this, create a matrix whose column vectors correspond 
          to the constant vectors for the systems to be solved and use solve(RealMatrix),
          which returns a matrix with column vectors representing the solutions.";954;0;;;27;99;27;95;26;18;25;7;14827;2;"getEntry";"org.apache.commons.math3.linear.RealVector.getEntry";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
318;957;14827;0;;"javamethod";295;295;957;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/tt[5]";0;0;8;2;"solution.getEntry(1)";"d";5;5;;"f";70;"getEntry(0)), y (solution.getEntry(1)),";"3.4 Solving linear systems
        
          The solve() methods of the DecompositionSolver
          interface support solving linear systems of equations of the form AX=B, either
          in linear sense or in least square sense. A RealMatrix instance is
          used to represent the coefficient matrix of the system. Solving the system is a
          two phases process: first the coefficient matrix is decomposed in some way and
          then a solver built from the decomposition solves the system. This allows to
          compute the decomposition and build the solver only once if several systems have
          to be solved with the same coefficient matrix.
        
        
          For example, to solve the linear system
          
           2x + 3y - 2z = 1
           -x + 7y + 6x = -2
           4x - 3y - 5z = 1
          
          Start by decomposing the coefficient matrix A (in this case using LU decomposition)
          and build a solver
          
RealMatrix coefficients =
    new Array2DRowRealMatrix(new double[][] { { 2, 3, -2 }, { -1, 7, 6 }, { 4, -3, -5 } },
                       false);
DecompositionSolver solver = new LUDecompositionImpl(coefficients).getSolver();
          
          Next create a RealVector array to represent the constant
          vector B and use solve(RealVector) to solve the system
          
RealVector constants = new ArrayRealVector(new double[] { 1, -2, 1 }, false);
RealVector solution = solver.solve(constants);
          
          The solution vector will contain values for x
          (solution.getEntry(0)), y (solution.getEntry(1)), 
          and z (solution.getEntry(2)) that solve the system.
        
        
          Each type of decomposition has its specific semantics and constraints on
          the coefficient matrix as shown in the following table. For algorithms that
          solve AX=B in least squares sense the value returned for X is such that the
          residual AX-B has minimal norm. If an exact solution exist (i.e. if for some
          X the residual AX-B is exactly 0), then this exact solution is also the solution
          in least square sense. This implies that algorithms suited for least squares
          problems can also be used to solve exact problems, but the reverse is not true. 
        
        
          Decomposition algorithmsNamecoefficients matrixproblem typeLUsquareexact solution onlyCholeskysymmetric positive definiteexact solution onlyQRanyleast squares solutioneigen decompositionsquareexact solution onlySVDanyleast squares solution
          It is possible to use a simple array of double instead of a RealVector.
          In this case, the solution will be provided also as an array of double.
        
        
          It is possible to solve multiple systems with the same coefficient matrix 
          in one method call.  To do this, create a matrix whose column vectors correspond 
          to the constant vectors for the systems to be solved and use solve(RealMatrix),
          which returns a matrix with column vectors representing the solutions.";956;0;;;27;99;27;95;26;18;25;7;14827;2;"getEntry";"org.apache.commons.math3.linear.RealVector.getEntry";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
320;959;14827;0;;"javamethod";297;297;959;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/tt[6]";0;0;8;2;"solution.getEntry(2)";"d";5;5;;"f";71;"and z (solution.getEntry(2)) that solve the system.";"3.4 Solving linear systems
        
          The solve() methods of the DecompositionSolver
          interface support solving linear systems of equations of the form AX=B, either
          in linear sense or in least square sense. A RealMatrix instance is
          used to represent the coefficient matrix of the system. Solving the system is a
          two phases process: first the coefficient matrix is decomposed in some way and
          then a solver built from the decomposition solves the system. This allows to
          compute the decomposition and build the solver only once if several systems have
          to be solved with the same coefficient matrix.
        
        
          For example, to solve the linear system
          
           2x + 3y - 2z = 1
           -x + 7y + 6x = -2
           4x - 3y - 5z = 1
          
          Start by decomposing the coefficient matrix A (in this case using LU decomposition)
          and build a solver
          
RealMatrix coefficients =
    new Array2DRowRealMatrix(new double[][] { { 2, 3, -2 }, { -1, 7, 6 }, { 4, -3, -5 } },
                       false);
DecompositionSolver solver = new LUDecompositionImpl(coefficients).getSolver();
          
          Next create a RealVector array to represent the constant
          vector B and use solve(RealVector) to solve the system
          
RealVector constants = new ArrayRealVector(new double[] { 1, -2, 1 }, false);
RealVector solution = solver.solve(constants);
          
          The solution vector will contain values for x
          (solution.getEntry(0)), y (solution.getEntry(1)), 
          and z (solution.getEntry(2)) that solve the system.
        
        
          Each type of decomposition has its specific semantics and constraints on
          the coefficient matrix as shown in the following table. For algorithms that
          solve AX=B in least squares sense the value returned for X is such that the
          residual AX-B has minimal norm. If an exact solution exist (i.e. if for some
          X the residual AX-B is exactly 0), then this exact solution is also the solution
          in least square sense. This implies that algorithms suited for least squares
          problems can also be used to solve exact problems, but the reverse is not true. 
        
        
          Decomposition algorithmsNamecoefficients matrixproblem typeLUsquareexact solution onlyCholeskysymmetric positive definiteexact solution onlyQRanyleast squares solutioneigen decompositionsquareexact solution onlySVDanyleast squares solution
          It is possible to use a simple array of double instead of a RealVector.
          In this case, the solution will be provided also as an array of double.
        
        
          It is possible to solve multiple systems with the same coefficient matrix 
          in one method call.  To do this, create a matrix whose column vectors correspond 
          to the constant vectors for the systems to be solved and use solve(RealMatrix),
          which returns a matrix with column vectors representing the solutions.";958;0;;;27;99;27;95;26;18;25;7;14827;2;"getEntry";"org.apache.commons.math3.linear.RealVector.getEntry";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
288;965;14665;0;;"javaclass";276;276;965;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/p[5]/tt";0;0;8;2;"RealVector";"d";2;2;;"f";77;"It is possible to use a simple array of double instead of a RealVector.";"It is possible to use a simple array of double instead of a RealVector.
          In this case, the solution will be provided also as an array of double.";;0;;;27;99;27;95;26;18;25;7;14665;2;"RealVector";"org.apache.commons.math3.linear.RealVector";2;"f";"t";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
325;966;16370;0;;"javamethod";301;301;966;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/p[6]/tt";0;0;8;2;"solve(RealMatrix)";"d";5;5;;"f";78;"to the constant vectors for the systems to be solved and use solve(RealMatrix),";"It is possible to solve multiple systems with the same coefficient matrix 
          in one method call.  To do this, create a matrix whose column vectors correspond 
          to the constant vectors for the systems to be solved and use solve(RealMatrix),
          which returns a matrix with column vectors representing the solutions.";;0;;;27;99;27;95;26;18;25;7;16370;2;"solve";"org.apache.commons.math3.linear.DecompositionSolver.solve";5;"f";"t";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
331;971;16516;0;;"javamethod";306;306;971;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[5]/p[2]/tt[5]";0;0;8;2;"getD()";"d";5;5;;"f";84;"getV(), getD() and getVT() methods of the";"The getEigenvalue(), getEigenvalues(), getEigenVector(),
          getV(), getD() and getVT() methods of the
          EigenDecomposition interface support solving eigenproblems of the form
          AX = lambda X where lambda is a real scalar.";;0;;;27;100;27;95;26;18;25;7;16516;2;"getD";"org.apache.commons.math3.linear.EigenDecomposition.getD";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
289;973;16461;0;;"javaclass";277;277;973;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[5]/p[2]/tt[7]";0;0;8;2;"EigenDecomposition";"d";2;2;;"f";86;"EigenDecomposition interface support solving eigenproblems of the form";"The getEigenvalue(), getEigenvalues(), getEigenVector(),
          getV(), getD() and getVT() methods of the
          EigenDecomposition interface support solving eigenproblems of the form
          AX = lambda X where lambda is a real scalar.";;0;;;27;100;27;95;26;18;25;7;16461;2;"EigenDecomposition";"org.apache.commons.math3.linear.EigenDecomposition";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
338;974;15729;0;;"javamethod";312;312;974;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[5]/p[3]/tt[1]";0;0;8;2;"getSingularValues()";"d";5;5;;"f";87;"The getSingularValues(), getU(), getS() and";"The getSingularValues(), getU(), getS() and
        getV() methods of the SingularValueDecomposition interface
        allow to solve singular values problems of the form AXi = lambda Yi where lambda is a
        real scalar, and where the Xi and Yi vectors form orthogonal bases of their respective
        vector spaces (which may have different dimensions).";;0;;;27;100;27;95;26;18;25;7;15729;2;"getSingularValues";"org.apache.commons.math3.linear.SingularValueDecomposition.getSingularValues";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
340;975;15752;0;;"javamethod";314;314;975;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[5]/p[3]/tt[2]";0;0;8;2;"getU()";"d";5;5;;"f";88;"The getSingularValues(), getU(), getS() and";"The getSingularValues(), getU(), getS() and
        getV() methods of the SingularValueDecomposition interface
        allow to solve singular values problems of the form AXi = lambda Yi where lambda is a
        real scalar, and where the Xi and Yi vectors form orthogonal bases of their respective
        vector spaces (which may have different dimensions).";;0;;;27;100;27;95;26;18;25;7;15752;2;"getU";"org.apache.commons.math3.linear.SingularValueDecomposition.getU";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
342;976;15724;0;;"javamethod";316;316;976;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[5]/p[3]/tt[3]";0;0;8;2;"getS()";"d";5;5;;"f";89;"The getSingularValues(), getU(), getS() and";"The getSingularValues(), getU(), getS() and
        getV() methods of the SingularValueDecomposition interface
        allow to solve singular values problems of the form AXi = lambda Yi where lambda is a
        real scalar, and where the Xi and Yi vectors form orthogonal bases of their respective
        vector spaces (which may have different dimensions).";;0;;;27;100;27;95;26;18;25;7;15724;2;"getS";"org.apache.commons.math3.linear.SingularValueDecomposition.getS";5;"f";"f";"Err:512";;0;"java";5;"method";"f";"f";"f";"f"
290;978;15688;0;;"javaclass";278;278;978;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[5]/p[3]/tt[5]";0;0;8;2;"SingularValueDecomposition";"d";2;2;;"f";91;"getV() methods of the SingularValueDecomposition interface";"The getSingularValues(), getU(), getS() and
        getV() methods of the SingularValueDecomposition interface
        allow to solve singular values problems of the form AXi = lambda Yi where lambda is a
        real scalar, and where the Xi and Yi vectors form orthogonal bases of their respective
        vector spaces (which may have different dimensions).";;0;;;27;100;27;95;26;18;25;7;15688;2;"SingularValueDecomposition";"org.apache.commons.math3.linear.SingularValueDecomposition";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
406;980;10554;0;;"javageneric";373;373;980;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[6]/ul/li[1]/a";0;0;8;2;"Complex";"d";30;30;;"f";94;"Complex";"Complex";;0;;;27;101;27;95;26;18;25;7;10554;2;"Complex";"org.apache.commons.math3.complex.Complex";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
407;981;12140;0;;"javageneric";374;374;981;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[6]/ul/li[2]/a";0;0;8;2;"Fraction";"d";30;30;;"f";95;"Fraction";"Fraction";;0;;;27;101;27;95;26;18;25;7;12140;2;"Fraction";"org.apache.commons.math3.fraction.Fraction";2;"f";"f";"Err:512";;0;"java";30;"unknown";"f";"f";"f";"f"
291;982;12104;0;;"javaclass";279;279;982;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[6]/ul/li[3]/a";0;0;8;2;"BigFraction";"d";2;2;;"f";96;"BigFraction";"BigFraction";;0;;;27;101;27;95;26;18;25;7;12104;2;"BigFraction";"org.apache.commons.math3.fraction.BigFraction";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
292;983;22650;0;;"javaclass";280;280;983;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[6]/ul/li[4]/a";0;0;8;2;"BigReal";"d";2;2;;"f";97;"BigReal";"BigReal";;0;;;27;101;27;95;26;18;25;7;22650;2;"BigReal";"org.apache.commons.math3.util.BigReal";2;"f";"f";"Err:512";;0;"java";2;"class";"t";"f";"f";"f"
409;59;12337;1;;"javageneric";375;;59;;"math/doc/manual3.1/math/userguide/fraction.html";"/html/body/div[4]/div/div/div[3]/p[3]/tt[2]";0;0;8;2;"parse";"d";30;30;;"f";68;"To parse a fraction from a string,";"Formatting's inverse operation, parsing, can also be performed by
          FractionFormat.  To parse a fraction from a string,
          simply call the parse method:";;0;;;27;13;27;1;26;2;25;7;12337;2;"parse";"org.apache.commons.math3.fraction.FractionFormat.parse";5;"f";"f";"Err:509";;0;"java";30;"unknown";"f";"f";"f";"f"
321;77;20361;0;;"javamethod";298;298;77;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[2]/dl/dd[3]/tt[3]";0;0;8;2;"reSeed()";"d";5;5;;"f";72;"call to a data generation method, or to a  reSeed() method";"By default, the implementation provided in RandomDataImpl
    uses the JDK-provided PRNG.  Like most other PRNGs, the JDK generator
    generates sequences of random numbers based on an initial ""seed value"".
    For the non-secure methods, starting with the same seed always produces the
    same sequence of values.  Secure sequences started with the same seeds will
    diverge. When a new RandomDataImpl is created, the underlying
    random number generators are not initialized.  The first
    call to a data generation method, or to a  reSeed() method
    initializes the appropriate generator.  If you do not explicitly seed the
    generator, it is by default seeded with the current time in milliseconds.
    Therefore, to generate sequences of random data values, you should always
    instantiate one  RandomDataImpl and use it
    repeatedly instead of creating new instances for subsequent values in the
    sequence.  For example, the following will generate a random sequence of 50
    long integers between 1 and 1,000,000, using the current time in
    milliseconds as the seed for the JDK PRNG:
    
RandomData randomData = new RandomDataImpl(); 
for (int i = 0; i < 1000; i++) {
    value = randomData.nextLong(1, 1000000);
}
    
    The following will not in general produce a good random sequence, since the
    PRNG is reseeded each time through the loop with the current time in
    milliseconds:
    
for (int i = 0; i < 1000; i++) {
    RandomDataImpl randomData = new RandomDataImpl(); 
    value = randomData.nextLong(1, 1000000);
}
    
    The following will produce the same random sequence each time it is
    executed:
    
RandomData randomData = new RandomDataImpl(); 
randomData.reSeed(1000);
for (int i = 0; i = 1000; i++) {
    value = randomData.nextLong(1, 1000000);
}
    
    The following will produce a different random sequence each time it is
     executed. 
    
RandomData randomData = new RandomDataImpl(); 
randomData.reSeedSecure(1000);
for (int i = 0; i < 1000; i++) {
    value = randomData.nextSecureLong(1, 1000000);
}";;0;;;27;15;27;2;26;4;25;7;20361;2;"reSeed";"org.apache.commons.math3.random.RandomDataImpl.reSeed";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
417;166;12107;0;;"javageneric";383;383;166;;"math/doc/manual3.1/math/userguide/optimization.html";"/html/body/div[4]/div/div/div[6]/p[2]/tt";0;0;8;2;"fit";"d";30;30;;"f";108;"For all provided curve fitters, the operating principle is the same.";"For all provided curve fitters, the operating principle is the same. Users must first
          create an instance of the fitter, then add the observed points and once the complete
          sample of observed points has been added they must call the fit method
          which will compute the parameters that best fit the sample. A weight is associated
          with each observed point, this allows to take into account uncertainty on some points
          when they come from loosy measurements for example. If no such information exist and
          all points should be treated the same, it is safe to put 1.0 as the weight for all points.";;0;;;27;25;27;3;26;1;25;7;12107;2;"fit";"org.apache.commons.math3.fitting.CurveFitter.fit";5;"f";"f";"Err:509";;0;"java";30;"unknown";"f";"f";"f";"f"
359;192;19943;1;;"javamethod";331;;192;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[6]/dl/dd[2]/tt[4]";0;0;8;2;"computeDistribution()";"d";5;5;;"f";125;"computeDistribution() opens and closes the input file";"When used in Digest Mode, the ValueServer reads the entire input file
      and estimates a probability density function based on data from the file.
      The estimation method is essentially the 
      
      Variable Kernel Method with Gaussian smoothing.  Once the density
      has been estimated, getNext() returns random values whose
      probability distribution matches the empirical distribution -- i.e., if
      you generate a large number of such values, their distribution should
      ""look like"" the distribution of the values in the input file.  The values
      are not stored in memory in this case either, so there is no limit to the
      size of the input file.  Here is an example:
      
      ValueServer vs = new ValueServer();
      vs.setValuesFileURL(url); 
      vs.setMode(ValueServer.DIGEST_MODE);
      vs.computeDistribution(500); //Read file and estimate distribution using 500 bins
      double value = vs.getNext();
      // ...Generate and use more values...
      
      See the javadoc for ValueServer and 
      EmpiricalDistribution for more details.  Note that 
      computeDistribution() opens and closes the input file
       by itself.";;0;;;27;26;27;2;26;4;25;7;19943;2;"computeDistribution";"org.apache.commons.math3.random.ValueServer.computeDistribution";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
361;202;19749;1;;"javamethod";332;;202;;"math/doc/manual3.1/math/userguide/random.html";"/html/body/div[4]/div/div/div[7]/p[1]/tt[3]";0;0;8;2;"nextDouble()";"d";5;5;;"f";131;"methods based on the primitive,  nextDouble().";"To enable alternative PRNGs to be ""plugged in"" to the commons-math data
      generation utilities and to provide a generic means to replace 
      java.util.Random in applications, a random generator 
      adaptor framework has been added to commons-math.  The
      
      RandomGenerator interface abstracts the public interface of
      java.util.Random and any implementation of this
      interface can be used as the source of random data for the commons-math 
      data generation classes.  An abstract base class, 
      
      AbstractRandomGenerator is provided to make implementation easier.
      This class provides default implementations of ""derived"" data generation
      methods based on the primitive,  nextDouble().
      To support generic replacement of java.util.Random, the 
      
      RandomAdaptor class is provided, which extends
      java.util.Random and wraps and delegates calls to
      a RandomGenerator instance.";;0;;;27;28;27;2;26;4;25;7;19749;2;"nextDouble";"org.apache.commons.math3.random.AbstractRandomGenerator.nextDouble";5;"f";"t";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
427;363;11315;2;;"javageneric";388;;363;;"math/doc/manual3.1/math/userguide/distribution.html";"/html/body/div[4]/div/div/div[2]/p[2]/tt[1]";0;0;8;2;"cumulativeProbability";"d";2;30;;"f";55;"using the cumulativeProbability methods.";"Using a distribution object, PDF and CDF probabilities are easily computed
          using the cumulativeProbability methods.  For a distribution
          X, and a domain value, x,
          cumulativeProbability computes P(X <= x)
          (i.e. the lower tail probability of X).";;0;;;27;61;27;59;26;12;25;7;11315;2;"cumulativeProbability";"org.apache.commons.math3.distribution.AbstractIntegerDistribution.cumulativeProbability";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
430;365;11315;2;;"javageneric";389;;365;;"math/doc/manual3.1/math/userguide/distribution.html";"/html/body/div[4]/div/div/div[2]/p[2]/tt[4]";0;0;8;2;"cumulativeProbability";"d";2;30;;"f";58;"cumulativeProbability computes P(X <= x)";"Using a distribution object, PDF and CDF probabilities are easily computed
          using the cumulativeProbability methods.  For a distribution
          X, and a domain value, x,
          cumulativeProbability computes P(X <= x)
          (i.e. the lower tail probability of X).";;0;;;27;61;27;59;26;12;25;7;11315;2;"cumulativeProbability";"org.apache.commons.math3.distribution.AbstractIntegerDistribution.cumulativeProbability";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
296;368;22858;0;;"javamethod";284;284;368;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[2]/p[1]/tt[2]";0;0;8;2;"addElementRolling(double)";"d";5;5;;"f";58;"addElementRolling(double) to basic list accessors.";"To maintain statistics based on a ""rolling"" window of values, a resizable 
    array implementation was developed and is provided for reuse in the 
    util package.  The core functionality provided is described in
    the documentation for the interface, 
    
    DoubleArray.  This interface adds one method,
    addElementRolling(double) to basic list accessors. 
    The addElementRolling method adds an element 
    (the actual parameter) to the end of the list and removes the first element
     in the list.";;0;;;27;53;27;51;26;11;25;7;22858;2;"addElementRolling";"org.apache.commons.math3.util.DoubleArray.addElementRolling";5;"f";"t";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
432;369;11318;1;;"javageneric";390;;369;;"math/doc/manual3.1/math/userguide/distribution.html";"/html/body/div[4]/div/div/div[2]/p[3]/tt[1]";0;0;8;2;"inverseCumulativeProbability";"d";2;30;;"f";61;"inverseCumulativeProbability methods.";"The inverse PDF and CDF values are just as easily computed using the
          inverseCumulativeProbability methods.  For a distribution X,
          and a probability, p, inverseCumulativeProbability
          computes the domain value x, such that:";;0;;;27;61;27;59;26;12;25;7;11318;2;"inverseCumulativeProbability";"org.apache.commons.math3.distribution.AbstractIntegerDistribution.inverseCumulativeProbability";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
433;370;22858;0;;"javageneric";391;391;370;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[2]/p[1]/tt[3]";0;0;8;2;"addElementRolling";"d";2;30;;"f";59;"The addElementRolling method adds an element";"To maintain statistics based on a ""rolling"" window of values, a resizable 
    array implementation was developed and is provided for reuse in the 
    util package.  The core functionality provided is described in
    the documentation for the interface, 
    
    DoubleArray.  This interface adds one method,
    addElementRolling(double) to basic list accessors. 
    The addElementRolling method adds an element 
    (the actual parameter) to the end of the list and removes the first element
     in the list.";;0;;;27;53;27;51;26;11;25;7;22858;2;"addElementRolling";"org.apache.commons.math3.util.DoubleArray.addElementRolling";5;"f";"t";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
436;371;11318;1;;"javageneric";392;;371;;"math/doc/manual3.1/math/userguide/distribution.html";"/html/body/div[4]/div/div/div[2]/p[3]/tt[4]";0;0;8;2;"inverseCumulativeProbability";"d";2;30;;"f";64;"and a probability, p, inverseCumulativeProbability";"The inverse PDF and CDF values are just as easily computed using the
          inverseCumulativeProbability methods.  For a distribution X,
          and a probability, p, inverseCumulativeProbability
          computes the domain value x, such that:";;0;;;27;61;27;59;26;12;25;7;11318;2;"inverseCumulativeProbability";"org.apache.commons.math3.distribution.AbstractIntegerDistribution.inverseCumulativeProbability";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
438;377;23039;1;;"javageneric";393;;377;;"math/doc/manual3.1/math/userguide/utilities.html";"/html/body/div[4]/div/div/div[2]/p[2]/tt[2]";0;0;8;2;"addElementRolling";"d";2;30;;"f";62;"When addElementRolling is invoked, the underlying";"The 
    ResizableDoubleArray class provides a configurable, array-backed
    implementation of the DoubleArray interface.
    When addElementRolling is invoked, the underlying
    array is expanded if necessary, the new element is added to the end of the
    array and the ""usable window"" of the array is moved forward, so that
    the first element is effectively discarded, what was the second becomes the
    first, and so on.  To efficiently manage storage, two maintenance
    operations need to be periodically performed -- orphaned elements at the
    beginning of the array need to be reclaimed and space for new elements at
    the end needs to be created.  Both of these operations are handled
    automatically, with frequency / effect driven by the configuration
    properties expansionMode, expansionFactor and
    contractionCriteria.  See 
    
    ResizableDoubleArray
    for details.";;0;;;27;53;27;51;26;11;25;7;23039;2;"addElementRolling";"org.apache.commons.math3.util.ResizableDoubleArray.addElementRolling";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
300;476;20770;0;;"javamethod";286;286;476;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[3]/tt[1]";0;0;8;2;"evaluate()";"d";5;5;;"f";63;"evaluate() methods that take double[] arrays as arguments";"The top level interface is
          
          UnivariateStatistic.
          This interface, implemented by all statistics, consists of
          evaluate() methods that take double[] arrays as arguments
          and return the value of the statistic.   This interface is extended by
          
          StorelessUnivariateStatistic, which adds increment(),
          getResult() and associated methods to support
          ""storageless"" implementations that maintain counters, sums or other
          state information as values are added using the increment()
          method.";;0;;;27;71;27;69;26;14;25;7;20770;2;"evaluate";"org.apache.commons.math3.stat.descriptive.UnivariateStatistic.evaluate";5;"f";"t";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
308;482;20824;0;;"javamethod";288;288;482;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[3]/tt[2]";0;0;8;2;"increment()";"d";5;5;;"f";65;"StorelessUnivariateStatistic, which adds increment(),";"The top level interface is
          
          UnivariateStatistic.
          This interface, implemented by all statistics, consists of
          evaluate() methods that take double[] arrays as arguments
          and return the value of the statistic.   This interface is extended by
          
          StorelessUnivariateStatistic, which adds increment(),
          getResult() and associated methods to support
          ""storageless"" implementations that maintain counters, sums or other
          state information as values are added using the increment()
          method.";;0;;;27;71;27;69;26;14;25;7;20824;2;"increment";"org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic.increment";5;"f";"t";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
311;487;20821;0;;"javamethod";290;290;487;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[3]/tt[3]";0;0;8;2;"getResult()";"d";5;5;;"f";66;"getResult() and associated methods to support";"The top level interface is
          
          UnivariateStatistic.
          This interface, implemented by all statistics, consists of
          evaluate() methods that take double[] arrays as arguments
          and return the value of the statistic.   This interface is extended by
          
          StorelessUnivariateStatistic, which adds increment(),
          getResult() and associated methods to support
          ""storageless"" implementations that maintain counters, sums or other
          state information as values are added using the increment()
          method.";;0;;;27;71;27;69;26;14;25;7;20821;2;"getResult";"org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic.getResult";5;"f";"t";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
314;490;20824;0;;"javamethod";292;292;490;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/p[3]/tt[4]";0;0;8;2;"increment()";"d";5;5;;"f";67;"state information as values are added using the increment()";"The top level interface is
          
          UnivariateStatistic.
          This interface, implemented by all statistics, consists of
          evaluate() methods that take double[] arrays as arguments
          and return the value of the statistic.   This interface is extended by
          
          StorelessUnivariateStatistic, which adds increment(),
          getResult() and associated methods to support
          ""storageless"" implementations that maintain counters, sums or other
          state information as values are added using the increment()
          method.";;0;;;27;71;27;69;26;14;25;7;20824;2;"increment";"org.apache.commons.math3.stat.descriptive.StorelessUnivariateStatistic.increment";5;"f";"t";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
444;537;10642;0;;"javageneric";399;399;537;;"math/doc/manual3.1/math/userguide/complex.html";"/html/body/div[4]/div/div/div[4]/p[4]/tt[2]";0;0;8;2;"parse";"d";30;30;;"f";79;"simply call the parse method:";"Formatting inverse operation, parsing, can also be performed by
          ComplexFormat.  Parse a complex number from a string,
          simply call the parse method:";;0;;;27;82;27;78;26;15;25;7;10642;2;"parse";"org.apache.commons.math3.complex.ComplexFormat.parse";5;"f";"f";"Err:509";;0;"java";30;"unknown";"f";"f";"f";"f"
446;548;20766;0;;"javageneric";400;400;548;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[2]/dl/dd[6]/tt[4]";0;0;8;2;"addValue";"d";2;30;;"f";96;"addValue(3);";"There are two ways to do this using AggregateSummaryStatistics. 
        The first is to use an AggregateSummaryStatistics instance
        to accumulate overall statistics contributed by SummaryStatistics
        instances created using
        
        AggregateSummaryStatistics.createContributingStatistics():
        
// Create a AggregateSummaryStatistics instance to accumulate the overall statistics 
// and AggregatingSummaryStatistics for the subsamples
AggregateSummaryStatistics aggregate = new AggregateSummaryStatistics();
SummaryStatistics setOneStats = aggregate.createContributingStatistics();
SummaryStatistics setTwoStats = aggregate.createContributingStatistics();
// Add values to the subsample aggregates
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Full sample data is reported by the aggregate
double totalSampleSum = aggregate.getSum();
        
        The above approach has the disadvantages that the addValue calls must be synchronized on the
        SummaryStatistics instance maintained by the aggregate and each value addition updates the
        aggregate as well as the subsample. For applications that can wait to do the aggregation until all values
        have been added, a static
        
          aggregate method is available, as shown in the following example.
        This method should be used when aggregation needs to be done across threads.
        
// Create SummaryStatistics instances for the subsample data
SummaryStatistics setOneStats = new SummaryStatistics();
SummaryStatistics setTwoStats = new SummaryStatistics();
// Add values to the subsample SummaryStatistics instances
setOneStats.addValue(2);
setOneStats.addValue(3);
setTwoStats.addValue(2);
setTwoStats.addValue(4);
...
// Aggregate the subsample statistics
Collection<SummaryStatistics> aggregate = new ArrayList<SummaryStatistics>();
aggregate.add(setOneStats);
aggregate.add(setTwoStats);
StatisticalSummary aggregatedStats = AggregateSummaryStatistics.aggregate(aggregate);

// Full sample data is reported by aggregatedStats
double totalSampleSum = aggregatedStats.getSum();";;0;;;27;71;27;69;26;14;25;7;20766;2;"addValue";"org.apache.commons.math3.stat.descriptive.SummaryStatistics.addValue";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
454;588;22160;0;;"javageneric";403;403;588;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[5]/a[1]";0;0;8;2;"newSampleData";"d";2;30;;"f";123;"AbstractMultipleLinearRegression#newSampleData(double[],int,int),";"Data for OLS models can be loaded in a single double[] array, consisting of concatenated rows of data, each containing
           the regressand (Y) value, followed by regressor values; or using a double[][] array with rows corresponding to
           observations. GLS models also require a double[][] array representing the covariance matrix of the error terms.  See
           
           AbstractMultipleLinearRegression#newSampleData(double[],int,int),  
           
           OLSMultipleLinearRegression#newSampleData(double[], double[][]) and 
           
           GLSMultipleLinearRegression#newSampleData(double[],double[][],double[][]) for details.";;0;;;27;74;27;69;26;14;25;7;22160;2;"newSampleData";"org.apache.commons.math3.stat.regression.AbstractMultipleLinearRegression.newSampleData";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
461;594;22065;3;;"javageneric";404;;594;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[5]/a[2]";0;0;8;2;"newSampleData";"d";2;30;;"f";124;"OLSMultipleLinearRegression#newSampleData(double[], double[][]) and";"Data for OLS models can be loaded in a single double[] array, consisting of concatenated rows of data, each containing
           the regressand (Y) value, followed by regressor values; or using a double[][] array with rows corresponding to
           observations. GLS models also require a double[][] array representing the covariance matrix of the error terms.  See
           
           AbstractMultipleLinearRegression#newSampleData(double[],int,int),  
           
           OLSMultipleLinearRegression#newSampleData(double[], double[][]) and 
           
           GLSMultipleLinearRegression#newSampleData(double[],double[][],double[][]) for details.";;0;;;27;74;27;69;26;14;25;7;22065;2;"newSampleData";"org.apache.commons.math3.stat.regression.OLSMultipleLinearRegression.newSampleData";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
463;600;22079;1;;"javageneric";405;;600;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[5]/p[5]/a[3]";0;0;8;2;"newSampleData";"d";2;30;;"f";125;"GLSMultipleLinearRegression#newSampleData(double[],double[][],double[][]) for details.";"Data for OLS models can be loaded in a single double[] array, consisting of concatenated rows of data, each containing
           the regressand (Y) value, followed by regressor values; or using a double[][] array with rows corresponding to
           observations. GLS models also require a double[][] array representing the covariance matrix of the error terms.  See
           
           AbstractMultipleLinearRegression#newSampleData(double[],int,int),  
           
           OLSMultipleLinearRegression#newSampleData(double[], double[][]) and 
           
           GLSMultipleLinearRegression#newSampleData(double[],double[][],double[][]) for details.";;0;;;27;74;27;69;26;14;25;7;22079;2;"newSampleData";"org.apache.commons.math3.stat.regression.GLSMultipleLinearRegression.newSampleData";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
466;645;13243;0;;"javageneric";406;406;645;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[13]/tt[3]";0;0;8;2;"applyTo(Vector3D)";"d";5;30;;"f";65;"generic methods: applyTo(Vector3D) and";"These examples show that a rotation means what the user wants it to
          mean, so this class does not push the user towards one specific
          definition and hence does not provide methods like
          projectVectorIntoDestinationFrame or
          computeTransformedDirection. It provides simpler and more
          generic methods: applyTo(Vector3D) and
          applyInverseTo(Vector3D).";;0;;;27;85;27;83;26;16;25;7;13243;2;"applyTo";"org.apache.commons.math3.geometry.euclidean.threed.Rotation.applyTo";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
470;646;20618;1;;"javageneric";407;;646;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[7]/p[1]/a[1]";0;0;8;2;"org.apache.commons.math3.stat.correlation";"d";8;30;;"f";147;"org.apache.commons.math3.stat.correlation package computes covariances";"The 
          org.apache.commons.math3.stat.correlation package computes covariances
          and correlations for pairs of arrays or columns of a matrix.
          
          Covariance computes covariances, 
          
          PearsonsCorrelation provides Pearson's Product-Moment correlation coefficients and
          
          SpearmansCorrelation computes Spearman's rank correlation.";644;0;;;27;76;27;69;26;14;25;7;20618;2;"correlation";"org.apache.commons.math3.stat.correlation.SpearmansCorrelation.correlation";5;"f";"f";"#REF!";;0;"java";8;"field";"f";"f";"f";"f"
471;661;13243;0;;"javageneric";408;408;661;;"math/doc/manual3.1/math/userguide/geometry.html";"/html/body/div[4]/div/div/div[2]/p[14]/tt[7]";0;0;8;2;"applyTo(Rotation)";"d";5;30;;"f";73;"provides the methods: applyTo(Rotation) and";"Since a rotation is basically a vectorial operator, several
          rotations can be composed together and the composite operation
          r = r1 o r2 (which means that for each
          vector u, r(u) = r1(r2(u)))
          is also a rotation. Hence we can consider that in addition to vectors, a
          rotation can be applied to other rotations as well (or to itself). With our
          previous notations, we would say we can apply r1 to
          r2 and the result we get is r =
          r1 o r2. For this purpose, the class
          provides the methods: applyTo(Rotation) and
          applyInverseTo(Rotation).";;0;;;27;85;27;83;26;16;25;7;13243;2;"applyTo";"org.apache.commons.math3.geometry.euclidean.threed.Rotation.applyTo";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
365;719;21727;0;;"javamethod";335;335;719;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/ul/li[4]/tt[1]";0;0;8;2;"gTest(expected, observed)";"d";5;5;;"f";219;"gTest(expected, observed), which is the tail probability beyond";"The G test implementation provides two p-values:
           gTest(expected, observed), which is the tail probability beyond
           g(expected, observed) in the ChiSquare distribution with degrees
           of freedom one less than the common length of input arrays and 
           gTestIntrinsic(expected, observed) which is the same tail
           probability computed using a ChiSquare distribution with one less degeree
           of freedom.";;0;;;27;77;27;69;26;14;25;7;21727;2;"gTest";"org.apache.commons.math3.stat.inference.TestUtils.gTest";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
368;720;21712;1;;"javamethod";336;;720;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/ul/li[4]/tt[2]";0;0;8;2;"g(expected, observed)";"d";5;5;;"f";220;"g(expected, observed) in the ChiSquare distribution with degrees";"The G test implementation provides two p-values:
           gTest(expected, observed), which is the tail probability beyond
           g(expected, observed) in the ChiSquare distribution with degrees
           of freedom one less than the common length of input arrays and 
           gTestIntrinsic(expected, observed) which is the same tail
           probability computed using a ChiSquare distribution with one less degeree
           of freedom.";;0;;;27;77;27;69;26;14;25;7;21712;2;"g";"org.apache.commons.math3.stat.inference.TestUtils.g";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
369;721;21770;0;;"javamethod";337;337;721;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/ul/li[4]/tt[3]";0;0;8;2;"gTestIntrinsic(expected, observed)";"d";5;5;;"f";221;"gTestIntrinsic(expected, observed) which is the same tail";"The G test implementation provides two p-values:
           gTest(expected, observed), which is the tail probability beyond
           g(expected, observed) in the ChiSquare distribution with degrees
           of freedom one less than the common length of input arrays and 
           gTestIntrinsic(expected, observed) which is the same tail
           probability computed using a ChiSquare distribution with one less degeree
           of freedom.";;0;;;27;77;27;69;26;14;25;7;21770;2;"gTestIntrinsic";"org.apache.commons.math3.stat.inference.TestUtils.gTestIntrinsic";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
476;749;20564;1;;"javageneric";410;;749;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[7]/tt[3]";0;0;8;2;"sum((expected[i] - observed[i])^2 / expected[i])";"d";30;30;;"f";250;"sum((expected[i] - observed[i])^2 / expected[i])";"To compute a chi-square statistic measuring the agreement between a
          long[] array of observed counts and a double[]
          array of expected counts, use:
          
long[] observed = {10, 9, 11};
double[] expected = {10.1, 9.8, 10.3};
System.out.println(TestUtils.chiSquare(expected, observed));
          
          the value displayed will be
          sum((expected[i] - observed[i])^2 / expected[i])";;0;;;27;77;27;69;26;14;25;7;20564;2;"sum";"org.apache.commons.math3.stat.StatUtils.sum";5;"f";"f";"Err:509";;0;"java";30;"unknown";"f";"f";"f";"f"
477;762;20558;0;;"javageneric";411;411;762;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[10]/tt[3]";0;0;8;2;"sum((counts[i][j] - expected[i][j])^2/expected[i][j])";"d";30;30;;"f";263;"sum((counts[i][j] - expected[i][j])^2/expected[i][j])";"To compute a chi-square statistic statistic associated with a
          
          chi-square test of independence based on a two-dimensional (long[][])
          counts array viewed as a two-way table, use:
          
TestUtils.chiSquareTest(counts);
          
          The rows of the 2-way table are
          count[0], ... , count[count.length - 1]. 
          The chi-square statistic returned is
          sum((counts[i][j] - expected[i][j])^2/expected[i][j])
          where the sum is taken over all table entries and
          expected[i][j] is the product of the row and column sums at
          row i, column j divided by the total count.";;0;;;27;77;27;69;26;14;25;7;20558;2;"sum";"org.apache.commons.math3.stat.StatUtils.sum";5;"f";"f";"Err:509";;0;"java";30;"unknown";"f";"f";"f";"f"
480;782;21720;1;;"javageneric";412;;782;;"math/doc/manual3.1/math/userguide/stat.html";"/html/body/div[4]/div/div/div[8]/dl/dd[14]/dd[4]/tt";0;0;8;2;"gDataSetsComparison";"d";2;30;;"f";286;"gDataSetsComparison for the test statistic";"To evaluate the hypothesis that two sets of counts come from the
          same underlying distribution, use long[] arrays for the counts and
          gDataSetsComparison for the test statistic
          
long[] obs1 = new long[]{268, 199, 42};
long[] obs2 = new long[]{807, 759, 184};
System.out.println(TestUtils.gDataSetsComparison(obs1, obs2)); // G statistic
System.out.println(TestUtils.gTestDataSetsComparison(obs1, obs2)); // p-value";;0;;;27;77;27;69;26;14;25;7;21720;2;"gDataSetsComparison";"org.apache.commons.math3.stat.inference.TestUtils.gDataSetsComparison";5;"f";"f";"Err:509";;0;"java";2;"class";"t";"f";"f";"f"
481;831;10510;0;;"javageneric";413;413;831;;"math/doc/manual3.1/math/userguide/analysis.html";"/html/body/div[4]/div/div/div[3]/p[4]/tt[1]";0;0;8;2;"solve";"d";30;30;;"f";86;"In order to use the root-finding features, first a solver object must";"In order to use the root-finding features, first a solver object must
          be created by calling its constructor, often providing relative and absolute
          accuracy. Using a solver object, roots of functions
          are easily found using the solve methods.  These methods takes
          a maximum iteration count maxEval, a function f,
          and either two domain values, min and max, or a
          startValue as parameters. If the maximal number of iterations
          count is exceeded, non-convergence is assumed and a ConvergenceException
          exception is thrown.  A suggested value is 100, which should be plenty, given that a
          bisection algorithm can't get any more accurate after 52 iterations because of the
          number of mantissa bits in a double precision floating point number. If a number of
          ill-conditioned problems is to be solved, this number can be decreased in order
          to avoid wasting time.
          Bracketed
          solvers also take an allowed solution
          enum parameter to specify which side of the final convergence interval should be
          selected as the root. It can be ANY_SIDE, LEFT_SIDE, RIGHT_SIDE,
          BELOW_SIDE or ABOVE_SIDE. Left and right are used to specify the root along
          the function parameter axis while below and above refer to the function value axis. The solve methods
          compute a value c such that:";;0;;;27;90;27;87;26;17;25;7;10510;2;"solve";"org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver.solve";5;"f";"f";"Err:509";;0;"java";30;"unknown";"f";"f";"f";"f"
298;948;16363;0;;"javamethod";285;285;948;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[4]/p[1]/tt[1]";0;0;8;2;"solve()";"d";5;5;;"f";63;"The solve() methods of the DecompositionSolver";"The solve() methods of the DecompositionSolver
          interface support solving linear systems of equations of the form AX=B, either
          in linear sense or in least square sense. A RealMatrix instance is
          used to represent the coefficient matrix of the system. Solving the system is a
          two phases process: first the coefficient matrix is decomposed in some way and
          then a solver built from the decomposition solves the system. This allows to
          compute the decomposition and build the solver only once if several systems have
          to be solved with the same coefficient matrix.";;0;;;27;99;27;95;26;18;25;7;16363;2;"solve";"org.apache.commons.math3.linear.DecompositionSolver.solve";5;"f";"t";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
328;970;16587;1;;"javamethod";303;;970;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[5]/p[2]/tt[4]";0;0;8;2;"getV()";"d";5;5;;"f";83;"getV(), getD() and getVT() methods of the";"The getEigenvalue(), getEigenvalues(), getEigenVector(),
          getV(), getD() and getVT() methods of the
          EigenDecomposition interface support solving eigenproblems of the form
          AX = lambda X where lambda is a real scalar.";;0;;;27;100;27;95;26;18;25;7;16587;2;"getV";"org.apache.commons.math3.linear.EigenDecomposition.getV";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
334;972;16591;1;;"javamethod";308;;972;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[5]/p[2]/tt[6]";0;0;8;2;"getVT()";"d";5;5;;"f";85;"getV(), getD() and getVT() methods of the";"The getEigenvalue(), getEigenvalues(), getEigenVector(),
          getV(), getD() and getVT() methods of the
          EigenDecomposition interface support solving eigenproblems of the form
          AX = lambda X where lambda is a real scalar.";;0;;;27;100;27;95;26;18;25;7;16591;2;"getVT";"org.apache.commons.math3.linear.EigenDecomposition.getVT";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
344;977;15762;0;;"javamethod";318;318;977;;"math/doc/manual3.1/math/userguide/linear.html";"/html/body/div[4]/div/div/div[5]/p[3]/tt[4]";0;0;8;2;"getV()";"d";5;5;;"f";90;"getV() methods of the SingularValueDecomposition interface";"The getSingularValues(), getU(), getS() and
        getV() methods of the SingularValueDecomposition interface
        allow to solve singular values problems of the form AXi = lambda Yi where lambda is a
        real scalar, and where the Xi and Yi vectors form orthogonal bases of their respective
        vector spaces (which may have different dimensions).";;0;;;27;100;27;95;26;18;25;7;15762;2;"getV";"org.apache.commons.math3.linear.SingularValueDecomposition.getV";5;"f";"f";"Err:509";;0;"java";5;"method";"f";"f";"f";"f"
