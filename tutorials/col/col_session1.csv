,"Lesson: Algorithms","Lesson: Algorithms","<div id=""PageTitle""> 
 <h1>Lesson: Algorithms</h1> 
</div> 
<p>The <em>polymorphic algorithms</em> described here are pieces of reusable functionality provided by the Java platform. All of them come from the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html""><code> 
   <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
     Collections 
   </clt></code></a> class, and all take the form of static methods whose first argument is the collection on which the operation is to be performed. The great majority of the algorithms provided by the Java platform operate on <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code></a> instances, but a few of them operate on arbitrary <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html""><code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code></a> instances. This section briefly describes the following algorithms:</p> 
<ul> 
 <li><a href=""#sorting"">Sorting</a></li> 
 <li><a href=""#shuffling"">Shuffling</a></li> 
 <li><a href=""#rdm"">Routine Data Manipulation</a></li> 
 <li><a href=""#searching"">Searching</a></li> 
 <li><a href=""#composition"">Composition</a></li> 
 <li><a href=""#fev"">Finding Extreme Values</a></li> 
</ul>","Collections","java.util.Collections","class",0
,"Lesson: Algorithms","Lesson: Algorithms","<div id=""PageTitle""> 
 <h1>Lesson: Algorithms</h1> 
</div> 
<p>The <em>polymorphic algorithms</em> described here are pieces of reusable functionality provided by the Java platform. All of them come from the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html""><code> 
   <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
     Collections 
   </clt></code></a> class, and all take the form of static methods whose first argument is the collection on which the operation is to be performed. The great majority of the algorithms provided by the Java platform operate on <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code></a> instances, but a few of them operate on arbitrary <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html""><code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code></a> instances. This section briefly describes the following algorithms:</p> 
<ul> 
 <li><a href=""#sorting"">Sorting</a></li> 
 <li><a href=""#shuffling"">Shuffling</a></li> 
 <li><a href=""#rdm"">Routine Data Manipulation</a></li> 
 <li><a href=""#searching"">Searching</a></li> 
 <li><a href=""#composition"">Composition</a></li> 
 <li><a href=""#fev"">Finding Extreme Values</a></li> 
</ul>","List","java.util.List","class",0
,"Lesson: Algorithms","Lesson: Algorithms","<div id=""PageTitle""> 
 <h1>Lesson: Algorithms</h1> 
</div> 
<p>The <em>polymorphic algorithms</em> described here are pieces of reusable functionality provided by the Java platform. All of them come from the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html""><code> 
   <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
     Collections 
   </clt></code></a> class, and all take the form of static methods whose first argument is the collection on which the operation is to be performed. The great majority of the algorithms provided by the Java platform operate on <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code></a> instances, but a few of them operate on arbitrary <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collection.html""><code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code></a> instances. This section briefly describes the following algorithms:</p> 
<ul> 
 <li><a href=""#sorting"">Sorting</a></li> 
 <li><a href=""#shuffling"">Shuffling</a></li> 
 <li><a href=""#rdm"">Routine Data Manipulation</a></li> 
 <li><a href=""#searching"">Searching</a></li> 
 <li><a href=""#composition"">Composition</a></li> 
 <li><a href=""#fev"">Finding Extreme Values</a></li> 
</ul>","Collection","java.util.Collection","class",0
,"Lesson: Algorithms","Sorting","<h2>Sorting</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> algorithm reorders a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> so that its elements are in ascending order according to an ordering relationship. Two forms of the operation are provided. The simple form takes a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and sorts it according to its elements' <em>natural ordering</em>. If you're unfamiliar with the concept of natural ordering, read the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/order.html"">Object Ordering</a> section.</p> 
<p>The <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> operation uses a slightly optimized <em>merge sort</em> algorithm that is fast and stable:</p> 
<ul> 
 <li><b>Fast</b>: It is guaranteed to run in <code>n log(n)</code> time and runs substantially faster on nearly sorted lists. Empirical tests showed it to be as fast as a highly optimized quicksort. A quicksort is generally considered to be faster than a merge sort but isn't stable and doesn't guarantee <code>n log(n)</code> performance.</li> 
 <li><b>Stable</b>: It doesn't reorder equal elements. This is important if you sort the same list repeatedly on different attributes. If a user of a mail program sorts the inbox by mailing date and then sorts it by sender, the user naturally expects that the now-contiguous list of messages from a given sender will (still) be sorted by mailing date. This is guaranteed only if the second sort was stable.</li> 
</ul>","Collections","java.util.Collections","class",0
,"Lesson: Algorithms","Sorting","<h2>Sorting</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> algorithm reorders a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> so that its elements are in ascending order according to an ordering relationship. Two forms of the operation are provided. The simple form takes a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and sorts it according to its elements' <em>natural ordering</em>. If you're unfamiliar with the concept of natural ordering, read the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/order.html"">Object Ordering</a> section.</p> 
<p>The <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> operation uses a slightly optimized <em>merge sort</em> algorithm that is fast and stable:</p> 
<ul> 
 <li><b>Fast</b>: It is guaranteed to run in <code>n log(n)</code> time and runs substantially faster on nearly sorted lists. Empirical tests showed it to be as fast as a highly optimized quicksort. A quicksort is generally considered to be faster than a merge sort but isn't stable and doesn't guarantee <code>n log(n)</code> performance.</li> 
 <li><b>Stable</b>: It doesn't reorder equal elements. This is important if you sort the same list repeatedly on different attributes. If a user of a mail program sorts the inbox by mailing date and then sorts it by sender, the user naturally expects that the now-contiguous list of messages from a given sender will (still) be sorted by mailing date. This is guaranteed only if the second sort was stable.</li> 
</ul>","List","java.util.List","class",0
,"Lesson: Algorithms","Sorting - part 2","<h3>Sorting - part 2</h3>
<p>The following <a class=""SourceLink"" target=""_blank"" href=""examples/Sort.java"" onclick=""showCode('../../displayCode.html', 'examples/Sort.java'); return false;""><code>trivial program</code></a> prints out its arguments in lexicographic (alphabetical) order.</p> 
<div class=""codeblock""> 
 <pre>
import java.util.*;
public class Sort {
public static void main(String[] args) {
List&lt;String&gt; list = Arrays.asList(args);
Collections.sort(list);
System.out.println(list);
}
}
</pre> 
</div> 
<p>Let's run the program.</p> 
<div class=""codeblock""> 
 <pre>
% java Sort i walk the line
</pre> 
</div> 
<p>The following output is produced.</p> 
<div class=""codeblock""> 
 <pre>
[i, line, the, walk]
</pre> 
</div> 
<p>The program was included only to show you that algorithms really are as easy to use as they appear to be.</p> 
<p>The second form of <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> takes a <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html""><code> 
   <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
     Comparator 
   </clt></code></a> in addition to a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and sorts the elements with the <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code>. Suppose you want to print out the anagram groups from our earlier example in reverse order of size ? largest anagram group first. The example that follows shows you how to achieve this with the help of the second form of the <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> method.</p>","Collections","java.util.Collections","class",0
,"Lesson: Algorithms","Sorting - part 2","<h3>Sorting - part 2</h3>
<p>The following <a class=""SourceLink"" target=""_blank"" href=""examples/Sort.java"" onclick=""showCode('../../displayCode.html', 'examples/Sort.java'); return false;""><code>trivial program</code></a> prints out its arguments in lexicographic (alphabetical) order.</p> 
<div class=""codeblock""> 
 <pre>
import java.util.*;
public class Sort {
public static void main(String[] args) {
List&lt;String&gt; list = Arrays.asList(args);
Collections.sort(list);
System.out.println(list);
}
}
</pre> 
</div> 
<p>Let's run the program.</p> 
<div class=""codeblock""> 
 <pre>
% java Sort i walk the line
</pre> 
</div> 
<p>The following output is produced.</p> 
<div class=""codeblock""> 
 <pre>
[i, line, the, walk]
</pre> 
</div> 
<p>The program was included only to show you that algorithms really are as easy to use as they appear to be.</p> 
<p>The second form of <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> takes a <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html""><code> 
   <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
     Comparator 
   </clt></code></a> in addition to a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and sorts the elements with the <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code>. Suppose you want to print out the anagram groups from our earlier example in reverse order of size ? largest anagram group first. The example that follows shows you how to achieve this with the help of the second form of the <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> method.</p>","Comparator","java.util.Comparator","class",0
,"Lesson: Algorithms","Sorting - part 2","<h3>Sorting - part 2</h3>
<p>The following <a class=""SourceLink"" target=""_blank"" href=""examples/Sort.java"" onclick=""showCode('../../displayCode.html', 'examples/Sort.java'); return false;""><code>trivial program</code></a> prints out its arguments in lexicographic (alphabetical) order.</p> 
<div class=""codeblock""> 
 <pre>
import java.util.*;
public class Sort {
public static void main(String[] args) {
List&lt;String&gt; list = Arrays.asList(args);
Collections.sort(list);
System.out.println(list);
}
}
</pre> 
</div> 
<p>Let's run the program.</p> 
<div class=""codeblock""> 
 <pre>
% java Sort i walk the line
</pre> 
</div> 
<p>The following output is produced.</p> 
<div class=""codeblock""> 
 <pre>
[i, line, the, walk]
</pre> 
</div> 
<p>The program was included only to show you that algorithms really are as easy to use as they appear to be.</p> 
<p>The second form of <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> takes a <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html""><code> 
   <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
     Comparator 
   </clt></code></a> in addition to a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and sorts the elements with the <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code>. Suppose you want to print out the anagram groups from our earlier example in reverse order of size ? largest anagram group first. The example that follows shows you how to achieve this with the help of the second form of the <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> method.</p>","List","java.util.List","class",0
,"Lesson: Algorithms","Sorting - part 3","<h3>Sorting - part 3</h3>
<p>Recall that the anagram groups are stored as values in a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>, in the form of <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> instances. The revised printing code iterates through the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>'s values view, putting every <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> that passes the minimum-size test into a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> of <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>s. Then the code sorts this <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>, using a <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code> that expects <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> instances, and implements reverse size-ordering. Finally, the code iterates through the sorted <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>, printing its elements (the anagram groups). The following code replaces the printing code at the end of the <code>main</code> method in the <code>Anagrams</code> example.</p> 
<div class=""codeblock""> 
 <pre>
// Make a List of all anagram groups above size threshold.
List&lt;List&lt;String&gt;&gt; winners = new ArrayList&lt;List&lt;String&gt;&gt;();
for (List&lt;String&gt; l : m.values())
if (l.size() &gt;= minGroupSize)
winners.add(l);
// Sort anagram groups according to size
Collections.sort(winners, new Comparator&lt;List&lt;String&gt;&gt;() {
public int compare(List&lt;String&gt; o1, List&lt;String&gt; o2) {
return o2.size() - o1.size();
}});
// Print anagram groups.
for (List&lt;String&gt; l : winners)
System.out.println(l.size() + &quot;: &quot; + l);
</pre> 
</div> 
<p>Running <a class=""SourceLink"" target=""_blank"" href=""examples/Anagrams2.java"" onclick=""showCode('../../displayCode.html', 'examples/Anagrams2.java'); return false;""><code>the program</code></a> on the <a class=""SourceLink"" target=""_blank"" href=""../interfaces/examples/dictionary.txt"" onclick=""showCode('../../displayCode.html', '../interfaces/examples/dictionary.txt'); return false;""><code>same dictionary</code></a> as in <a class=""TutorialLink"" target=""_top"" href=""../interfaces/map.html"">The Map Interface</a> section, with the same minimum anagram group size (eight), produces the following output.</p> 
<div class=""codeblock""> 
 <pre>
12: [apers, apres, asper, pares, parse, pears, prase,
presa, rapes, reaps, spare, spear]
11: [alerts, alters, artels, estral, laster, ratels,
salter, slater, staler, stelar, talers]
10: [least, setal, slate, stale, steal, stela, taels,
tales, teals, tesla]
9: [estrin, inerts, insert, inters, niters, nitres,
sinter, triens, trines]
9: [capers, crapes, escarp, pacers, parsec, recaps,
scrape, secpar, spacer]
9: [palest, palets, pastel, petals, plates, pleats,
septal, staple, tepals]
9: [anestri, antsier, nastier, ratines, retains, retinas,
retsina, stainer, stearin]
8: [lapse, leaps, pales, peals, pleas, salep, sepal, spale]
8: [aspers, parses, passer, prases, repass, spares,
sparse, spears]
8: [enters, nester, renest, rentes, resent, tenser,
ternes,treens]
8: [arles, earls, lares, laser, lears, rales, reals, seral]
8: [earings, erasing, gainers, reagins, regains, reginas,
searing, seringa]
8: [peris, piers, pries, prise, ripes, speir, spier, spire]
8: [ates, east, eats, etas, sate, seat, seta, teas]
8: [carets, cartes, caster, caters, crates, reacts,
recast,traces]
</pre> 
</div>","Map","java.util.Map","class",0
,"Lesson: Algorithms","Sorting - part 3","<h3>Sorting - part 3</h3>
<p>Recall that the anagram groups are stored as values in a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>, in the form of <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> instances. The revised printing code iterates through the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>'s values view, putting every <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> that passes the minimum-size test into a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> of <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>s. Then the code sorts this <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>, using a <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code> that expects <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> instances, and implements reverse size-ordering. Finally, the code iterates through the sorted <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>, printing its elements (the anagram groups). The following code replaces the printing code at the end of the <code>main</code> method in the <code>Anagrams</code> example.</p> 
<div class=""codeblock""> 
 <pre>
// Make a List of all anagram groups above size threshold.
List&lt;List&lt;String&gt;&gt; winners = new ArrayList&lt;List&lt;String&gt;&gt;();
for (List&lt;String&gt; l : m.values())
if (l.size() &gt;= minGroupSize)
winners.add(l);
// Sort anagram groups according to size
Collections.sort(winners, new Comparator&lt;List&lt;String&gt;&gt;() {
public int compare(List&lt;String&gt; o1, List&lt;String&gt; o2) {
return o2.size() - o1.size();
}});
// Print anagram groups.
for (List&lt;String&gt; l : winners)
System.out.println(l.size() + &quot;: &quot; + l);
</pre> 
</div> 
<p>Running <a class=""SourceLink"" target=""_blank"" href=""examples/Anagrams2.java"" onclick=""showCode('../../displayCode.html', 'examples/Anagrams2.java'); return false;""><code>the program</code></a> on the <a class=""SourceLink"" target=""_blank"" href=""../interfaces/examples/dictionary.txt"" onclick=""showCode('../../displayCode.html', '../interfaces/examples/dictionary.txt'); return false;""><code>same dictionary</code></a> as in <a class=""TutorialLink"" target=""_top"" href=""../interfaces/map.html"">The Map Interface</a> section, with the same minimum anagram group size (eight), produces the following output.</p> 
<div class=""codeblock""> 
 <pre>
12: [apers, apres, asper, pares, parse, pears, prase,
presa, rapes, reaps, spare, spear]
11: [alerts, alters, artels, estral, laster, ratels,
salter, slater, staler, stelar, talers]
10: [least, setal, slate, stale, steal, stela, taels,
tales, teals, tesla]
9: [estrin, inerts, insert, inters, niters, nitres,
sinter, triens, trines]
9: [capers, crapes, escarp, pacers, parsec, recaps,
scrape, secpar, spacer]
9: [palest, palets, pastel, petals, plates, pleats,
septal, staple, tepals]
9: [anestri, antsier, nastier, ratines, retains, retinas,
retsina, stainer, stearin]
8: [lapse, leaps, pales, peals, pleas, salep, sepal, spale]
8: [aspers, parses, passer, prases, repass, spares,
sparse, spears]
8: [enters, nester, renest, rentes, resent, tenser,
ternes,treens]
8: [arles, earls, lares, laser, lears, rales, reals, seral]
8: [earings, erasing, gainers, reagins, regains, reginas,
searing, seringa]
8: [peris, piers, pries, prise, ripes, speir, spier, spire]
8: [ates, east, eats, etas, sate, seat, seta, teas]
8: [carets, cartes, caster, caters, crates, reacts,
recast,traces]
</pre> 
</div>","List","java.util.List","class",0
,"Lesson: Algorithms","Sorting - part 3","<h3>Sorting - part 3</h3>
<p>Recall that the anagram groups are stored as values in a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>, in the form of <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> instances. The revised printing code iterates through the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>'s values view, putting every <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> that passes the minimum-size test into a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> of <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>s. Then the code sorts this <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>, using a <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code> that expects <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> instances, and implements reverse size-ordering. Finally, the code iterates through the sorted <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>, printing its elements (the anagram groups). The following code replaces the printing code at the end of the <code>main</code> method in the <code>Anagrams</code> example.</p> 
<div class=""codeblock""> 
 <pre>
// Make a List of all anagram groups above size threshold.
List&lt;List&lt;String&gt;&gt; winners = new ArrayList&lt;List&lt;String&gt;&gt;();
for (List&lt;String&gt; l : m.values())
if (l.size() &gt;= minGroupSize)
winners.add(l);
// Sort anagram groups according to size
Collections.sort(winners, new Comparator&lt;List&lt;String&gt;&gt;() {
public int compare(List&lt;String&gt; o1, List&lt;String&gt; o2) {
return o2.size() - o1.size();
}});
// Print anagram groups.
for (List&lt;String&gt; l : winners)
System.out.println(l.size() + &quot;: &quot; + l);
</pre> 
</div> 
<p>Running <a class=""SourceLink"" target=""_blank"" href=""examples/Anagrams2.java"" onclick=""showCode('../../displayCode.html', 'examples/Anagrams2.java'); return false;""><code>the program</code></a> on the <a class=""SourceLink"" target=""_blank"" href=""../interfaces/examples/dictionary.txt"" onclick=""showCode('../../displayCode.html', '../interfaces/examples/dictionary.txt'); return false;""><code>same dictionary</code></a> as in <a class=""TutorialLink"" target=""_top"" href=""../interfaces/map.html"">The Map Interface</a> section, with the same minimum anagram group size (eight), produces the following output.</p> 
<div class=""codeblock""> 
 <pre>
12: [apers, apres, asper, pares, parse, pears, prase,
presa, rapes, reaps, spare, spear]
11: [alerts, alters, artels, estral, laster, ratels,
salter, slater, staler, stelar, talers]
10: [least, setal, slate, stale, steal, stela, taels,
tales, teals, tesla]
9: [estrin, inerts, insert, inters, niters, nitres,
sinter, triens, trines]
9: [capers, crapes, escarp, pacers, parsec, recaps,
scrape, secpar, spacer]
9: [palest, palets, pastel, petals, plates, pleats,
septal, staple, tepals]
9: [anestri, antsier, nastier, ratines, retains, retinas,
retsina, stainer, stearin]
8: [lapse, leaps, pales, peals, pleas, salep, sepal, spale]
8: [aspers, parses, passer, prases, repass, spares,
sparse, spears]
8: [enters, nester, renest, rentes, resent, tenser,
ternes,treens]
8: [arles, earls, lares, laser, lears, rales, reals, seral]
8: [earings, erasing, gainers, reagins, regains, reginas,
searing, seringa]
8: [peris, piers, pries, prise, ripes, speir, spier, spire]
8: [ates, east, eats, etas, sate, seat, seta, teas]
8: [carets, cartes, caster, caters, crates, reacts,
recast,traces]
</pre> 
</div>","Comparator","java.util.Comparator","class",0
,"Lesson: Algorithms","Shuffling","<h2>Shuffling</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.shuffle"" api=""Collections"" kind=""method"">
   Collections.shuffle
  </clt></code> algorithm does the opposite of what <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> does, destroying any trace of order that may have been present in a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>. That is, this algorithm reorders the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> based on input from a source of randomness such that all possible permutations occur with equal likelihood, assuming a fair source of randomness. This algorithm is useful in implementing games of chance. For example, it could be used to shuffle a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> of <code> 
  <clt fqn=""java.awt.CardLayout.Card"" api=""Card"" kind=""class"">
    Card 
  </clt></code> objects representing a deck. Also, it's useful for generating test cases.</p> 
<p>This operation has two forms: one takes a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and uses a default source of randomness, and the other requires the caller to provide a <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Random.html""> 
  <clt fqn=""java.util.Random"" api=""Random"" kind=""class"">
    Random 
  </clt></a> object to use as a source of randomness. The code for this algorithm is used as an example in the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/list.html#shuffle""><code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> section</a>. </p>","Collections","java.util.Collections","class",0
,"Lesson: Algorithms","Shuffling","<h2>Shuffling</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.shuffle"" api=""Collections"" kind=""method"">
   Collections.shuffle
  </clt></code> algorithm does the opposite of what <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> does, destroying any trace of order that may have been present in a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>. That is, this algorithm reorders the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> based on input from a source of randomness such that all possible permutations occur with equal likelihood, assuming a fair source of randomness. This algorithm is useful in implementing games of chance. For example, it could be used to shuffle a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> of <code> 
  <clt fqn=""java.awt.CardLayout.Card"" api=""Card"" kind=""class"">
    Card 
  </clt></code> objects representing a deck. Also, it's useful for generating test cases.</p> 
<p>This operation has two forms: one takes a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and uses a default source of randomness, and the other requires the caller to provide a <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Random.html""> 
  <clt fqn=""java.util.Random"" api=""Random"" kind=""class"">
    Random 
  </clt></a> object to use as a source of randomness. The code for this algorithm is used as an example in the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/list.html#shuffle""><code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> section</a>. </p>","List","java.util.List","class",0
,"Lesson: Algorithms","Shuffling","<h2>Shuffling</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.shuffle"" api=""Collections"" kind=""method"">
   Collections.shuffle
  </clt></code> algorithm does the opposite of what <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> does, destroying any trace of order that may have been present in a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>. That is, this algorithm reorders the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> based on input from a source of randomness such that all possible permutations occur with equal likelihood, assuming a fair source of randomness. This algorithm is useful in implementing games of chance. For example, it could be used to shuffle a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> of <code> 
  <clt fqn=""java.awt.CardLayout.Card"" api=""Card"" kind=""class"">
    Card 
  </clt></code> objects representing a deck. Also, it's useful for generating test cases.</p> 
<p>This operation has two forms: one takes a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and uses a default source of randomness, and the other requires the caller to provide a <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Random.html""> 
  <clt fqn=""java.util.Random"" api=""Random"" kind=""class"">
    Random 
  </clt></a> object to use as a source of randomness. The code for this algorithm is used as an example in the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/list.html#shuffle""><code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> section</a>. </p>","Card","java.awt.CardLayout","class",0
,"Lesson: Algorithms","Shuffling","<h2>Shuffling</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.shuffle"" api=""Collections"" kind=""method"">
   Collections.shuffle
  </clt></code> algorithm does the opposite of what <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> does, destroying any trace of order that may have been present in a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>. That is, this algorithm reorders the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> based on input from a source of randomness such that all possible permutations occur with equal likelihood, assuming a fair source of randomness. This algorithm is useful in implementing games of chance. For example, it could be used to shuffle a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> of <code> 
  <clt fqn=""java.awt.CardLayout.Card"" api=""Card"" kind=""class"">
    Card 
  </clt></code> objects representing a deck. Also, it's useful for generating test cases.</p> 
<p>This operation has two forms: one takes a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and uses a default source of randomness, and the other requires the caller to provide a <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Random.html""> 
  <clt fqn=""java.util.Random"" api=""Random"" kind=""class"">
    Random 
  </clt></a> object to use as a source of randomness. The code for this algorithm is used as an example in the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/list.html#shuffle""><code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> section</a>. </p>","Random","java.util.Random","class",0
,"Lesson: Algorithms","Routine Data Manipulation","<h2>Routine Data Manipulation</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections 
  </clt></code> class provides five algorithms for doing routine data manipulation on <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> objects, all of which are pretty straightforward:</p> 
<ul> 
 <li><code> 
   <clt fqn=""java.util.Collections.reverse"" api=""Collections"" kind=""method"">
    Collections.reverse
   </clt></code> ? reverses the order of the elements in a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.fill"" api=""Collections"" kind=""method"">
    Collections.fill
   </clt></code> ? overwrites every element in a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> with the specified value. This operation is useful for reinitializing a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.copy"" api=""Collections"" kind=""method"">
    Collections.copy
   </clt></code> ? takes two arguments, a destination <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> and a source <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>, and copies the elements of the source into the destination, overwriting its contents. The destination <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> must be at least as long as the source. If it is longer, the remaining elements in the destination <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> are unaffected.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.swap"" api=""Collections"" kind=""method"">
    Collections.swap
   </clt></code> ? swaps the elements at the specified positions in a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.addAll"" api=""Collections"" kind=""method"">
    Collections.addAll
   </clt></code> ? adds all the specified elements to a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code>. The elements to be added may be specified individually or as an array.</li> 
</ul>","Collections","java.util.Collections","class",0
,"Lesson: Algorithms","Routine Data Manipulation","<h2>Routine Data Manipulation</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections 
  </clt></code> class provides five algorithms for doing routine data manipulation on <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> objects, all of which are pretty straightforward:</p> 
<ul> 
 <li><code> 
   <clt fqn=""java.util.Collections.reverse"" api=""Collections"" kind=""method"">
    Collections.reverse
   </clt></code> ? reverses the order of the elements in a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.fill"" api=""Collections"" kind=""method"">
    Collections.fill
   </clt></code> ? overwrites every element in a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> with the specified value. This operation is useful for reinitializing a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.copy"" api=""Collections"" kind=""method"">
    Collections.copy
   </clt></code> ? takes two arguments, a destination <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> and a source <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>, and copies the elements of the source into the destination, overwriting its contents. The destination <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> must be at least as long as the source. If it is longer, the remaining elements in the destination <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> are unaffected.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.swap"" api=""Collections"" kind=""method"">
    Collections.swap
   </clt></code> ? swaps the elements at the specified positions in a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.addAll"" api=""Collections"" kind=""method"">
    Collections.addAll
   </clt></code> ? adds all the specified elements to a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code>. The elements to be added may be specified individually or as an array.</li> 
</ul>","List","java.util.List","class",0
,"Lesson: Algorithms","Routine Data Manipulation","<h2>Routine Data Manipulation</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections 
  </clt></code> class provides five algorithms for doing routine data manipulation on <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> objects, all of which are pretty straightforward:</p> 
<ul> 
 <li><code> 
   <clt fqn=""java.util.Collections.reverse"" api=""Collections"" kind=""method"">
    Collections.reverse
   </clt></code> ? reverses the order of the elements in a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.fill"" api=""Collections"" kind=""method"">
    Collections.fill
   </clt></code> ? overwrites every element in a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> with the specified value. This operation is useful for reinitializing a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.copy"" api=""Collections"" kind=""method"">
    Collections.copy
   </clt></code> ? takes two arguments, a destination <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> and a source <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>, and copies the elements of the source into the destination, overwriting its contents. The destination <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> must be at least as long as the source. If it is longer, the remaining elements in the destination <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code> are unaffected.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.swap"" api=""Collections"" kind=""method"">
    Collections.swap
   </clt></code> ? swaps the elements at the specified positions in a <code> 
   <clt fqn=""java.util.List"" api=""List"" kind=""class"">
     List 
   </clt></code>.</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.addAll"" api=""Collections"" kind=""method"">
    Collections.addAll
   </clt></code> ? adds all the specified elements to a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code>. The elements to be added may be specified individually or as an array.</li> 
</ul>","Collection","java.util.Collection","class",0
,"Lesson: Algorithms","Searching","<h2>Searching</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.binarySearch"" api=""Collections"" kind=""method"">
   Collections.binarySearch
  </clt></code> algorithm searches for a specified element in a sorted <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>. This algorithm has two forms. The first takes a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and an element to search for (the &quot;search key&quot;). This form assumes that the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> is sorted in ascending order according to the natural ordering of its elements. The second form takes a <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code> in addition to the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and the search key, and assumes that the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> is sorted into ascending order according to the specified <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code>. The <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> algorithm can be used to sort the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> prior to calling <code> 
  <clt fqn=""java.util.Collections.binarySearch"" api=""Collections"" kind=""method"">
   Collections.binarySearch
  </clt></code>.</p>","Collections","java.util.Collections","class",0
,"Lesson: Algorithms","Searching","<h2>Searching</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.binarySearch"" api=""Collections"" kind=""method"">
   Collections.binarySearch
  </clt></code> algorithm searches for a specified element in a sorted <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>. This algorithm has two forms. The first takes a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and an element to search for (the &quot;search key&quot;). This form assumes that the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> is sorted in ascending order according to the natural ordering of its elements. The second form takes a <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code> in addition to the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and the search key, and assumes that the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> is sorted into ascending order according to the specified <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code>. The <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> algorithm can be used to sort the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> prior to calling <code> 
  <clt fqn=""java.util.Collections.binarySearch"" api=""Collections"" kind=""method"">
   Collections.binarySearch
  </clt></code>.</p>","List","java.util.List","class",0
,"Lesson: Algorithms","Searching","<h2>Searching</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.binarySearch"" api=""Collections"" kind=""method"">
   Collections.binarySearch
  </clt></code> algorithm searches for a specified element in a sorted <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>. This algorithm has two forms. The first takes a <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and an element to search for (the &quot;search key&quot;). This form assumes that the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> is sorted in ascending order according to the natural ordering of its elements. The second form takes a <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code> in addition to the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> and the search key, and assumes that the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> is sorted into ascending order according to the specified <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code>. The <code> 
  <clt fqn=""java.util.Collections.sort"" api=""Collections"" kind=""method"">
   Collections.sort
  </clt></code> algorithm can be used to sort the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> prior to calling <code> 
  <clt fqn=""java.util.Collections.binarySearch"" api=""Collections"" kind=""method"">
   Collections.binarySearch
  </clt></code>.</p>","Comparator","java.util.Comparator","class",0
,"Lesson: Algorithms","Searching - part 2","<h3>Searching - part 2</h3>
<p>The return value is the same for both forms. If the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> contains the search key, its index is returned. If not, the return value is <code>(-(insertion point) - 1)</code>, where the insertion point is the point at which the value would be inserted into the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>, or the index of the first element greater than the value or <code> 
  <clt fqn=""java.util.List.size"" api=""List"" kind=""method"">
   List.size()
  </clt></code> if all elements in the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> are less than the specified value. This admittedly ugly formula guarantees that the return value will be <code>&gt;= 0</code> if and only if the search key is found. It's basically a hack to combine a boolean <code>(found)</code> and an integer <code>(index)</code> into a single <code>int</code> return value.</p> 
<p>The following idiom, usable with both forms of the <code> 
  <clt fqn=""java.util.Collections.binarySearch"" api=""Collections"" kind=""method"">
   Collections.binarySearch
  </clt></code> operation, looks for the specified search key and inserts it at the appropriate position if it's not already present.</p> 
<div class=""codeblock""> 
 <pre>
int pos = Collections.binarySearch(list, key);
if (pos &lt; 0)
l.add(-pos-1);
</pre> 
</div>","List","java.util.List","class",0
,"Lesson: Algorithms","Searching - part 2","<h3>Searching - part 2</h3>
<p>The return value is the same for both forms. If the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> contains the search key, its index is returned. If not, the return value is <code>(-(insertion point) - 1)</code>, where the insertion point is the point at which the value would be inserted into the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code>, or the index of the first element greater than the value or <code> 
  <clt fqn=""java.util.List.size"" api=""List"" kind=""method"">
   List.size()
  </clt></code> if all elements in the <code> 
  <clt fqn=""java.util.List"" api=""List"" kind=""class"">
    List 
  </clt></code> are less than the specified value. This admittedly ugly formula guarantees that the return value will be <code>&gt;= 0</code> if and only if the search key is found. It's basically a hack to combine a boolean <code>(found)</code> and an integer <code>(index)</code> into a single <code>int</code> return value.</p> 
<p>The following idiom, usable with both forms of the <code> 
  <clt fqn=""java.util.Collections.binarySearch"" api=""Collections"" kind=""method"">
   Collections.binarySearch
  </clt></code> operation, looks for the specified search key and inserts it at the appropriate position if it's not already present.</p> 
<div class=""codeblock""> 
 <pre>
int pos = Collections.binarySearch(list, key);
if (pos &lt; 0)
l.add(-pos-1);
</pre> 
</div>","Collections","java.util.Collections","class",0
,"Lesson: Algorithms","Composition","<h2>Composition</h2> 
<p>The frequency and disjoint algorithms test some aspect of the composition of one or more <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections 
  </clt></code>:</p> 
<ul> 
 <li><code> 
   <clt fqn=""java.util.Collections.frequency"" api=""Collections"" kind=""method"">
    Collections.frequency
   </clt></code> ? counts the number of times the specified element occurs in the specified collection</li> 
 <li><code> 
   <clt fqn=""java.util.Collections.disjoint"" api=""Collections"" kind=""method"">
    Collections.disjoint
   </clt></code> ? determines whether two <code> 
   <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
     Collections 
   </clt></code> are disjoint; that is, whether they contain no elements in common</li> 
</ul>","Collections","java.util.Collections","class",0
,"Lesson: Algorithms","Finding Extreme Values","<h2>Finding Extreme Values</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.min"" api=""Collections"" kind=""method"">
   Collections.min
  </clt></code> and the <code> 
  <clt fqn=""java.util.Collections.max"" api=""Collections"" kind=""method"">
   Collections.max
  </clt></code> algorithms return, respectively, the minimum and maximum element contained in a specified <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>. Both of these operations come in two forms. The simple form takes only a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> and returns the minimum (or maximum) element according to the elements' natural ordering. The second form takes a <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code> in addition to the <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> and returns the minimum (or maximum) element according to the specified <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code>.</p>","Collections","java.util.Collections","class",0
,"Lesson: Algorithms","Finding Extreme Values","<h2>Finding Extreme Values</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.min"" api=""Collections"" kind=""method"">
   Collections.min
  </clt></code> and the <code> 
  <clt fqn=""java.util.Collections.max"" api=""Collections"" kind=""method"">
   Collections.max
  </clt></code> algorithms return, respectively, the minimum and maximum element contained in a specified <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>. Both of these operations come in two forms. The simple form takes only a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> and returns the minimum (or maximum) element according to the elements' natural ordering. The second form takes a <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code> in addition to the <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> and returns the minimum (or maximum) element according to the specified <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code>.</p>","Collection","java.util.Collection","class",0
,"Lesson: Algorithms","Finding Extreme Values","<h2>Finding Extreme Values</h2> 
<p>The <code> 
  <clt fqn=""java.util.Collections.min"" api=""Collections"" kind=""method"">
   Collections.min
  </clt></code> and the <code> 
  <clt fqn=""java.util.Collections.max"" api=""Collections"" kind=""method"">
   Collections.max
  </clt></code> algorithms return, respectively, the minimum and maximum element contained in a specified <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>. Both of these operations come in two forms. The simple form takes only a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> and returns the minimum (or maximum) element according to the elements' natural ordering. The second form takes a <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code> in addition to the <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> and returns the minimum (or maximum) element according to the specified <code> 
  <clt fqn=""java.util.Comparator"" api=""Comparator"" kind=""class"">
    Comparator 
  </clt></code>.</p>","Comparator","java.util.Comparator","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","Lesson: Custom Collection Implementations","<div id=""PageTitle""> 
 <h1>Lesson: Custom 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt>Implementations</h1> 
</div> 
<p>Many programmers will never need to implement their own <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>s classes. You can go pretty far using the implementations described in the preceding sections of this chapter. However, someday you might want to write your own implementation. It is fairly easy to do this with the aid of the abstract implementations provided by the Java platform. Before we discuss <em>how</em> to write an implementation, let's discuss why you might want to write one.</p>","Collection","java.util.Collection","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","Reasons to Write an Implementation","<h2>Reasons to Write an Implementation</h2> 
<p>The following list illustrates the sort of custom <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>s you might want to implement. It is not intended to be exhaustive:</p> 
<ul> 
 <li><b>Persistent</b>: All of the built-in <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> implementations reside in main memory and vanish when the program exits. If you want a collection that will still be present the next time the program starts, you can implement it by building a veneer over an external database. Such a collection might be concurrently accessible by multiple programs.</li> 
 <li><b>Application-specific</b>: This is a very broad category. One example is an unmodifiable <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> containing real-time telemetry data. The keys could represent locations, and the values could be read from sensors at these locations in response to the <code>get</code> operation.</li> 
 <li><b>High-performance, special-purpose</b>: Many data structures take advantage of restricted usage to offer better performance than is possible with general-purpose implementations. For instance, consider a <code>List</code> containing long runs of identical element values. Such lists, which occur frequently in text processing, can be <em>run-length encoded</em> ? runs can be represented as a single object containing the repeated element and the number of consecutive repetitions. This example is interesting because it trades off two aspects of performance: It requires less space but more time than an <code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code>.</li> 
 <li><b>High-performance, general-purpose</b>: The Java Collections Framework's designers tried to provide the best general-purpose implementations for each interface, but many, many data structures could have been used, and new ones are invented every day. Maybe you can come up with something faster!</li> 
 <li><b>Enhanced functionality</b>: Suppose you need an efficient bag implementation (also known as a <em>multiset</em>): a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that offers constant-time containment checks while allowing duplicate elements. It's reasonably straightforward to implement such a collection atop a <code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code>.</li> 
 <li><b>Convenience</b>: You may want additional implementations that offer conveniences beyond those offered by the Java platform. For instance, you may frequently need <code>List</code> instances representing a contiguous range of <code> 
   <clt fqn=""java.lang.Integer"" api=""Integer"" kind=""class"">
     Integer 
   </clt></code>s.</li> 
 <li><b>Adapter</b>: Suppose you are using a legacy API that has its own ad hoc collections' API. You can write an adapter implementation that permits these collections to operate in the Java Collections Framework. An <em>adapter implementation</em> is a thin veneer that wraps objects of one type and makes them behave like objects of another type by translating operations on the latter type into operations on the former.</li> 
</ul>","Collection","java.util.Collection","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","Reasons to Write an Implementation","<h2>Reasons to Write an Implementation</h2> 
<p>The following list illustrates the sort of custom <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>s you might want to implement. It is not intended to be exhaustive:</p> 
<ul> 
 <li><b>Persistent</b>: All of the built-in <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> implementations reside in main memory and vanish when the program exits. If you want a collection that will still be present the next time the program starts, you can implement it by building a veneer over an external database. Such a collection might be concurrently accessible by multiple programs.</li> 
 <li><b>Application-specific</b>: This is a very broad category. One example is an unmodifiable <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> containing real-time telemetry data. The keys could represent locations, and the values could be read from sensors at these locations in response to the <code>get</code> operation.</li> 
 <li><b>High-performance, special-purpose</b>: Many data structures take advantage of restricted usage to offer better performance than is possible with general-purpose implementations. For instance, consider a <code>List</code> containing long runs of identical element values. Such lists, which occur frequently in text processing, can be <em>run-length encoded</em> ? runs can be represented as a single object containing the repeated element and the number of consecutive repetitions. This example is interesting because it trades off two aspects of performance: It requires less space but more time than an <code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code>.</li> 
 <li><b>High-performance, general-purpose</b>: The Java Collections Framework's designers tried to provide the best general-purpose implementations for each interface, but many, many data structures could have been used, and new ones are invented every day. Maybe you can come up with something faster!</li> 
 <li><b>Enhanced functionality</b>: Suppose you need an efficient bag implementation (also known as a <em>multiset</em>): a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that offers constant-time containment checks while allowing duplicate elements. It's reasonably straightforward to implement such a collection atop a <code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code>.</li> 
 <li><b>Convenience</b>: You may want additional implementations that offer conveniences beyond those offered by the Java platform. For instance, you may frequently need <code>List</code> instances representing a contiguous range of <code> 
   <clt fqn=""java.lang.Integer"" api=""Integer"" kind=""class"">
     Integer 
   </clt></code>s.</li> 
 <li><b>Adapter</b>: Suppose you are using a legacy API that has its own ad hoc collections' API. You can write an adapter implementation that permits these collections to operate in the Java Collections Framework. An <em>adapter implementation</em> is a thin veneer that wraps objects of one type and makes them behave like objects of another type by translating operations on the latter type into operations on the former.</li> 
</ul>","Map","java.util.Map","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","Reasons to Write an Implementation","<h2>Reasons to Write an Implementation</h2> 
<p>The following list illustrates the sort of custom <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>s you might want to implement. It is not intended to be exhaustive:</p> 
<ul> 
 <li><b>Persistent</b>: All of the built-in <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> implementations reside in main memory and vanish when the program exits. If you want a collection that will still be present the next time the program starts, you can implement it by building a veneer over an external database. Such a collection might be concurrently accessible by multiple programs.</li> 
 <li><b>Application-specific</b>: This is a very broad category. One example is an unmodifiable <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> containing real-time telemetry data. The keys could represent locations, and the values could be read from sensors at these locations in response to the <code>get</code> operation.</li> 
 <li><b>High-performance, special-purpose</b>: Many data structures take advantage of restricted usage to offer better performance than is possible with general-purpose implementations. For instance, consider a <code>List</code> containing long runs of identical element values. Such lists, which occur frequently in text processing, can be <em>run-length encoded</em> ? runs can be represented as a single object containing the repeated element and the number of consecutive repetitions. This example is interesting because it trades off two aspects of performance: It requires less space but more time than an <code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code>.</li> 
 <li><b>High-performance, general-purpose</b>: The Java Collections Framework's designers tried to provide the best general-purpose implementations for each interface, but many, many data structures could have been used, and new ones are invented every day. Maybe you can come up with something faster!</li> 
 <li><b>Enhanced functionality</b>: Suppose you need an efficient bag implementation (also known as a <em>multiset</em>): a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that offers constant-time containment checks while allowing duplicate elements. It's reasonably straightforward to implement such a collection atop a <code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code>.</li> 
 <li><b>Convenience</b>: You may want additional implementations that offer conveniences beyond those offered by the Java platform. For instance, you may frequently need <code>List</code> instances representing a contiguous range of <code> 
   <clt fqn=""java.lang.Integer"" api=""Integer"" kind=""class"">
     Integer 
   </clt></code>s.</li> 
 <li><b>Adapter</b>: Suppose you are using a legacy API that has its own ad hoc collections' API. You can write an adapter implementation that permits these collections to operate in the Java Collections Framework. An <em>adapter implementation</em> is a thin veneer that wraps objects of one type and makes them behave like objects of another type by translating operations on the latter type into operations on the former.</li> 
</ul>","ArrayList","java.util.ArrayList","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","Reasons to Write an Implementation","<h2>Reasons to Write an Implementation</h2> 
<p>The following list illustrates the sort of custom <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>s you might want to implement. It is not intended to be exhaustive:</p> 
<ul> 
 <li><b>Persistent</b>: All of the built-in <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> implementations reside in main memory and vanish when the program exits. If you want a collection that will still be present the next time the program starts, you can implement it by building a veneer over an external database. Such a collection might be concurrently accessible by multiple programs.</li> 
 <li><b>Application-specific</b>: This is a very broad category. One example is an unmodifiable <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> containing real-time telemetry data. The keys could represent locations, and the values could be read from sensors at these locations in response to the <code>get</code> operation.</li> 
 <li><b>High-performance, special-purpose</b>: Many data structures take advantage of restricted usage to offer better performance than is possible with general-purpose implementations. For instance, consider a <code>List</code> containing long runs of identical element values. Such lists, which occur frequently in text processing, can be <em>run-length encoded</em> ? runs can be represented as a single object containing the repeated element and the number of consecutive repetitions. This example is interesting because it trades off two aspects of performance: It requires less space but more time than an <code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code>.</li> 
 <li><b>High-performance, general-purpose</b>: The Java Collections Framework's designers tried to provide the best general-purpose implementations for each interface, but many, many data structures could have been used, and new ones are invented every day. Maybe you can come up with something faster!</li> 
 <li><b>Enhanced functionality</b>: Suppose you need an efficient bag implementation (also known as a <em>multiset</em>): a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that offers constant-time containment checks while allowing duplicate elements. It's reasonably straightforward to implement such a collection atop a <code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code>.</li> 
 <li><b>Convenience</b>: You may want additional implementations that offer conveniences beyond those offered by the Java platform. For instance, you may frequently need <code>List</code> instances representing a contiguous range of <code> 
   <clt fqn=""java.lang.Integer"" api=""Integer"" kind=""class"">
     Integer 
   </clt></code>s.</li> 
 <li><b>Adapter</b>: Suppose you are using a legacy API that has its own ad hoc collections' API. You can write an adapter implementation that permits these collections to operate in the Java Collections Framework. An <em>adapter implementation</em> is a thin veneer that wraps objects of one type and makes them behave like objects of another type by translating operations on the latter type into operations on the former.</li> 
</ul>","HashMap","java.util.HashMap","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","Reasons to Write an Implementation","<h2>Reasons to Write an Implementation</h2> 
<p>The following list illustrates the sort of custom <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>s you might want to implement. It is not intended to be exhaustive:</p> 
<ul> 
 <li><b>Persistent</b>: All of the built-in <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> implementations reside in main memory and vanish when the program exits. If you want a collection that will still be present the next time the program starts, you can implement it by building a veneer over an external database. Such a collection might be concurrently accessible by multiple programs.</li> 
 <li><b>Application-specific</b>: This is a very broad category. One example is an unmodifiable <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> containing real-time telemetry data. The keys could represent locations, and the values could be read from sensors at these locations in response to the <code>get</code> operation.</li> 
 <li><b>High-performance, special-purpose</b>: Many data structures take advantage of restricted usage to offer better performance than is possible with general-purpose implementations. For instance, consider a <code>List</code> containing long runs of identical element values. Such lists, which occur frequently in text processing, can be <em>run-length encoded</em> ? runs can be represented as a single object containing the repeated element and the number of consecutive repetitions. This example is interesting because it trades off two aspects of performance: It requires less space but more time than an <code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code>.</li> 
 <li><b>High-performance, general-purpose</b>: The Java Collections Framework's designers tried to provide the best general-purpose implementations for each interface, but many, many data structures could have been used, and new ones are invented every day. Maybe you can come up with something faster!</li> 
 <li><b>Enhanced functionality</b>: Suppose you need an efficient bag implementation (also known as a <em>multiset</em>): a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that offers constant-time containment checks while allowing duplicate elements. It's reasonably straightforward to implement such a collection atop a <code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code>.</li> 
 <li><b>Convenience</b>: You may want additional implementations that offer conveniences beyond those offered by the Java platform. For instance, you may frequently need <code>List</code> instances representing a contiguous range of <code> 
   <clt fqn=""java.lang.Integer"" api=""Integer"" kind=""class"">
     Integer 
   </clt></code>s.</li> 
 <li><b>Adapter</b>: Suppose you are using a legacy API that has its own ad hoc collections' API. You can write an adapter implementation that permits these collections to operate in the Java Collections Framework. An <em>adapter implementation</em> is a thin veneer that wraps objects of one type and makes them behave like objects of another type by translating operations on the latter type into operations on the former.</li> 
</ul>","Integer","java.lang.Integer","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation","<h2>How to Write a Custom Implementation</h2> 
<p>Writing a custom implementation is surprisingly easy. The Java Collections Framework provides abstract implementations designed expressly to facilitate custom implementations. We'll start with the following example of an implementation of <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList(T...)""><code> 
   <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
    Arrays.asList
   </clt></code></a>.</p> 
<div class=""codeblock""> 
 <pre>
public static &lt;T&gt; List&lt;T&gt; asList(T[] a) {
return new MyArrayList&lt;T&gt;(a);
}
private static class MyArrayList&lt;T&gt; extends AbstractList&lt;T&gt; {
private final T[] a;
MyArrayList(T[] array) {
a = array;
}
public T get(int index) {
return a[index];
}
public T set(int index, T element) {
T oldValue = a[index];
a[index] = element;
return oldValue;
}
public int size() {
return a.length;
}
}
</pre> 
</div> 
<p>Believe it or not, this is very close to the implementation that is contained in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. It's that simple! You provide a constructor and the <code> 
  <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
   AbstractList.get
  </clt></code>, <code> 
  <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
   AbstractList.set
  </clt></code>, and <code> 
  <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
   AbstractCollection.size
  </clt></code> methods, and <code> 
  <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
    AbstractList 
  </clt></code> does all the rest. You get the <code> 
  <clt fqn=""java.util.ListIterator"" api=""ListIterator"" kind=""class"">
    ListIterator 
  </clt></code>, bulk operations, search operations, hash code computation, comparison, and string representation for free.</p> 
<p>Suppose you want to make the implementation a bit faster. The API documentation for abstract implementations describes precisely how each method is implemented, so you'll know which methods to override to get the performance you want. The preceding implementation's performance is fine, but it can be improved a bit. In particular, the <code> 
  <clt fqn=""java.util.AbstractCollection.toArray"" api=""AbstractCollection"" kind=""method"">
   AbstractCollection.toArray
  </clt></code> method iterates over the <code>List</code>, copying one element at a time. Given the internal representation, it's a lot faster and more sensible just to clone the array.</p> 
<div class=""codeblock""> 
 <pre>
public Object[] toArray() {
return (Object[]) a.clone();
}
</pre> 
</div>","Arrays","java.util.Arrays","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation","<h2>How to Write a Custom Implementation</h2> 
<p>Writing a custom implementation is surprisingly easy. The Java Collections Framework provides abstract implementations designed expressly to facilitate custom implementations. We'll start with the following example of an implementation of <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList(T...)""><code> 
   <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
    Arrays.asList
   </clt></code></a>.</p> 
<div class=""codeblock""> 
 <pre>
public static &lt;T&gt; List&lt;T&gt; asList(T[] a) {
return new MyArrayList&lt;T&gt;(a);
}
private static class MyArrayList&lt;T&gt; extends AbstractList&lt;T&gt; {
private final T[] a;
MyArrayList(T[] array) {
a = array;
}
public T get(int index) {
return a[index];
}
public T set(int index, T element) {
T oldValue = a[index];
a[index] = element;
return oldValue;
}
public int size() {
return a.length;
}
}
</pre> 
</div> 
<p>Believe it or not, this is very close to the implementation that is contained in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. It's that simple! You provide a constructor and the <code> 
  <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
   AbstractList.get
  </clt></code>, <code> 
  <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
   AbstractList.set
  </clt></code>, and <code> 
  <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
   AbstractCollection.size
  </clt></code> methods, and <code> 
  <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
    AbstractList 
  </clt></code> does all the rest. You get the <code> 
  <clt fqn=""java.util.ListIterator"" api=""ListIterator"" kind=""class"">
    ListIterator 
  </clt></code>, bulk operations, search operations, hash code computation, comparison, and string representation for free.</p> 
<p>Suppose you want to make the implementation a bit faster. The API documentation for abstract implementations describes precisely how each method is implemented, so you'll know which methods to override to get the performance you want. The preceding implementation's performance is fine, but it can be improved a bit. In particular, the <code> 
  <clt fqn=""java.util.AbstractCollection.toArray"" api=""AbstractCollection"" kind=""method"">
   AbstractCollection.toArray
  </clt></code> method iterates over the <code>List</code>, copying one element at a time. Given the internal representation, it's a lot faster and more sensible just to clone the array.</p> 
<div class=""codeblock""> 
 <pre>
public Object[] toArray() {
return (Object[]) a.clone();
}
</pre> 
</div>","AbstractList","java.util.AbstractList","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation","<h2>How to Write a Custom Implementation</h2> 
<p>Writing a custom implementation is surprisingly easy. The Java Collections Framework provides abstract implementations designed expressly to facilitate custom implementations. We'll start with the following example of an implementation of <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList(T...)""><code> 
   <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
    Arrays.asList
   </clt></code></a>.</p> 
<div class=""codeblock""> 
 <pre>
public static &lt;T&gt; List&lt;T&gt; asList(T[] a) {
return new MyArrayList&lt;T&gt;(a);
}
private static class MyArrayList&lt;T&gt; extends AbstractList&lt;T&gt; {
private final T[] a;
MyArrayList(T[] array) {
a = array;
}
public T get(int index) {
return a[index];
}
public T set(int index, T element) {
T oldValue = a[index];
a[index] = element;
return oldValue;
}
public int size() {
return a.length;
}
}
</pre> 
</div> 
<p>Believe it or not, this is very close to the implementation that is contained in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. It's that simple! You provide a constructor and the <code> 
  <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
   AbstractList.get
  </clt></code>, <code> 
  <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
   AbstractList.set
  </clt></code>, and <code> 
  <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
   AbstractCollection.size
  </clt></code> methods, and <code> 
  <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
    AbstractList 
  </clt></code> does all the rest. You get the <code> 
  <clt fqn=""java.util.ListIterator"" api=""ListIterator"" kind=""class"">
    ListIterator 
  </clt></code>, bulk operations, search operations, hash code computation, comparison, and string representation for free.</p> 
<p>Suppose you want to make the implementation a bit faster. The API documentation for abstract implementations describes precisely how each method is implemented, so you'll know which methods to override to get the performance you want. The preceding implementation's performance is fine, but it can be improved a bit. In particular, the <code> 
  <clt fqn=""java.util.AbstractCollection.toArray"" api=""AbstractCollection"" kind=""method"">
   AbstractCollection.toArray
  </clt></code> method iterates over the <code>List</code>, copying one element at a time. Given the internal representation, it's a lot faster and more sensible just to clone the array.</p> 
<div class=""codeblock""> 
 <pre>
public Object[] toArray() {
return (Object[]) a.clone();
}
</pre> 
</div>","AbstractCollection","java.util.AbstractCollection","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation","<h2>How to Write a Custom Implementation</h2> 
<p>Writing a custom implementation is surprisingly easy. The Java Collections Framework provides abstract implementations designed expressly to facilitate custom implementations. We'll start with the following example of an implementation of <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList(T...)""><code> 
   <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
    Arrays.asList
   </clt></code></a>.</p> 
<div class=""codeblock""> 
 <pre>
public static &lt;T&gt; List&lt;T&gt; asList(T[] a) {
return new MyArrayList&lt;T&gt;(a);
}
private static class MyArrayList&lt;T&gt; extends AbstractList&lt;T&gt; {
private final T[] a;
MyArrayList(T[] array) {
a = array;
}
public T get(int index) {
return a[index];
}
public T set(int index, T element) {
T oldValue = a[index];
a[index] = element;
return oldValue;
}
public int size() {
return a.length;
}
}
</pre> 
</div> 
<p>Believe it or not, this is very close to the implementation that is contained in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. It's that simple! You provide a constructor and the <code> 
  <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
   AbstractList.get
  </clt></code>, <code> 
  <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
   AbstractList.set
  </clt></code>, and <code> 
  <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
   AbstractCollection.size
  </clt></code> methods, and <code> 
  <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
    AbstractList 
  </clt></code> does all the rest. You get the <code> 
  <clt fqn=""java.util.ListIterator"" api=""ListIterator"" kind=""class"">
    ListIterator 
  </clt></code>, bulk operations, search operations, hash code computation, comparison, and string representation for free.</p> 
<p>Suppose you want to make the implementation a bit faster. The API documentation for abstract implementations describes precisely how each method is implemented, so you'll know which methods to override to get the performance you want. The preceding implementation's performance is fine, but it can be improved a bit. In particular, the <code> 
  <clt fqn=""java.util.AbstractCollection.toArray"" api=""AbstractCollection"" kind=""method"">
   AbstractCollection.toArray
  </clt></code> method iterates over the <code>List</code>, copying one element at a time. Given the internal representation, it's a lot faster and more sensible just to clone the array.</p> 
<div class=""codeblock""> 
 <pre>
public Object[] toArray() {
return (Object[]) a.clone();
}
</pre> 
</div>","ListIterator","java.util.ListIterator","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","Arrays","java.util.Arrays","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","AbstractCollection","java.util.AbstractCollection","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","Collection","java.util.Collection","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","Set","java.util.Set","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","AbstractList","java.util.AbstractList","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","AbstractSet","java.util.AbstractSet","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","AbstractSequentialList","java.util.AbstractSequentialList","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","AbstractQueue","java.util.AbstractQueue","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","AbstractMap","java.util.AbstractMap","class",0
,"Lesson: Custom 
<clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
  Collection 
</clt>Implementations","How to Write a Custom Implementation - part 2","<h3>How to Write a Custom Implementation - part 2</h3>
<p>With the addition of this override and a few more like it, this implementation is exactly the one found in <code> 
  <clt fqn=""java.util.Arrays"" api=""Arrays"" kind=""class"">
    java.util.Arrays 
  </clt></code>. In the interest of full disclosure, it's a bit tougher to use the other abstract implementations because you will have to write your own iterator, but it's still not that difficult.</p> 
<p>The following list summarizes the abstract implementations:</p> 
<ul> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractCollection.html""><code> 
    <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
      AbstractCollection 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
     Collection 
   </clt></code> that is neither a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code> nor a <code>List</code>. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSet.html""><code> 
    <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
      AbstractSet 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code>; use is identical to <code> 
   <clt fqn=""java.util.AbstractCollection"" api=""AbstractCollection"" kind=""class"">
     AbstractCollection 
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractList.html""><code> 
    <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
      AbstractList 
    </clt></code></a> ? a <code>List</code> backed up by a random-access data store, such as an array. At a minimum, you must provide the <code>positional access</code> methods (<code> 
   <clt fqn=""java.util.AbstractList.get"" api=""AbstractList"" kind=""method"">
    AbstractList.get
   </clt></code> and, optionally, <code> 
   <clt fqn=""java.util.AbstractList.set"" api=""AbstractList"" kind=""method"">
    AbstractList.set
   </clt></code>, <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>, and <code> 
   <clt fqn=""java.util.AbstractList.add"" api=""AbstractList"" kind=""method"">
    AbstractList.add
   </clt></code>) and the <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> method. The abstract class takes care of <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> (and <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code>).</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractSequentialList.html""><code> 
    <clt fqn=""java.util.AbstractSequentialList"" api=""AbstractSequentialList"" kind=""class"">
      AbstractSequentialList 
    </clt></code></a> ? a <code>List</code> backed up by a sequential-access data store, such as a linked list. At a minimum, you must provide the <code> 
   <clt fqn=""java.util.AbstractList.listIterator"" api=""AbstractList"" kind=""method"">
    AbstractList.listIterator
   </clt></code> and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods. The abstract class takes care of the positional access methods. (This is the opposite of <code> 
   <clt fqn=""java.util.AbstractList"" api=""AbstractList"" kind=""class"">
     AbstractList 
   </clt></code>.)</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractQueue.html""><code> 
    <clt fqn=""java.util.AbstractQueue"" api=""AbstractQueue"" kind=""class"">
      AbstractQueue 
    </clt></code></a> ? at a minimum, you must provide the <code>offer</code>, <code>peek</code>, <code>poll</code>, and <code> 
   <clt fqn=""java.util.AbstractCollection.size"" api=""AbstractCollection"" kind=""method"">
    AbstractCollection.size
   </clt></code> methods and an <code> 
   <clt fqn=""java.util.AbstractList.iterator"" api=""AbstractList"" kind=""method"">
    AbstractList.iterator
   </clt></code> supporting <code> 
   <clt fqn=""java.util.AbstractList.remove"" api=""AbstractList"" kind=""method"">
    AbstractList.remove
   </clt></code>.</li> 
 <li> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/AbstractMap.html""><code> 
    <clt fqn=""java.util.AbstractMap"" api=""AbstractMap"" kind=""class"">
      AbstractMap 
    </clt></code></a> ? a <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code>. At a minimum you must provide the <code>entrySet</code> view. This is typically implemented with the <code> 
   <clt fqn=""java.util.AbstractSet"" api=""AbstractSet"" kind=""class"">
     AbstractSet 
   </clt></code> class. If the <code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code> is modifiable, you must also provide the <code>put</code> method.</li> 
</ul>","Map","java.util.Map","class",0
,"Convenience Implementations","List View of an Array","<h2>List View of an Array</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList(T...)""><code> 
   <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
    Arrays.asList
   </clt></code></a> method returns a <code>List</code> view of its array argument. Changes to the <code>List</code> write through to the array and vice versa. The size of the collection is that of the array and cannot be changed. If the <code>add</code> or the <code>remove</code> method is called on the <code>List</code>, an <code> 
  <clt fqn=""java.lang.UnsupportedOperationException"" api=""UnsupportedOperationException"" kind=""class"">
    UnsupportedOperationException 
  </clt></code> will result.</p> 
<p>The normal use of this implementation is as a bridge between array-based and collection-based APIs. It allows you to pass an array to a method expecting a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> or a <code>List</code>. However, this implementation also has another use. If you need a fixed-size <code>List</code>, it's more efficient than any general-purpose <code>List</code> implementation. This is the idiom.</p> 
<div class=""codeblock""> 
 <pre>
List&lt;String&gt; list = Arrays.asList(new String[size]);
</pre> 
</div> 
<p>Note that a reference to the backing array is not retained.</p>","Arrays","java.util.Arrays","class",0
,"Convenience Implementations","List View of an Array","<h2>List View of an Array</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList(T...)""><code> 
   <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
    Arrays.asList
   </clt></code></a> method returns a <code>List</code> view of its array argument. Changes to the <code>List</code> write through to the array and vice versa. The size of the collection is that of the array and cannot be changed. If the <code>add</code> or the <code>remove</code> method is called on the <code>List</code>, an <code> 
  <clt fqn=""java.lang.UnsupportedOperationException"" api=""UnsupportedOperationException"" kind=""class"">
    UnsupportedOperationException 
  </clt></code> will result.</p> 
<p>The normal use of this implementation is as a bridge between array-based and collection-based APIs. It allows you to pass an array to a method expecting a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> or a <code>List</code>. However, this implementation also has another use. If you need a fixed-size <code>List</code>, it's more efficient than any general-purpose <code>List</code> implementation. This is the idiom.</p> 
<div class=""codeblock""> 
 <pre>
List&lt;String&gt; list = Arrays.asList(new String[size]);
</pre> 
</div> 
<p>Note that a reference to the backing array is not retained.</p>","UnsupportedOperationException","java.lang.UnsupportedOperationException","class",0
,"Convenience Implementations","List View of an Array","<h2>List View of an Array</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#asList(T...)""><code> 
   <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
    Arrays.asList
   </clt></code></a> method returns a <code>List</code> view of its array argument. Changes to the <code>List</code> write through to the array and vice versa. The size of the collection is that of the array and cannot be changed. If the <code>add</code> or the <code>remove</code> method is called on the <code>List</code>, an <code> 
  <clt fqn=""java.lang.UnsupportedOperationException"" api=""UnsupportedOperationException"" kind=""class"">
    UnsupportedOperationException 
  </clt></code> will result.</p> 
<p>The normal use of this implementation is as a bridge between array-based and collection-based APIs. It allows you to pass an array to a method expecting a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> or a <code>List</code>. However, this implementation also has another use. If you need a fixed-size <code>List</code>, it's more efficient than any general-purpose <code>List</code> implementation. This is the idiom.</p> 
<div class=""codeblock""> 
 <pre>
List&lt;String&gt; list = Arrays.asList(new String[size]);
</pre> 
</div> 
<p>Note that a reference to the backing array is not retained.</p>","Collection","java.util.Collection","class",0
,"Convenience Implementations","Immutable Multiple-Copy List","<h2>Immutable Multiple-Copy List</h2> 
<p>Occasionally you'll need an immutable <code>List</code> consisting of multiple copies of the same element. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#nCopies(int,%20T)""><code> 
   <clt fqn=""java.util.Collections.nCopies"" api=""Collections"" kind=""method"">
    Collections.nCopies
   </clt></code></a> method returns such a list. This implementation has two main uses. The first is to initialize a newly created <code>List</code>; for example, suppose you want an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> initially consisting of 1,000 <code>null</code> elements. The following incantation does the trick.</p> 
<div class=""codeblock""> 
 <pre>
List&lt;Type&gt; list = new ArrayList&lt;Type&gt;(Collections.nCopies(1000, (Type)null);
</pre> 
</div> 
<p>Of course, the initial value of each element need not be <code>null</code>. The second main use is to grow an existing <code>List</code>. For example, suppose you want to add 69 copies of the string <code>&quot;fruit bat&quot;</code> to the end of a <code>List&lt;String&gt;</code>. It's not clear why you'd want to do such a thing, but let's just suppose you did. The following is how you'd do it.</p> 
<div class=""codeblock""> 
 <pre>
lovablePets.addAll(Collections.nCopies(69, &quot;fruit bat&quot;));
</pre> 
</div> 
<p>By using the form of <code>addAll</code> that takes both an index and a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>, you can add the new elements to the middle of a <code>List</code> instead of to the end of it.</p>","Collections","java.util.Collections","class",0
,"Convenience Implementations","Immutable Multiple-Copy List","<h2>Immutable Multiple-Copy List</h2> 
<p>Occasionally you'll need an immutable <code>List</code> consisting of multiple copies of the same element. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#nCopies(int,%20T)""><code> 
   <clt fqn=""java.util.Collections.nCopies"" api=""Collections"" kind=""method"">
    Collections.nCopies
   </clt></code></a> method returns such a list. This implementation has two main uses. The first is to initialize a newly created <code>List</code>; for example, suppose you want an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> initially consisting of 1,000 <code>null</code> elements. The following incantation does the trick.</p> 
<div class=""codeblock""> 
 <pre>
List&lt;Type&gt; list = new ArrayList&lt;Type&gt;(Collections.nCopies(1000, (Type)null);
</pre> 
</div> 
<p>Of course, the initial value of each element need not be <code>null</code>. The second main use is to grow an existing <code>List</code>. For example, suppose you want to add 69 copies of the string <code>&quot;fruit bat&quot;</code> to the end of a <code>List&lt;String&gt;</code>. It's not clear why you'd want to do such a thing, but let's just suppose you did. The following is how you'd do it.</p> 
<div class=""codeblock""> 
 <pre>
lovablePets.addAll(Collections.nCopies(69, &quot;fruit bat&quot;));
</pre> 
</div> 
<p>By using the form of <code>addAll</code> that takes both an index and a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>, you can add the new elements to the middle of a <code>List</code> instead of to the end of it.</p>","ArrayList","java.util.ArrayList","class",0
,"Convenience Implementations","Immutable Multiple-Copy List","<h2>Immutable Multiple-Copy List</h2> 
<p>Occasionally you'll need an immutable <code>List</code> consisting of multiple copies of the same element. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#nCopies(int,%20T)""><code> 
   <clt fqn=""java.util.Collections.nCopies"" api=""Collections"" kind=""method"">
    Collections.nCopies
   </clt></code></a> method returns such a list. This implementation has two main uses. The first is to initialize a newly created <code>List</code>; for example, suppose you want an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> initially consisting of 1,000 <code>null</code> elements. The following incantation does the trick.</p> 
<div class=""codeblock""> 
 <pre>
List&lt;Type&gt; list = new ArrayList&lt;Type&gt;(Collections.nCopies(1000, (Type)null);
</pre> 
</div> 
<p>Of course, the initial value of each element need not be <code>null</code>. The second main use is to grow an existing <code>List</code>. For example, suppose you want to add 69 copies of the string <code>&quot;fruit bat&quot;</code> to the end of a <code>List&lt;String&gt;</code>. It's not clear why you'd want to do such a thing, but let's just suppose you did. The following is how you'd do it.</p> 
<div class=""codeblock""> 
 <pre>
lovablePets.addAll(Collections.nCopies(69, &quot;fruit bat&quot;));
</pre> 
</div> 
<p>By using the form of <code>addAll</code> that takes both an index and a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>, you can add the new elements to the middle of a <code>List</code> instead of to the end of it.</p>","Collection","java.util.Collection","class",0
,"Convenience Implementations","Immutable Singleton Set","<h2>Immutable Singleton Set</h2> 
<p>Sometimes you'll need an immutable <i>singleton</i> <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>, which consists of a single, specified element. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#singleton(T)""><code> 
   <clt fqn=""java.util.Collections.singleton"" api=""Collections"" kind=""method"">
    Collections.singleton
   </clt></code></a> method returns such a <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>. One use of this implementation is to remove all occurrences of a specified element from a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>.</p> 
<div class=""codeblock""> 
 <pre>
c.removeAll(Collections.singleton(e));
</pre> 
</div> 
<p>A related idiom removes all elements that map to a specified value from a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>. For example, suppose you have a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> ? <code>job</code> ? that maps people to their line of work and suppose you want to eliminate all the lawyers. The following one-liner will do the deed.</p> 
<div class=""codeblock""> 
 <pre>
job.values().removeAll(Collections.singleton(LAWYER));
</pre> 
</div> 
<p>One more use of this implementation is to provide a single input value to a method that is written to accept a collection of values.</p>","Set","java.util.Set","class",0
,"Convenience Implementations","Immutable Singleton Set","<h2>Immutable Singleton Set</h2> 
<p>Sometimes you'll need an immutable <i>singleton</i> <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>, which consists of a single, specified element. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#singleton(T)""><code> 
   <clt fqn=""java.util.Collections.singleton"" api=""Collections"" kind=""method"">
    Collections.singleton
   </clt></code></a> method returns such a <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>. One use of this implementation is to remove all occurrences of a specified element from a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>.</p> 
<div class=""codeblock""> 
 <pre>
c.removeAll(Collections.singleton(e));
</pre> 
</div> 
<p>A related idiom removes all elements that map to a specified value from a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>. For example, suppose you have a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> ? <code>job</code> ? that maps people to their line of work and suppose you want to eliminate all the lawyers. The following one-liner will do the deed.</p> 
<div class=""codeblock""> 
 <pre>
job.values().removeAll(Collections.singleton(LAWYER));
</pre> 
</div> 
<p>One more use of this implementation is to provide a single input value to a method that is written to accept a collection of values.</p>","Collections","java.util.Collections","class",0
,"Convenience Implementations","Immutable Singleton Set","<h2>Immutable Singleton Set</h2> 
<p>Sometimes you'll need an immutable <i>singleton</i> <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>, which consists of a single, specified element. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#singleton(T)""><code> 
   <clt fqn=""java.util.Collections.singleton"" api=""Collections"" kind=""method"">
    Collections.singleton
   </clt></code></a> method returns such a <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>. One use of this implementation is to remove all occurrences of a specified element from a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>.</p> 
<div class=""codeblock""> 
 <pre>
c.removeAll(Collections.singleton(e));
</pre> 
</div> 
<p>A related idiom removes all elements that map to a specified value from a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>. For example, suppose you have a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> ? <code>job</code> ? that maps people to their line of work and suppose you want to eliminate all the lawyers. The following one-liner will do the deed.</p> 
<div class=""codeblock""> 
 <pre>
job.values().removeAll(Collections.singleton(LAWYER));
</pre> 
</div> 
<p>One more use of this implementation is to provide a single input value to a method that is written to accept a collection of values.</p>","Collection","java.util.Collection","class",0
,"Convenience Implementations","Immutable Singleton Set","<h2>Immutable Singleton Set</h2> 
<p>Sometimes you'll need an immutable <i>singleton</i> <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>, which consists of a single, specified element. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#singleton(T)""><code> 
   <clt fqn=""java.util.Collections.singleton"" api=""Collections"" kind=""method"">
    Collections.singleton
   </clt></code></a> method returns such a <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>. One use of this implementation is to remove all occurrences of a specified element from a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code>.</p> 
<div class=""codeblock""> 
 <pre>
c.removeAll(Collections.singleton(e));
</pre> 
</div> 
<p>A related idiom removes all elements that map to a specified value from a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>. For example, suppose you have a <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> ? <code>job</code> ? that maps people to their line of work and suppose you want to eliminate all the lawyers. The following one-liner will do the deed.</p> 
<div class=""codeblock""> 
 <pre>
job.values().removeAll(Collections.singleton(LAWYER));
</pre> 
</div> 
<p>One more use of this implementation is to provide a single input value to a method that is written to accept a collection of values.</p>","Map","java.util.Map","class",0
,"Convenience Implementations","Empty Set List and Map Constants","<h2>Empty 
 <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
   Set 
 </clt> 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt> and 
 <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
   Map 
 </clt>Constants</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html""><code> 
   <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
     Collections 
   </clt></code></a> class provides methods to return the empty <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>, <code>List</code>, and <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptySet()""><code> 
   <clt fqn=""java.util.Collections.emptySet"" api=""Collections"" kind=""method"">
    Collections.emptySet
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyList()""><code> 
   <clt fqn=""java.util.Collections.emptyList"" api=""Collections"" kind=""method"">
    Collections.emptyList
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyMap()""><code> 
   <clt fqn=""java.util.Collections.emptyMap"" api=""Collections"" kind=""method"">
    Collections.emptyMap
   </clt></code></a>. The main use of these constants is as input to methods that take a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> of values when you don't want to provide any values at all, as in this example.</p> 
<div class=""codeblock""> 
 <pre>
tourist.declarePurchases(Collections.emptySet());
</pre> 
</div>","Set","java.util.Set","class",0
,"Convenience Implementations","Empty Set List and Map Constants","<h2>Empty 
 <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
   Set 
 </clt> 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt> and 
 <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
   Map 
 </clt>Constants</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html""><code> 
   <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
     Collections 
   </clt></code></a> class provides methods to return the empty <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>, <code>List</code>, and <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptySet()""><code> 
   <clt fqn=""java.util.Collections.emptySet"" api=""Collections"" kind=""method"">
    Collections.emptySet
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyList()""><code> 
   <clt fqn=""java.util.Collections.emptyList"" api=""Collections"" kind=""method"">
    Collections.emptyList
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyMap()""><code> 
   <clt fqn=""java.util.Collections.emptyMap"" api=""Collections"" kind=""method"">
    Collections.emptyMap
   </clt></code></a>. The main use of these constants is as input to methods that take a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> of values when you don't want to provide any values at all, as in this example.</p> 
<div class=""codeblock""> 
 <pre>
tourist.declarePurchases(Collections.emptySet());
</pre> 
</div>","List","java.util.List","class",0
,"Convenience Implementations","Empty Set List and Map Constants","<h2>Empty 
 <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
   Set 
 </clt> 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt> and 
 <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
   Map 
 </clt>Constants</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html""><code> 
   <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
     Collections 
   </clt></code></a> class provides methods to return the empty <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>, <code>List</code>, and <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptySet()""><code> 
   <clt fqn=""java.util.Collections.emptySet"" api=""Collections"" kind=""method"">
    Collections.emptySet
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyList()""><code> 
   <clt fqn=""java.util.Collections.emptyList"" api=""Collections"" kind=""method"">
    Collections.emptyList
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyMap()""><code> 
   <clt fqn=""java.util.Collections.emptyMap"" api=""Collections"" kind=""method"">
    Collections.emptyMap
   </clt></code></a>. The main use of these constants is as input to methods that take a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> of values when you don't want to provide any values at all, as in this example.</p> 
<div class=""codeblock""> 
 <pre>
tourist.declarePurchases(Collections.emptySet());
</pre> 
</div>","Map","java.util.Map","class",0
,"Convenience Implementations","Empty Set List and Map Constants","<h2>Empty 
 <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
   Set 
 </clt> 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt> and 
 <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
   Map 
 </clt>Constants</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html""><code> 
   <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
     Collections 
   </clt></code></a> class provides methods to return the empty <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>, <code>List</code>, and <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptySet()""><code> 
   <clt fqn=""java.util.Collections.emptySet"" api=""Collections"" kind=""method"">
    Collections.emptySet
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyList()""><code> 
   <clt fqn=""java.util.Collections.emptyList"" api=""Collections"" kind=""method"">
    Collections.emptyList
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyMap()""><code> 
   <clt fqn=""java.util.Collections.emptyMap"" api=""Collections"" kind=""method"">
    Collections.emptyMap
   </clt></code></a>. The main use of these constants is as input to methods that take a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> of values when you don't want to provide any values at all, as in this example.</p> 
<div class=""codeblock""> 
 <pre>
tourist.declarePurchases(Collections.emptySet());
</pre> 
</div>","Collections","java.util.Collections","class",0
,"Convenience Implementations","Empty Set List and Map Constants","<h2>Empty 
 <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
   Set 
 </clt> 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt> and 
 <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
   Map 
 </clt>Constants</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html""><code> 
   <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
     Collections 
   </clt></code></a> class provides methods to return the empty <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code>, <code>List</code>, and <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptySet()""><code> 
   <clt fqn=""java.util.Collections.emptySet"" api=""Collections"" kind=""method"">
    Collections.emptySet
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyList()""><code> 
   <clt fqn=""java.util.Collections.emptyList"" api=""Collections"" kind=""method"">
    Collections.emptyList
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#emptyMap()""><code> 
   <clt fqn=""java.util.Collections.emptyMap"" api=""Collections"" kind=""method"">
    Collections.emptyMap
   </clt></code></a>. The main use of these constants is as input to methods that take a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> of values when you don't want to provide any values at all, as in this example.</p> 
<div class=""codeblock""> 
 <pre>
tourist.declarePurchases(Collections.emptySet());
</pre> 
</div>","Collection","java.util.Collection","class",0
,"Deque Implementations","Deque Implementations","<div id=""PageTitle""> 
 <h1>Deque Implementations</h1> 
</div> 
<p>The <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface, pronounced as <em>&quot;deck&quot;</em>, represents a double-ended queue. The <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface can be implemented as various types of <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections 
  </clt></code>. The <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface implementations are grouped into general-purpose and concurrent implementations.</p>","Deque","java.util.Deque","class",0
,"Deque Implementations","Deque Implementations","<div id=""PageTitle""> 
 <h1>Deque Implementations</h1> 
</div> 
<p>The <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface, pronounced as <em>&quot;deck&quot;</em>, represents a double-ended queue. The <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface can be implemented as various types of <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections 
  </clt></code>. The <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface implementations are grouped into general-purpose and concurrent implementations.</p>","Collections","java.util.Collections","class",0
,"Deque Implementations","General-Purpose Deque Implementations","<h2>General-Purpose 
 <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
   Deque 
 </clt>Implementations</h2> 
<p> The general-purpose implementations include <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> classes. The <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface supports insertion, removal and retrieval of elements at both ends. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html""><code> 
   <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
     ArrayDeque 
   </clt></code></a> class is the resizable array implementation of the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface, whereas the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a> class is the list implementation.</p> 
<p> The basic insertion, removal and retieval operations in the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface <code>addFirst</code>, <code>addLast</code>, <code>removeFirst</code>, <code>removeLast</code>, <code>getFirst</code> and <code>getLast</code>. The method <code>addFirst</code> adds an element at the head whereas <code>addLast</code> adds an element at the tail of the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> instance.</p> 
<p>The <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation is more flexible than the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> implementation. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implements all optional list operations. <code>null</code> elements are allowed in the <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation but not in the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> implementation.</p> 
<p>In terms of efficiency, <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> is more efficient than the <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> for add and remove operation at both ends. The best operation in a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation is removing the current element during the iteration. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementations are not ideal structures to iterate.</p> 
<p>The <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation consumes more memory than the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> implementation. For the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> instance traversal use any of the following: </p>","Deque","java.util.Deque","class",0
,"Deque Implementations","General-Purpose Deque Implementations","<h2>General-Purpose 
 <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
   Deque 
 </clt>Implementations</h2> 
<p> The general-purpose implementations include <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> classes. The <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface supports insertion, removal and retrieval of elements at both ends. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html""><code> 
   <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
     ArrayDeque 
   </clt></code></a> class is the resizable array implementation of the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface, whereas the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a> class is the list implementation.</p> 
<p> The basic insertion, removal and retieval operations in the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface <code>addFirst</code>, <code>addLast</code>, <code>removeFirst</code>, <code>removeLast</code>, <code>getFirst</code> and <code>getLast</code>. The method <code>addFirst</code> adds an element at the head whereas <code>addLast</code> adds an element at the tail of the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> instance.</p> 
<p>The <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation is more flexible than the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> implementation. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implements all optional list operations. <code>null</code> elements are allowed in the <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation but not in the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> implementation.</p> 
<p>In terms of efficiency, <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> is more efficient than the <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> for add and remove operation at both ends. The best operation in a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation is removing the current element during the iteration. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementations are not ideal structures to iterate.</p> 
<p>The <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation consumes more memory than the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> implementation. For the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> instance traversal use any of the following: </p>","LinkedList","java.util.LinkedList","class",0
,"Deque Implementations","General-Purpose Deque Implementations","<h2>General-Purpose 
 <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
   Deque 
 </clt>Implementations</h2> 
<p> The general-purpose implementations include <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> classes. The <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface supports insertion, removal and retrieval of elements at both ends. The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html""><code> 
   <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
     ArrayDeque 
   </clt></code></a> class is the resizable array implementation of the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface, whereas the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a> class is the list implementation.</p> 
<p> The basic insertion, removal and retieval operations in the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface <code>addFirst</code>, <code>addLast</code>, <code>removeFirst</code>, <code>removeLast</code>, <code>getFirst</code> and <code>getLast</code>. The method <code>addFirst</code> adds an element at the head whereas <code>addLast</code> adds an element at the tail of the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> instance.</p> 
<p>The <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation is more flexible than the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> implementation. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implements all optional list operations. <code>null</code> elements are allowed in the <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation but not in the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> implementation.</p> 
<p>In terms of efficiency, <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> is more efficient than the <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> for add and remove operation at both ends. The best operation in a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation is removing the current element during the iteration. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementations are not ideal structures to iterate.</p> 
<p>The <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> implementation consumes more memory than the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> implementation. For the <code> 
  <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
    ArrayDeque 
  </clt></code> instance traversal use any of the following: </p>","ArrayDeque","java.util.ArrayDeque","class",0
,"Deque Implementations","Concurrent Deque Implementations","<h2>Concurrent 
 <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
   Deque 
 </clt>Implementations</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingDeque.html""><code> 
   <clt fqn=""java.util.concurrent.LinkedBlockingDeque"" api=""LinkedBlockingDeque"" kind=""class"">
     LinkedBlockingDeque 
   </clt></code></a> class is the concurrent implementation of the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface. If the deque is empty then methods such as <code> 
  <clt fqn=""java.util.concurrent.LinkedBlockingDeque.takeFirst"" api=""LinkedBlockingDeque"" kind=""method"">
   LinkedBlockingDeque.takeFirst
  </clt></code> and <code> 
  <clt fqn=""java.util.concurrent.LinkedBlockingDeque.takeLast"" api=""LinkedBlockingDeque"" kind=""method"">
   LinkedBlockingDeque.takeLast
  </clt></code> wait until the element becomes available, and then retrieves and removes the same element. </p>","Deque","java.util.Deque","class",0
,"Deque Implementations","Concurrent Deque Implementations","<h2>Concurrent 
 <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
   Deque 
 </clt>Implementations</h2> 
<p>The <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/LinkedBlockingDeque.html""><code> 
   <clt fqn=""java.util.concurrent.LinkedBlockingDeque"" api=""LinkedBlockingDeque"" kind=""class"">
     LinkedBlockingDeque 
   </clt></code></a> class is the concurrent implementation of the <code> 
  <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
    Deque 
  </clt></code> interface. If the deque is empty then methods such as <code> 
  <clt fqn=""java.util.concurrent.LinkedBlockingDeque.takeFirst"" api=""LinkedBlockingDeque"" kind=""method"">
   LinkedBlockingDeque.takeFirst
  </clt></code> and <code> 
  <clt fqn=""java.util.concurrent.LinkedBlockingDeque.takeLast"" api=""LinkedBlockingDeque"" kind=""method"">
   LinkedBlockingDeque.takeLast
  </clt></code> wait until the element becomes available, and then retrieves and removes the same element. </p>","LinkedBlockingDeque","java.util.concurrent.LinkedBlockingDeque","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","Set","java.util.Set","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","HashSet","java.util.HashSet","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","TreeSet","java.util.TreeSet","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","LinkedHashSet","java.util.LinkedHashSet","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","List","java.util.List","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","ArrayList","java.util.ArrayList","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","Queue","java.util.Queue","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","Deque","java.util.Deque","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","ArrayDeque","java.util.ArrayDeque","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","LinkedList","java.util.LinkedList","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","Map","java.util.Map","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","HashMap","java.util.HashMap","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","TreeMap","java.util.TreeMap","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","LinkedHashMap","java.util.LinkedHashMap","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","SortedSet","java.util.SortedSet","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","SortedMap","java.util.SortedMap","class",0
,"Lesson: Implementations","Lesson: Implementations - part 2","<h3>Lesson: Implementations - part 2</h3>
<p>The general-purpose implementations are summarized in the <span id=""table:General-purpose-implementations"">following table</span>.</p> 
<table summary=""General-purpose-implementations"" border=""2""> 
 <caption id=""General-purpose-implementations""> 
  <strong>General-purpose Implementations</strong> 
 </caption> 
 <tbody> 
  <tr> 
   <th id=""h1"" width=""15%"">Interfaces</th> 
   <th id=""h2"">Hash table Implementations</th> 
   <th id=""h3"">Resizable array Implementations</th> 
   <th id=""h4"">Tree Implementations</th> 
   <th id=""h5"">Linked list Implementations</th> 
   <th id=""h6"">Hash table + Linked list Implementations</th> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
       Set 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
       HashSet 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
       TreeSet 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashSet"" api=""LinkedHashSet"" kind=""class"">
       LinkedHashSet 
     </clt></code></td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.List"" api=""List"" kind=""class"">
       List 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
       ArrayList 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code><clt fqn=""java.util.Queue"" api=""Queue"" kind=""class"">Queue</clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Deque"" api=""Deque"" kind=""class"">
       Deque 
     </clt></code></td> 
   <td headers=""h2"">&nbsp;</td> 
   <td headers=""h3""><code> 
     <clt fqn=""java.util.ArrayDeque"" api=""ArrayDeque"" kind=""class"">
       ArrayDeque 
     </clt></code></td> 
   <td headers=""h4"">&nbsp;</td> 
   <td headers=""h5""><code> 
     <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
       LinkedList 
     </clt></code></td> 
   <td headers=""h6"">&nbsp;</td> 
  </tr> 
  <tr> 
   <td headers=""h1""><code> 
     <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
       Map 
     </clt></code></td> 
   <td headers=""h2""><code> 
     <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
       HashMap 
     </clt></code></td> 
   <td headers=""h3"">&nbsp;</td> 
   <td headers=""h4""><code> 
     <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
       TreeMap 
     </clt></code></td> 
   <td headers=""h5"">&nbsp;</td> 
   <td headers=""h6""><code> 
     <clt fqn=""java.util.LinkedHashMap"" api=""LinkedHashMap"" kind=""class"">
       LinkedHashMap 
     </clt></code></td> 
  </tr> 
 </tbody> 
</table> 
<p>As you can see from the table, the Java Collections Framework provides several general-purpose implementations of the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Set.html""><code> 
   <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
     Set 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code>List</code></a> , and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/Map.html""><code> 
   <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
     Map 
   </clt></code></a> interfaces. In each case, one implementation ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashSet.html""><code> 
   <clt fqn=""java.util.HashSet"" api=""HashSet"" kind=""class"">
     HashSet 
   </clt></code></a>, <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a>, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html""><code> 
   <clt fqn=""java.util.HashMap"" api=""HashMap"" kind=""class"">
     HashMap 
   </clt></code></a> ? is clearly the one to use for most applications, all other things being equal. Note that the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedSet.html""><code> 
   <clt fqn=""java.util.SortedSet"" api=""SortedSet"" kind=""class"">
     SortedSet 
   </clt></code></a> and the <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/SortedMap.html""><code> 
   <clt fqn=""java.util.SortedMap"" api=""SortedMap"" kind=""class"">
     SortedMap 
   </clt></code></a> interfaces do not have rows in the table. Each of those interfaces has one implementation <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeSet.html"">(<code> 
   <clt fqn=""java.util.TreeSet"" api=""TreeSet"" kind=""class"">
     TreeSet 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/TreeMap.html""><code> 
   <clt fqn=""java.util.TreeMap"" api=""TreeMap"" kind=""class"">
     TreeMap 
   </clt></code></a>) and is listed in the <code> 
  <clt fqn=""java.util.Set"" api=""Set"" kind=""class"">
    Set 
  </clt></code> and the <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code> rows. There are two general-purpose <code>Queue</code> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>, which is also a <code>List</code> implementation, and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/PriorityQueue.html""><code> 
   <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
     PriorityQueue 
   </clt></code></a>, which is omitted from the table. These two implementations provide very different semantics: <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> provides FIFO semantics, while <code> 
  <clt fqn=""java.util.PriorityQueue"" api=""PriorityQueue"" kind=""class"">
    PriorityQueue 
  </clt></code> orders its elements according to their values.</p>","PriorityQueue","java.util.PriorityQueue","class",0
,"Lesson: Implementations","Lesson: Implementations - part 3","<h3>Lesson: Implementations - part 3</h3>
<p>Each of the general-purpose implementations provides all optional operations contained in its interface. All permit <code>null</code> elements, keys, and values. None are synchronized (thread-safe). All have <em>fail-fast iterators</em>, which detect illegal concurrent modification during iteration and fail quickly and cleanly rather than risking arbitrary, nondeterministic behavior at an undetermined time in the future. All are <code> 
  <clt fqn=""java.io.Serializable"" api=""Serializable"" kind=""class"">
    Serializable 
  </clt></code> and all support a public <code>clone</code> method.</p> 
<p>The fact that these implementations are unsynchronized represents a break with the past: The legacy collections <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> and <code> 
  <clt fqn=""java.util.Hashtable"" api=""Hashtable"" kind=""class"">
    Hashtable 
  </clt></code> are synchronized. The present approach was taken because collections are frequently used when the synchronization is of no benefit. Such uses include single-threaded use, read-only use, and use as part of a larger data object that does its own synchronization. In general, it is good API design practice not to make users pay for a feature they don't use. Furthermore, unnecessary synchronization can result in deadlock under certain circumstances.</p>","Serializable","java.io.Serializable","class",0
,"Lesson: Implementations","Lesson: Implementations - part 3","<h3>Lesson: Implementations - part 3</h3>
<p>Each of the general-purpose implementations provides all optional operations contained in its interface. All permit <code>null</code> elements, keys, and values. None are synchronized (thread-safe). All have <em>fail-fast iterators</em>, which detect illegal concurrent modification during iteration and fail quickly and cleanly rather than risking arbitrary, nondeterministic behavior at an undetermined time in the future. All are <code> 
  <clt fqn=""java.io.Serializable"" api=""Serializable"" kind=""class"">
    Serializable 
  </clt></code> and all support a public <code>clone</code> method.</p> 
<p>The fact that these implementations are unsynchronized represents a break with the past: The legacy collections <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> and <code> 
  <clt fqn=""java.util.Hashtable"" api=""Hashtable"" kind=""class"">
    Hashtable 
  </clt></code> are synchronized. The present approach was taken because collections are frequently used when the synchronization is of no benefit. Such uses include single-threaded use, read-only use, and use as part of a larger data object that does its own synchronization. In general, it is good API design practice not to make users pay for a feature they don't use. Furthermore, unnecessary synchronization can result in deadlock under certain circumstances.</p>","Vector","java.util.Vector","class",0
,"Lesson: Implementations","Lesson: Implementations - part 3","<h3>Lesson: Implementations - part 3</h3>
<p>Each of the general-purpose implementations provides all optional operations contained in its interface. All permit <code>null</code> elements, keys, and values. None are synchronized (thread-safe). All have <em>fail-fast iterators</em>, which detect illegal concurrent modification during iteration and fail quickly and cleanly rather than risking arbitrary, nondeterministic behavior at an undetermined time in the future. All are <code> 
  <clt fqn=""java.io.Serializable"" api=""Serializable"" kind=""class"">
    Serializable 
  </clt></code> and all support a public <code>clone</code> method.</p> 
<p>The fact that these implementations are unsynchronized represents a break with the past: The legacy collections <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> and <code> 
  <clt fqn=""java.util.Hashtable"" api=""Hashtable"" kind=""class"">
    Hashtable 
  </clt></code> are synchronized. The present approach was taken because collections are frequently used when the synchronization is of no benefit. Such uses include single-threaded use, read-only use, and use as part of a larger data object that does its own synchronization. In general, it is good API design practice not to make users pay for a feature they don't use. Furthermore, unnecessary synchronization can result in deadlock under certain circumstances.</p>","Hashtable","java.util.Hashtable","class",0
,"Lesson: Implementations","Lesson: Implementations - part 4","<h3>Lesson: Implementations - part 4</h3>
<p>If you need thread-safe collections, the synchronization wrappers, described in the <a class=""TutorialLink"" target=""_top"" href=""wrapper.html"">Wrapper Implementations</a> section, allow <em>any</em> collection to be transformed into a synchronized collection. Thus, synchronization is optional for general-purpose implementations, whereas it is mandatory for legacy implementations. Moreover, the <code>java.util.concurrent</code> package provides concurrent implementations of the <code> 
  <clt fqn=""java.util.concurrent.BlockingQueue"" api=""BlockingQueue"" kind=""class"">
    BlockingQueue 
  </clt></code> interface, which extends <code>Queue</code>, and of the <code> 
  <clt fqn=""java.util.concurrent.ConcurrentMap"" api=""ConcurrentMap"" kind=""class"">
    ConcurrentMap 
  </clt></code> interface, which extends <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>. These implementations offer much higher concurrency than mere synchronized implementations.</p> 
<p>As a rule, you should be thinking about the interfaces, <em> 
  <clt fqn=""java.math.BigInteger.not"" api=""BigInteger"" kind=""method"">
   BigInteger.not
  </clt></em> the implementations. That is why there are no programming examples in this section. For the most part, the choice of implementation affects only performance. The preferred style, as mentioned in the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/index.html"">Interfaces</a> section, is to choose an implementation when a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> is created and to immediately assign the new collection to a variable of the corresponding interface type (or to pass the collection to a method expecting an argument of the interface type). In this way, the program does not become dependent on any added methods in a given implementation, leaving the programmer free to change implementations anytime that it is warranted by performance concerns or behavioral details.</p>","BlockingQueue","java.util.concurrent.BlockingQueue","class",0
,"Lesson: Implementations","Lesson: Implementations - part 4","<h3>Lesson: Implementations - part 4</h3>
<p>If you need thread-safe collections, the synchronization wrappers, described in the <a class=""TutorialLink"" target=""_top"" href=""wrapper.html"">Wrapper Implementations</a> section, allow <em>any</em> collection to be transformed into a synchronized collection. Thus, synchronization is optional for general-purpose implementations, whereas it is mandatory for legacy implementations. Moreover, the <code>java.util.concurrent</code> package provides concurrent implementations of the <code> 
  <clt fqn=""java.util.concurrent.BlockingQueue"" api=""BlockingQueue"" kind=""class"">
    BlockingQueue 
  </clt></code> interface, which extends <code>Queue</code>, and of the <code> 
  <clt fqn=""java.util.concurrent.ConcurrentMap"" api=""ConcurrentMap"" kind=""class"">
    ConcurrentMap 
  </clt></code> interface, which extends <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>. These implementations offer much higher concurrency than mere synchronized implementations.</p> 
<p>As a rule, you should be thinking about the interfaces, <em> 
  <clt fqn=""java.math.BigInteger.not"" api=""BigInteger"" kind=""method"">
   BigInteger.not
  </clt></em> the implementations. That is why there are no programming examples in this section. For the most part, the choice of implementation affects only performance. The preferred style, as mentioned in the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/index.html"">Interfaces</a> section, is to choose an implementation when a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> is created and to immediately assign the new collection to a variable of the corresponding interface type (or to pass the collection to a method expecting an argument of the interface type). In this way, the program does not become dependent on any added methods in a given implementation, leaving the programmer free to change implementations anytime that it is warranted by performance concerns or behavioral details.</p>","ConcurrentMap","java.util.concurrent.ConcurrentMap","class",0
,"Lesson: Implementations","Lesson: Implementations - part 4","<h3>Lesson: Implementations - part 4</h3>
<p>If you need thread-safe collections, the synchronization wrappers, described in the <a class=""TutorialLink"" target=""_top"" href=""wrapper.html"">Wrapper Implementations</a> section, allow <em>any</em> collection to be transformed into a synchronized collection. Thus, synchronization is optional for general-purpose implementations, whereas it is mandatory for legacy implementations. Moreover, the <code>java.util.concurrent</code> package provides concurrent implementations of the <code> 
  <clt fqn=""java.util.concurrent.BlockingQueue"" api=""BlockingQueue"" kind=""class"">
    BlockingQueue 
  </clt></code> interface, which extends <code>Queue</code>, and of the <code> 
  <clt fqn=""java.util.concurrent.ConcurrentMap"" api=""ConcurrentMap"" kind=""class"">
    ConcurrentMap 
  </clt></code> interface, which extends <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>. These implementations offer much higher concurrency than mere synchronized implementations.</p> 
<p>As a rule, you should be thinking about the interfaces, <em> 
  <clt fqn=""java.math.BigInteger.not"" api=""BigInteger"" kind=""method"">
   BigInteger.not
  </clt></em> the implementations. That is why there are no programming examples in this section. For the most part, the choice of implementation affects only performance. The preferred style, as mentioned in the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/index.html"">Interfaces</a> section, is to choose an implementation when a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> is created and to immediately assign the new collection to a variable of the corresponding interface type (or to pass the collection to a method expecting an argument of the interface type). In this way, the program does not become dependent on any added methods in a given implementation, leaving the programmer free to change implementations anytime that it is warranted by performance concerns or behavioral details.</p>","Map","java.util.Map","class",0
,"Lesson: Implementations","Lesson: Implementations - part 4","<h3>Lesson: Implementations - part 4</h3>
<p>If you need thread-safe collections, the synchronization wrappers, described in the <a class=""TutorialLink"" target=""_top"" href=""wrapper.html"">Wrapper Implementations</a> section, allow <em>any</em> collection to be transformed into a synchronized collection. Thus, synchronization is optional for general-purpose implementations, whereas it is mandatory for legacy implementations. Moreover, the <code>java.util.concurrent</code> package provides concurrent implementations of the <code> 
  <clt fqn=""java.util.concurrent.BlockingQueue"" api=""BlockingQueue"" kind=""class"">
    BlockingQueue 
  </clt></code> interface, which extends <code>Queue</code>, and of the <code> 
  <clt fqn=""java.util.concurrent.ConcurrentMap"" api=""ConcurrentMap"" kind=""class"">
    ConcurrentMap 
  </clt></code> interface, which extends <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>. These implementations offer much higher concurrency than mere synchronized implementations.</p> 
<p>As a rule, you should be thinking about the interfaces, <em> 
  <clt fqn=""java.math.BigInteger.not"" api=""BigInteger"" kind=""method"">
   BigInteger.not
  </clt></em> the implementations. That is why there are no programming examples in this section. For the most part, the choice of implementation affects only performance. The preferred style, as mentioned in the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/index.html"">Interfaces</a> section, is to choose an implementation when a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> is created and to immediately assign the new collection to a variable of the corresponding interface type (or to pass the collection to a method expecting an argument of the interface type). In this way, the program does not become dependent on any added methods in a given implementation, leaving the programmer free to change implementations anytime that it is warranted by performance concerns or behavioral details.</p>","BigInteger","java.math.BigInteger","class",0
,"Lesson: Implementations","Lesson: Implementations - part 4","<h3>Lesson: Implementations - part 4</h3>
<p>If you need thread-safe collections, the synchronization wrappers, described in the <a class=""TutorialLink"" target=""_top"" href=""wrapper.html"">Wrapper Implementations</a> section, allow <em>any</em> collection to be transformed into a synchronized collection. Thus, synchronization is optional for general-purpose implementations, whereas it is mandatory for legacy implementations. Moreover, the <code>java.util.concurrent</code> package provides concurrent implementations of the <code> 
  <clt fqn=""java.util.concurrent.BlockingQueue"" api=""BlockingQueue"" kind=""class"">
    BlockingQueue 
  </clt></code> interface, which extends <code>Queue</code>, and of the <code> 
  <clt fqn=""java.util.concurrent.ConcurrentMap"" api=""ConcurrentMap"" kind=""class"">
    ConcurrentMap 
  </clt></code> interface, which extends <code> 
  <clt fqn=""java.util.Map"" api=""Map"" kind=""class"">
    Map 
  </clt></code>. These implementations offer much higher concurrency than mere synchronized implementations.</p> 
<p>As a rule, you should be thinking about the interfaces, <em> 
  <clt fqn=""java.math.BigInteger.not"" api=""BigInteger"" kind=""method"">
   BigInteger.not
  </clt></em> the implementations. That is why there are no programming examples in this section. For the most part, the choice of implementation affects only performance. The preferred style, as mentioned in the <a class=""TutorialLink"" target=""_top"" href=""../interfaces/index.html"">Interfaces</a> section, is to choose an implementation when a <code> 
  <clt fqn=""java.util.Collection"" api=""Collection"" kind=""class"">
    Collection 
  </clt></code> is created and to immediately assign the new collection to a variable of the corresponding interface type (or to pass the collection to a method expecting an argument of the interface type). In this way, the program does not become dependent on any added methods in a given implementation, leaving the programmer free to change implementations anytime that it is warranted by performance concerns or behavioral details.</p>","Collection","java.util.Collection","class",0
,"List Implementations","General-Purpose List Implementations","<h2>General-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p>There are two general-purpose <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code><clt fqn=""java.util.List"" api=""List"" kind=""class"">List</clt></code></a> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>. Most of the time, you'll probably use <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code>, which offers constant-time positional access and is just plain fast. It does not have to allocate a node object for each element in the <code><clt fqn=""java.util.List"" api=""List"" kind=""class"">List</clt></code>, and it can take advantage of <code>   
    System.arraycopy </code> when it has to move multiple elements at the same time. Think of <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> as <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> without the synchronization overhead.</p> 
<p>If you frequently add elements to the beginning of the <code>List</code> or iterate over the <code>List</code> to delete elements from its interior, you should consider using <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code>. These operations require constant-time in a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and linear-time in an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code>. But you pay a big price in performance. Positional access requires linear-time in a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and constant-time in an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code>. Furthermore, the constant factor for <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> is much worse. If you think you want to use a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code>, measure the performance of your application with both <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> before making your choice; <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> is usually faster.</p>","List","java.util.List","class",0
,"List Implementations","General-Purpose List Implementations","<h2>General-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p>There are two general-purpose <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code><clt fqn=""java.util.List"" api=""List"" kind=""class"">List</clt></code></a> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>. Most of the time, you'll probably use <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code>, which offers constant-time positional access and is just plain fast. It does not have to allocate a node object for each element in the <code><clt fqn=""java.util.List"" api=""List"" kind=""class"">List</clt></code>, and it can take advantage of <code>   
    System.arraycopy </code> when it has to move multiple elements at the same time. Think of <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> as <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> without the synchronization overhead.</p> 
<p>If you frequently add elements to the beginning of the <code>List</code> or iterate over the <code>List</code> to delete elements from its interior, you should consider using <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code>. These operations require constant-time in a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and linear-time in an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code>. But you pay a big price in performance. Positional access requires linear-time in a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and constant-time in an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code>. Furthermore, the constant factor for <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> is much worse. If you think you want to use a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code>, measure the performance of your application with both <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> before making your choice; <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> is usually faster.</p>","ArrayList","java.util.ArrayList","class",0
,"List Implementations","General-Purpose List Implementations","<h2>General-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p>There are two general-purpose <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/List.html""><code><clt fqn=""java.util.List"" api=""List"" kind=""class"">List</clt></code></a> implementations ? <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html""><code> 
   <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
     ArrayList 
   </clt></code></a> and <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/LinkedList.html""><code> 
   <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
     LinkedList 
   </clt></code></a>. Most of the time, you'll probably use <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code>, which offers constant-time positional access and is just plain fast. It does not have to allocate a node object for each element in the <code><clt fqn=""java.util.List"" api=""List"" kind=""class"">List</clt></code>, and it can take advantage of <code>   
    System.arraycopy </code> when it has to move multiple elements at the same time. Think of <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> as <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> without the synchronization overhead.</p> 
<p>If you frequently add elements to the beginning of the <code>List</code> or iterate over the <code>List</code> to delete elements from its interior, you should consider using <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code>. These operations require constant-time in a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and linear-time in an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code>. But you pay a big price in performance. Positional access requires linear-time in a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and constant-time in an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code>. Furthermore, the constant factor for <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> is much worse. If you think you want to use a <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code>, measure the performance of your application with both <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> and <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> before making your choice; <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> is usually faster.</p>","LinkedList","java.util.LinkedList","class",0
,"List Implementations","General-Purpose List Implementations - part 2","<h3>General-Purpose List Implementations - part 2</h3>
<p><code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> has one tuning parameter ? the <em>initial capacity</em>, which refers to the number of elements the <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> can hold before it has to grow. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> has no tuning parameters and seven optional operations, one of which is <code>clone</code>. The other six are <code> 
  <clt fqn=""java.util.LinkedList.addFirst"" api=""LinkedList"" kind=""method"">
   LinkedList.addFirst
  </clt></code>, <code> 
  <clt fqn=""java.util.LinkedList.getFirst"" api=""LinkedList"" kind=""method"">
   LinkedList.getFirst
  </clt></code>, <code> 
  <clt fqn=""java.util.LinkedList.removeFirst"" api=""LinkedList"" kind=""method"">
   LinkedList.removeFirst
  </clt></code>, <code> 
  <clt fqn=""java.util.LinkedList.addLast"" api=""LinkedList"" kind=""method"">
   LinkedList.addLast
  </clt></code>, <code> 
  <clt fqn=""java.util.LinkedList.getLast"" api=""LinkedList"" kind=""method"">
   LinkedList.getLast
  </clt></code>, and <code> 
  <clt fqn=""java.util.LinkedList.removeLast"" api=""LinkedList"" kind=""method"">
   LinkedList.removeLast
  </clt></code>. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> also implements the <code>Queue</code> interface.</p>","ArrayList","java.util.ArrayList","class",0
,"List Implementations","General-Purpose List Implementations - part 2","<h3>General-Purpose List Implementations - part 2</h3>
<p><code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> has one tuning parameter ? the <em>initial capacity</em>, which refers to the number of elements the <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> can hold before it has to grow. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> has no tuning parameters and seven optional operations, one of which is <code>clone</code>. The other six are <code> 
  <clt fqn=""java.util.LinkedList.addFirst"" api=""LinkedList"" kind=""method"">
   LinkedList.addFirst
  </clt></code>, <code> 
  <clt fqn=""java.util.LinkedList.getFirst"" api=""LinkedList"" kind=""method"">
   LinkedList.getFirst
  </clt></code>, <code> 
  <clt fqn=""java.util.LinkedList.removeFirst"" api=""LinkedList"" kind=""method"">
   LinkedList.removeFirst
  </clt></code>, <code> 
  <clt fqn=""java.util.LinkedList.addLast"" api=""LinkedList"" kind=""method"">
   LinkedList.addLast
  </clt></code>, <code> 
  <clt fqn=""java.util.LinkedList.getLast"" api=""LinkedList"" kind=""method"">
   LinkedList.getLast
  </clt></code>, and <code> 
  <clt fqn=""java.util.LinkedList.removeLast"" api=""LinkedList"" kind=""method"">
   LinkedList.removeLast
  </clt></code>. <code> 
  <clt fqn=""java.util.LinkedList"" api=""LinkedList"" kind=""class"">
    LinkedList 
  </clt></code> also implements the <code>Queue</code> interface.</p>","LinkedList","java.util.LinkedList","class",0
,"List Implementations","Special-Purpose List Implementations","<h2>Special-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html""><code> 
   <clt fqn=""java.util.concurrent.CopyOnWriteArrayList"" api=""CopyOnWriteArrayList"" kind=""class"">
     CopyOnWriteArrayList 
   </clt></code></a> is a <code>List</code> implementation backed up by a copy-on-write array. This implementation is similar in nature to <code> 
  <clt fqn=""java.util.concurrent.CopyOnWriteArraySet"" api=""CopyOnWriteArraySet"" kind=""class"">
    CopyOnWriteArraySet 
  </clt></code>. No synchronization is necessary, even during iteration, and iterators are guaranteed never to throw <code> 
  <clt fqn=""java.util.ConcurrentModificationException"" api=""ConcurrentModificationException"" kind=""class"">
    ConcurrentModificationException 
  </clt></code>. This implementation is well suited to maintaining event-handler lists, in which change is infrequent, and traversal is frequent and potentially time-consuming.</p> 
<p>If you need synchronization, a <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""method"">
   Vector
  </clt></code> will be slightly faster than an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> synchronized with <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections.synchronizedList 
  </clt></code>. But <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> has loads of legacy operations, so be careful to always manipulate the <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> with the <code>List</code> interface or else you won't be able to replace the implementation at a later time.</p> 
<p>If your <code>List</code> is fixed in size ? that is, you'll never use <code>remove</code>, <code>add</code>, or any of the bulk operations other than <code>containsAll</code> ? you have a third option that's definitely worth considering. See <code> 
  <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
   Arrays.asList
  </clt></code> in the <a class=""TutorialLink"" target=""_top"" href=""convenience.html"">Convenience Implementations</a> section for more information.</p>","List","java.util.List","class",0
,"List Implementations","Special-Purpose List Implementations","<h2>Special-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html""><code> 
   <clt fqn=""java.util.concurrent.CopyOnWriteArrayList"" api=""CopyOnWriteArrayList"" kind=""class"">
     CopyOnWriteArrayList 
   </clt></code></a> is a <code>List</code> implementation backed up by a copy-on-write array. This implementation is similar in nature to <code> 
  <clt fqn=""java.util.concurrent.CopyOnWriteArraySet"" api=""CopyOnWriteArraySet"" kind=""class"">
    CopyOnWriteArraySet 
  </clt></code>. No synchronization is necessary, even during iteration, and iterators are guaranteed never to throw <code> 
  <clt fqn=""java.util.ConcurrentModificationException"" api=""ConcurrentModificationException"" kind=""class"">
    ConcurrentModificationException 
  </clt></code>. This implementation is well suited to maintaining event-handler lists, in which change is infrequent, and traversal is frequent and potentially time-consuming.</p> 
<p>If you need synchronization, a <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""method"">
   Vector
  </clt></code> will be slightly faster than an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> synchronized with <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections.synchronizedList 
  </clt></code>. But <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> has loads of legacy operations, so be careful to always manipulate the <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> with the <code>List</code> interface or else you won't be able to replace the implementation at a later time.</p> 
<p>If your <code>List</code> is fixed in size ? that is, you'll never use <code>remove</code>, <code>add</code>, or any of the bulk operations other than <code>containsAll</code> ? you have a third option that's definitely worth considering. See <code> 
  <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
   Arrays.asList
  </clt></code> in the <a class=""TutorialLink"" target=""_top"" href=""convenience.html"">Convenience Implementations</a> section for more information.</p>","CopyOnWriteArrayList","java.util.concurrent.CopyOnWriteArrayList","class",0
,"List Implementations","Special-Purpose List Implementations","<h2>Special-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html""><code> 
   <clt fqn=""java.util.concurrent.CopyOnWriteArrayList"" api=""CopyOnWriteArrayList"" kind=""class"">
     CopyOnWriteArrayList 
   </clt></code></a> is a <code>List</code> implementation backed up by a copy-on-write array. This implementation is similar in nature to <code> 
  <clt fqn=""java.util.concurrent.CopyOnWriteArraySet"" api=""CopyOnWriteArraySet"" kind=""class"">
    CopyOnWriteArraySet 
  </clt></code>. No synchronization is necessary, even during iteration, and iterators are guaranteed never to throw <code> 
  <clt fqn=""java.util.ConcurrentModificationException"" api=""ConcurrentModificationException"" kind=""class"">
    ConcurrentModificationException 
  </clt></code>. This implementation is well suited to maintaining event-handler lists, in which change is infrequent, and traversal is frequent and potentially time-consuming.</p> 
<p>If you need synchronization, a <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""method"">
   Vector
  </clt></code> will be slightly faster than an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> synchronized with <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections.synchronizedList 
  </clt></code>. But <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> has loads of legacy operations, so be careful to always manipulate the <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> with the <code>List</code> interface or else you won't be able to replace the implementation at a later time.</p> 
<p>If your <code>List</code> is fixed in size ? that is, you'll never use <code>remove</code>, <code>add</code>, or any of the bulk operations other than <code>containsAll</code> ? you have a third option that's definitely worth considering. See <code> 
  <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
   Arrays.asList
  </clt></code> in the <a class=""TutorialLink"" target=""_top"" href=""convenience.html"">Convenience Implementations</a> section for more information.</p>","CopyOnWriteArraySet","java.util.concurrent.CopyOnWriteArraySet","class",0
,"List Implementations","Special-Purpose List Implementations","<h2>Special-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html""><code> 
   <clt fqn=""java.util.concurrent.CopyOnWriteArrayList"" api=""CopyOnWriteArrayList"" kind=""class"">
     CopyOnWriteArrayList 
   </clt></code></a> is a <code>List</code> implementation backed up by a copy-on-write array. This implementation is similar in nature to <code> 
  <clt fqn=""java.util.concurrent.CopyOnWriteArraySet"" api=""CopyOnWriteArraySet"" kind=""class"">
    CopyOnWriteArraySet 
  </clt></code>. No synchronization is necessary, even during iteration, and iterators are guaranteed never to throw <code> 
  <clt fqn=""java.util.ConcurrentModificationException"" api=""ConcurrentModificationException"" kind=""class"">
    ConcurrentModificationException 
  </clt></code>. This implementation is well suited to maintaining event-handler lists, in which change is infrequent, and traversal is frequent and potentially time-consuming.</p> 
<p>If you need synchronization, a <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""method"">
   Vector
  </clt></code> will be slightly faster than an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> synchronized with <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections.synchronizedList 
  </clt></code>. But <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> has loads of legacy operations, so be careful to always manipulate the <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> with the <code>List</code> interface or else you won't be able to replace the implementation at a later time.</p> 
<p>If your <code>List</code> is fixed in size ? that is, you'll never use <code>remove</code>, <code>add</code>, or any of the bulk operations other than <code>containsAll</code> ? you have a third option that's definitely worth considering. See <code> 
  <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
   Arrays.asList
  </clt></code> in the <a class=""TutorialLink"" target=""_top"" href=""convenience.html"">Convenience Implementations</a> section for more information.</p>","ConcurrentModificationException","java.util.ConcurrentModificationException","class",0
,"List Implementations","Special-Purpose List Implementations","<h2>Special-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html""><code> 
   <clt fqn=""java.util.concurrent.CopyOnWriteArrayList"" api=""CopyOnWriteArrayList"" kind=""class"">
     CopyOnWriteArrayList 
   </clt></code></a> is a <code>List</code> implementation backed up by a copy-on-write array. This implementation is similar in nature to <code> 
  <clt fqn=""java.util.concurrent.CopyOnWriteArraySet"" api=""CopyOnWriteArraySet"" kind=""class"">
    CopyOnWriteArraySet 
  </clt></code>. No synchronization is necessary, even during iteration, and iterators are guaranteed never to throw <code> 
  <clt fqn=""java.util.ConcurrentModificationException"" api=""ConcurrentModificationException"" kind=""class"">
    ConcurrentModificationException 
  </clt></code>. This implementation is well suited to maintaining event-handler lists, in which change is infrequent, and traversal is frequent and potentially time-consuming.</p> 
<p>If you need synchronization, a <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""method"">
   Vector
  </clt></code> will be slightly faster than an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> synchronized with <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections.synchronizedList 
  </clt></code>. But <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> has loads of legacy operations, so be careful to always manipulate the <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> with the <code>List</code> interface or else you won't be able to replace the implementation at a later time.</p> 
<p>If your <code>List</code> is fixed in size ? that is, you'll never use <code>remove</code>, <code>add</code>, or any of the bulk operations other than <code>containsAll</code> ? you have a third option that's definitely worth considering. See <code> 
  <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
   Arrays.asList
  </clt></code> in the <a class=""TutorialLink"" target=""_top"" href=""convenience.html"">Convenience Implementations</a> section for more information.</p>","ArrayList","java.util.ArrayList","class",0
,"List Implementations","Special-Purpose List Implementations","<h2>Special-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html""><code> 
   <clt fqn=""java.util.concurrent.CopyOnWriteArrayList"" api=""CopyOnWriteArrayList"" kind=""class"">
     CopyOnWriteArrayList 
   </clt></code></a> is a <code>List</code> implementation backed up by a copy-on-write array. This implementation is similar in nature to <code> 
  <clt fqn=""java.util.concurrent.CopyOnWriteArraySet"" api=""CopyOnWriteArraySet"" kind=""class"">
    CopyOnWriteArraySet 
  </clt></code>. No synchronization is necessary, even during iteration, and iterators are guaranteed never to throw <code> 
  <clt fqn=""java.util.ConcurrentModificationException"" api=""ConcurrentModificationException"" kind=""class"">
    ConcurrentModificationException 
  </clt></code>. This implementation is well suited to maintaining event-handler lists, in which change is infrequent, and traversal is frequent and potentially time-consuming.</p> 
<p>If you need synchronization, a <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""method"">
   Vector
  </clt></code> will be slightly faster than an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> synchronized with <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections.synchronizedList 
  </clt></code>. But <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> has loads of legacy operations, so be careful to always manipulate the <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> with the <code>List</code> interface or else you won't be able to replace the implementation at a later time.</p> 
<p>If your <code>List</code> is fixed in size ? that is, you'll never use <code>remove</code>, <code>add</code>, or any of the bulk operations other than <code>containsAll</code> ? you have a third option that's definitely worth considering. See <code> 
  <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
   Arrays.asList
  </clt></code> in the <a class=""TutorialLink"" target=""_top"" href=""convenience.html"">Convenience Implementations</a> section for more information.</p>","Collections","java.util.Collections","class",0
,"List Implementations","Special-Purpose List Implementations","<h2>Special-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html""><code> 
   <clt fqn=""java.util.concurrent.CopyOnWriteArrayList"" api=""CopyOnWriteArrayList"" kind=""class"">
     CopyOnWriteArrayList 
   </clt></code></a> is a <code>List</code> implementation backed up by a copy-on-write array. This implementation is similar in nature to <code> 
  <clt fqn=""java.util.concurrent.CopyOnWriteArraySet"" api=""CopyOnWriteArraySet"" kind=""class"">
    CopyOnWriteArraySet 
  </clt></code>. No synchronization is necessary, even during iteration, and iterators are guaranteed never to throw <code> 
  <clt fqn=""java.util.ConcurrentModificationException"" api=""ConcurrentModificationException"" kind=""class"">
    ConcurrentModificationException 
  </clt></code>. This implementation is well suited to maintaining event-handler lists, in which change is infrequent, and traversal is frequent and potentially time-consuming.</p> 
<p>If you need synchronization, a <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""method"">
   Vector
  </clt></code> will be slightly faster than an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> synchronized with <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections.synchronizedList 
  </clt></code>. But <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> has loads of legacy operations, so be careful to always manipulate the <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> with the <code>List</code> interface or else you won't be able to replace the implementation at a later time.</p> 
<p>If your <code>List</code> is fixed in size ? that is, you'll never use <code>remove</code>, <code>add</code>, or any of the bulk operations other than <code>containsAll</code> ? you have a third option that's definitely worth considering. See <code> 
  <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
   Arrays.asList
  </clt></code> in the <a class=""TutorialLink"" target=""_top"" href=""convenience.html"">Convenience Implementations</a> section for more information.</p>","Vector","java.util.Vector","class",0
,"List Implementations","Special-Purpose List Implementations","<h2>Special-Purpose 
 <clt fqn=""java.util.List"" api=""List"" kind=""class"">
   List 
 </clt>Implementations</h2> 
<p> <a class=""APILink"" target=""_blank"" href=""http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/CopyOnWriteArrayList.html""><code> 
   <clt fqn=""java.util.concurrent.CopyOnWriteArrayList"" api=""CopyOnWriteArrayList"" kind=""class"">
     CopyOnWriteArrayList 
   </clt></code></a> is a <code>List</code> implementation backed up by a copy-on-write array. This implementation is similar in nature to <code> 
  <clt fqn=""java.util.concurrent.CopyOnWriteArraySet"" api=""CopyOnWriteArraySet"" kind=""class"">
    CopyOnWriteArraySet 
  </clt></code>. No synchronization is necessary, even during iteration, and iterators are guaranteed never to throw <code> 
  <clt fqn=""java.util.ConcurrentModificationException"" api=""ConcurrentModificationException"" kind=""class"">
    ConcurrentModificationException 
  </clt></code>. This implementation is well suited to maintaining event-handler lists, in which change is infrequent, and traversal is frequent and potentially time-consuming.</p> 
<p>If you need synchronization, a <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""method"">
   Vector
  </clt></code> will be slightly faster than an <code> 
  <clt fqn=""java.util.ArrayList"" api=""ArrayList"" kind=""class"">
    ArrayList 
  </clt></code> synchronized with <code> 
  <clt fqn=""java.util.Collections"" api=""Collections"" kind=""class"">
    Collections.synchronizedList 
  </clt></code>. But <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> has loads of legacy operations, so be careful to always manipulate the <code> 
  <clt fqn=""java.util.Vector"" api=""Vector"" kind=""class"">
    Vector 
  </clt></code> with the <code>List</code> interface or else you won't be able to replace the implementation at a later time.</p> 
<p>If your <code>List</code> is fixed in size ? that is, you'll never use <code>remove</code>, <code>add</code>, or any of the bulk operations other than <code>containsAll</code> ? you have a third option that's definitely worth considering. See <code> 
  <clt fqn=""java.util.Arrays.asList"" api=""Arrays"" kind=""method"">
   Arrays.asList
  </clt></code> in the <a class=""TutorialLink"" target=""_top"" href=""convenience.html"">Convenience Implementations</a> section for more information.</p>","Arrays","java.util.Arrays","class",0
